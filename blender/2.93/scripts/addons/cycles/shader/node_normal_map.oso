OpenShadingLanguage 1.00
# Compiled by oslc 1.11.10
# options: -q -O2 -I/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders -I/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders -o /home/blender/git/blender-v293/build_release/intern/cycles/kernel/shaders/node_normal_map.oso
shader node_normal_map
param	normal	NormalIn	0 0 0		%read{1,89} %write{0,0} %initexpr
param	float	Strength	1		%read{84,87} %write{2147483647,-1}
param	color	Color	0.5 0.5 1		%read{2,6} %write{2147483647,-1}
param	string	space	"tangent"		%read{11,72} %write{2147483647,-1}
param	string	attr_name	"geom:tangent"		%read{21,21} %write{2147483647,-1}
param	string	attr_sign_name	"geom:tangent_sign"		%read{24,24} %write{2147483647,-1}
oparam	normal	Normal	0 0 0		%read{49,106} %write{1,205} %initexpr
global	vector	I	%read{92,109} %write{2147483647,-1}
global	normal	N	%read{0,0} %write{2147483647,-1}
global	normal	Ng	%read{17,204} %write{2147483647,-1}
local	vector	___360_R	%read{99,99} %write{95,95}
local	float	___360_threshold	%read{100,120} %write{98,98}
local	float	___360_NdotNg	%read{105,105} %write{104,104}
local	vector	___360_X	%read{108,203} %write{107,107}
local	float	___360_Ix	%read{111,161} %write{108,108}
local	float	___360_Iz	%read{113,166} %write{109,109}
local	float	___360_Ix2	%read{114,118} %write{111,111}
local	float	___360_Iz2	%read{114,114} %write{113,113}
local	float	___360_a	%read{117,122} %write{114,114}
local	float	___360_b	%read{123,125} %write{119,119}
local	float	___360_c	%read{123,126} %write{121,121}
local	float	___360_fac	%read{124,127} %write{122,122}
local	float	___360_N1_z2	%read{128,196} %write{124,124}
local	float	___360_N2_z2	%read{136,197} %write{127,127}
local	int	___360_valid1	%read{144,195} %write{135,167}
local	int	___360_valid2	%read{146,192} %write{143,168}
local	float	___360_N_new_x	%read{203,203} %write{176,199}
local	float	___360_N_new_z	%read{204,204} %write{180,200}
local	float	___363_N1_x	%read{155,184} %write{150,150}
local	float	___363_N1_z	%read{156,188} %write{151,151}
local	float	___363_N2_x	%read{161,185} %write{153,153}
local	float	___363_N2_z	%read{162,189} %write{154,154}
local	float	___363_R1	%read{167,186} %write{160,160}
local	float	___363_R2	%read{168,186} %write{166,166}
local	float	___366_Nz2	%read{198,200} %write{196,197}
local	color	mcolor	%read{40,80} %write{9,79}
local	int	is_backfacing	%read{19,82} %write{10,10}
local	vector	___368_tangent	%read{38,41} %write{21,21}
local	vector	___368_ninterp	%read{20,46} %write{18,32}
local	float	___368_tangent_sign	%read{39,39} %write{24,24}
local	float	___368_is_smooth	%read{15,29} %write{13,14}
local	vector	___371_B	%read{43,43} %write{39,39}
const	float	$const1	2		%read{9,164} %write{2147483647,-1}
temp	color	$tmp1	%read{9,9} %write{8,8}
const	int	$const2	0		%read{2,192} %write{2147483647,-1}
temp	float	$tmp2	%read{3,3} %write{2,2}
const	float	$const3	0.5		%read{3,122} %write{2147483647,-1}
temp	float	$tmp3	%read{8,8} %write{3,3}
const	int	$const4	1		%read{4,76} %write{2147483647,-1}
temp	float	$tmp4	%read{5,5} %write{4,4}
temp	float	$tmp5	%read{8,8} %write{5,5}
const	int	$const5	2		%read{6,79} %write{2147483647,-1}
temp	float	$tmp6	%read{7,7} %write{6,6}
temp	float	$tmp7	%read{8,8} %write{7,7}
const	string	$const6	"tangent"		%read{11,11} %write{2147483647,-1}
temp	int	$tmp8	%read{12,12} %write{11,11}
const	float	$const7	0		%read{13,87} %write{2147483647,-1}
temp	int	$tmp9	%read{2147483647,-1} %write{14,14}
const	string	$const8	"geom:is_smooth"		%read{14,14} %write{2147483647,-1}
temp	int	$tmp10	%read{16,16} %write{15,15}
temp	normal	$tmp11	%read{18,18} %write{17,17}
const	string	$const9	"world"		%read{17,70} %write{2147483647,-1}
const	string	$const10	"object"		%read{17,70} %write{2147483647,-1}
temp	int	$tmp12	%read{22,22} %write{21,21}
temp	int	$tmp13	%read{23,27} %write{22,26}
temp	int	$tmp14	%read{25,25} %write{24,24}
temp	int	$tmp15	%read{26,26} %write{25,25}
temp	int	$tmp16	%read{28,37} %write{27,36}
temp	int	$tmp17	%read{30,30} %write{29,29}
temp	int	$tmp18	%read{31,35} %write{30,34}
temp	int	$tmp19	%read{33,33} %write{32,32}
const	string	$const11	"geom:N"		%read{32,32} %write{2147483647,-1}
temp	int	$tmp20	%read{34,34} %write{33,33}
temp	int	$tmp21	%read{36,36} %write{35,35}
temp	vector	$tmp22	%read{39,39} %write{38,38}
temp	float	$tmp23	%read{41,41} %write{40,40}
temp	vector	$tmp24	%read{44,44} %write{41,41}
temp	float	$tmp25	%read{43,43} %write{42,42}
temp	vector	$tmp26	%read{44,44} %write{43,43}
temp	vector	$tmp27	%read{47,47} %write{44,44}
temp	float	$tmp28	%read{46,46} %write{45,45}
temp	vector	$tmp29	%read{47,47} %write{46,46}
temp	vector	$tmp30	%read{48,48} %write{47,47}
temp	normal	$tmp31	%read{50,50} %write{49,49}
const	normal	$const12	0 0 0		%read{51,51} %write{2147483647,-1}
temp	int	$tmp32	%read{53,53} %write{52,52}
temp	vector	$tmp33	%read{56,56} %write{55,55}
temp	vector	$tmp34	%read{55,55} %write{54,54}
temp	int	$tmp35	%read{58,58} %write{57,57}
temp	vector	$tmp36	%read{60,60} %write{59,59}
const	string	$const13	"blender_object"		%read{61,61} %write{2147483647,-1}
temp	int	$tmp37	%read{62,62} %write{61,61}
temp	float	$tmp38	%read{64,64} %write{63,63}
temp	float	$tmp39	%read{65,65} %write{64,64}
temp	float	$tmp40	%read{67,67} %write{66,66}
temp	float	$tmp41	%read{68,68} %write{67,67}
temp	vector	$tmp42	%read{71,71} %write{70,70}
temp	vector	$tmp43	%read{70,70} %write{69,69}
const	string	$const14	"blender_world"		%read{72,72} %write{2147483647,-1}
temp	int	$tmp44	%read{73,73} %write{72,72}
temp	float	$tmp45	%read{75,75} %write{74,74}
temp	float	$tmp46	%read{76,76} %write{75,75}
temp	float	$tmp47	%read{78,78} %write{77,77}
temp	float	$tmp48	%read{79,79} %write{78,78}
temp	vector	$tmp49	%read{81,81} %write{80,80}
const	float	$const15	1		%read{84,198} %write{2147483647,-1}
temp	int	$tmp50	%read{85,85} %write{84,84}
temp	normal	$tmp51	%read{88,88} %write{86,86}
temp	float	$tmp52	%read{88,88} %write{87,87}
temp	normal	$tmp53	%read{89,89} %write{88,88}
temp	normal	$tmp54	%read{90,90} %write{89,89}
const	string	$const16	"ensure_valid_reflection"		%read{91,91} %write{2147483647,-1}
temp	float	$tmp55	%read{93,93} %write{92,92}
temp	float	$tmp56	%read{94,94} %write{93,93}
temp	normal	$tmp57	%read{95,95} %write{94,94}
const	float	$const17	0.899999976		%read{97,97} %write{2147483647,-1}
temp	float	$tmp58	%read{97,97} %write{96,96}
temp	float	$tmp59	%read{98,98} %write{97,97}
const	float	$const18	0.00999999978		%read{98,98} %write{2147483647,-1}
temp	float	$tmp60	%read{100,100} %write{99,99}
temp	int	$tmp61	%read{101,101} %write{100,100}
temp	normal	$tmp62	%read{106,106} %write{105,105}
temp	normal	$tmp63	%read{107,107} %write{106,106}
const	string	$const19	"sqr"		%read{110,115} %write{2147483647,-1}
temp	float	$tmp64	%read{117,117} %write{116,116}
temp	float	$tmp65	%read{118,118} %write{117,117}
temp	float	$tmp66	%read{119,119} %write{118,118}
temp	float	$tmp67	%read{121,121} %write{120,120}
temp	float	$tmp68	%read{124,124} %write{123,123}
temp	float	$tmp69	%read{126,126} %write{125,125}
temp	float	$tmp70	%read{127,127} %write{126,126}
const	float	$const20	9.99999975e-06		%read{128,168} %write{2147483647,-1}
temp	int	$tmp71	%read{129,129} %write{128,128}
temp	int	$tmp72	%read{130,135} %write{129,134}
temp	float	$tmp73	%read{132,132} %write{131,131}
temp	int	$tmp74	%read{133,133} %write{132,132}
temp	int	$tmp75	%read{134,134} %write{133,133}
temp	int	$tmp76	%read{137,137} %write{136,136}
temp	int	$tmp77	%read{138,143} %write{137,142}
temp	float	$tmp78	%read{140,140} %write{139,139}
temp	int	$tmp79	%read{141,141} %write{140,140}
temp	int	$tmp80	%read{142,142} %write{141,141}
temp	int	$tmp81	%read{145,148} %write{144,147}
temp	int	$tmp82	%read{147,147} %write{146,146}
temp	float	$tmp83	%read{150,150} %write{149,149}
temp	float	$tmp84	%read{153,153} %write{152,152}
temp	float	$tmp85	%read{157,157} %write{155,155}
temp	float	$tmp86	%read{157,157} %write{156,156}
temp	float	$tmp87	%read{158,158} %write{157,157}
temp	float	$tmp88	%read{159,159} %write{158,158}
temp	float	$tmp89	%read{160,160} %write{159,159}
temp	float	$tmp90	%read{163,163} %write{161,161}
temp	float	$tmp91	%read{163,163} %write{162,162}
temp	float	$tmp92	%read{164,164} %write{163,163}
temp	float	$tmp93	%read{165,165} %write{164,164}
temp	float	$tmp94	%read{166,166} %write{165,165}
temp	int	$tmp95	%read{170,173} %write{169,172}
temp	int	$tmp96	%read{172,172} %write{171,171}
temp	int	$tmp97	%read{175,175} %write{174,174}
temp	int	$tmp98	%read{179,179} %write{178,178}
temp	int	$tmp99	%read{183,183} %write{182,182}
temp	int	$tmp100	%read{187,187} %write{186,186}
temp	int	$tmp101	%read{191,194} %write{190,193}
temp	int	$tmp102	%read{193,193} %write{192,192}
temp	float	$tmp103	%read{199,199} %write{198,198}
temp	vector	$tmp104	%read{205,205} %write{203,203}
temp	normal	$tmp105	%read{205,205} %write{204,204}
code NormalIn
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:19
# shader node_normal_map(normal NormalIn = N,
	assign		NormalIn N 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl"} %line{19} %argrw{"wr"}
code Normal
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:25
#                        output normal Normal = NormalIn)
	assign		Normal NormalIn 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl"} %line{25} %argrw{"wr"}
code ___main___
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:27
#   color mcolor = 2.0 * color(Color[0] - 0.5, Color[1] - 0.5, Color[2] - 0.5);
	compref		$tmp2 Color $const2 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl"} %line{27} %argrw{"wrr"}
	sub		$tmp3 $tmp2 $const3 	%argrw{"wrr"}
	compref		$tmp4 Color $const4 	%argrw{"wrr"}
	sub		$tmp5 $tmp4 $const3 	%argrw{"wrr"}
	compref		$tmp6 Color $const5 	%argrw{"wrr"}
	sub		$tmp7 $tmp6 $const3 	%argrw{"wrr"}
	color		$tmp1 $tmp3 $tmp5 $tmp7 	%argrw{"wrrr"}
	mul		mcolor $const1 $tmp1 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:28
#   int is_backfacing = backfacing();
	backfacing	is_backfacing 	%line{28} %argrw{"w"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:30
#   if (space == "tangent") {
	eq		$tmp8 space $const6 	%line{30} %argrw{"wrr"}
	if		$tmp8 52 82 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:34
#     float is_smooth = 0.0;
	assign		___368_is_smooth $const7 	%line{34} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:36
#     getattribute("geom:is_smooth", is_smooth);
	getattribute	$tmp9 $const8 ___368_is_smooth 	%line{36} %argrw{"wrw"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:37
#     if (!is_smooth) {
	eq		$tmp10 ___368_is_smooth $const7 	%line{37} %argrw{"wrr"}
	if		$tmp10 21 21 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:38
#       ninterp = normalize(transform("world", "object", Ng));
	transformn	$tmp11 $const9 $const10 Ng 	%line{38} %argrw{"wrrr"}
	normalize	___368_ninterp $tmp11 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:41
#       if (is_backfacing) {
	if		is_backfacing 21 21 	%line{41} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:42
#         ninterp = -ninterp;
	neg		___368_ninterp ___368_ninterp 	%line{42} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:47
#     if (getattribute(attr_name, tangent) && getattribute(attr_sign_name, tangent_sign) &&
	getattribute	$tmp12 attr_name ___368_tangent 	%line{47} %argrw{"wrw"}
	neq		$tmp13 $tmp12 $const2 	%argrw{"wrr"}
	if		$tmp13 27 27 	%argrw{"r"}
	getattribute	$tmp14 attr_sign_name ___368_tangent_sign 	%argrw{"wrw"}
	neq		$tmp15 $tmp14 $const2 	%argrw{"wrr"}
	assign		$tmp13 $tmp15 	%argrw{"wr"}
	neq		$tmp16 $tmp13 $const2 	%argrw{"wrr"}
	if		$tmp16 37 37 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:48
#         (!is_smooth || getattribute("geom:N", ninterp))) {
	eq		$tmp17 ___368_is_smooth $const7 	%line{48} %argrw{"wrr"}
	neq		$tmp18 $tmp17 $const2 	%argrw{"wrr"}
	if		$tmp18 32 35 	%argrw{"r"}
	getattribute	$tmp19 $const11 ___368_ninterp 	%argrw{"wrw"}
	neq		$tmp20 $tmp19 $const2 	%argrw{"wrr"}
	assign		$tmp18 $tmp20 	%argrw{"wr"}
	neq		$tmp21 $tmp18 $const2 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:47
#     if (getattribute(attr_name, tangent) && getattribute(attr_sign_name, tangent_sign) &&
	assign		$tmp16 $tmp21 	%line{47} %argrw{"wr"}
	if		$tmp16 51 52 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:50
#       vector B = tangent_sign * cross(ninterp, tangent);
	cross		$tmp22 ___368_ninterp ___368_tangent 	%line{50} %argrw{"wrr"}
	mul		___371_B ___368_tangent_sign $tmp22 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:51
#       Normal = normalize(mcolor[0] * tangent + mcolor[1] * B + mcolor[2] * ninterp);
	compref		$tmp23 mcolor $const2 	%line{51} %argrw{"wrr"}
	mul		$tmp24 $tmp23 ___368_tangent 	%argrw{"wrr"}
	compref		$tmp25 mcolor $const4 	%argrw{"wrr"}
	mul		$tmp26 $tmp25 ___371_B 	%argrw{"wrr"}
	add		$tmp27 $tmp24 $tmp26 	%argrw{"wrr"}
	compref		$tmp28 mcolor $const5 	%argrw{"wrr"}
	mul		$tmp29 $tmp28 ___368_ninterp 	%argrw{"wrr"}
	add		$tmp30 $tmp27 $tmp29 	%argrw{"wrr"}
	normalize	Normal $tmp30 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:54
#       Normal = normalize(transform("object", "world", Normal));
	transformn	$tmp31 $const10 $const9 Normal 	%line{54} %argrw{"wrrr"}
	normalize	Normal $tmp31 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:57
#       Normal = normal(0, 0, 0);
	assign		Normal $const12 	%line{57} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:60
#   else if (space == "object") {
	eq		$tmp32 space $const10 	%line{60} %argrw{"wrr"}
	if		$tmp32 57 82 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:61
#     Normal = normalize(transform("object", "world", vector(mcolor)));
	assign		$tmp34 mcolor 	%line{61} %argrw{"wr"}
	transformv	$tmp33 $const10 $const9 $tmp34 	%argrw{"wrrr"}
	normalize	Normal $tmp33 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:63
#   else if (space == "world") {
	eq		$tmp35 space $const9 	%line{63} %argrw{"wrr"}
	if		$tmp35 61 82 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:64
#     Normal = normalize(vector(mcolor));
	assign		$tmp36 mcolor 	%line{64} %argrw{"wr"}
	normalize	Normal $tmp36 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:66
#   else if (space == "blender_object") {
	eq		$tmp37 space $const13 	%line{66} %argrw{"wrr"}
	if		$tmp37 72 82 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:68
#     mcolor[1] = -mcolor[1];
	compref		$tmp38 mcolor $const4 	%line{68} %argrw{"wrr"}
	neg		$tmp39 $tmp38 	%argrw{"wr"}
	compassign	mcolor $const4 $tmp39 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:69
#     mcolor[2] = -mcolor[2];
	compref		$tmp40 mcolor $const5 	%line{69} %argrw{"wrr"}
	neg		$tmp41 $tmp40 	%argrw{"wr"}
	compassign	mcolor $const5 $tmp41 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:71
#     Normal = normalize(transform("object", "world", vector(mcolor)));
	assign		$tmp43 mcolor 	%line{71} %argrw{"wr"}
	transformv	$tmp42 $const10 $const9 $tmp43 	%argrw{"wrrr"}
	normalize	Normal $tmp42 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:73
#   else if (space == "blender_world") {
	eq		$tmp44 space $const14 	%line{73} %argrw{"wrr"}
	if		$tmp44 82 82 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:75
#     mcolor[1] = -mcolor[1];
	compref		$tmp45 mcolor $const4 	%line{75} %argrw{"wrr"}
	neg		$tmp46 $tmp45 	%argrw{"wr"}
	compassign	mcolor $const4 $tmp46 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:76
#     mcolor[2] = -mcolor[2];
	compref		$tmp47 mcolor $const5 	%line{76} %argrw{"wrr"}
	neg		$tmp48 $tmp47 	%argrw{"wr"}
	compassign	mcolor $const5 $tmp48 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:78
#     Normal = normalize(vector(mcolor));
	assign		$tmp49 mcolor 	%line{78} %argrw{"wr"}
	normalize	Normal $tmp49 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:82
#   if (is_backfacing) {
	if		is_backfacing 84 84 	%line{82} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:83
#     Normal = -Normal;
	neg		Normal Normal 	%line{83} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:86
#   if (Strength != 1.0)
	neq		$tmp50 Strength $const15 	%line{86} %argrw{"wrr"}
	if		$tmp50 91 91 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:87
#     Normal = normalize(NormalIn + (Normal - NormalIn) * max(Strength, 0.0));
	sub		$tmp51 Normal NormalIn 	%line{87} %argrw{"wrr"}
	max		$tmp52 Strength $const7 	%argrw{"wrr"}
	mul		$tmp53 $tmp51 $tmp52 	%argrw{"wrr"}
	add		$tmp54 NormalIn $tmp53 	%argrw{"wrr"}
	normalize	Normal $tmp54 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_normal_map.osl:89
#   Normal = ensure_valid_reflection(Ng, I, Normal);
	functioncall	$const16 207 	%line{89} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:97
#   vector R = 2 * dot(N, I) * N - I;
	dot		$tmp55 Normal I 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h"} %line{97} %argrw{"wrr"}
	mul		$tmp56 $const1 $tmp55 	%argrw{"wrr"}
	mul		$tmp57 $tmp56 Normal 	%argrw{"wrr"}
	sub		___360_R $tmp57 I 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:99
#   float threshold = min(0.9 * dot(Ng, I), 0.01);
	dot		$tmp58 Ng I 	%line{99} %argrw{"wrr"}
	mul		$tmp59 $const17 $tmp58 	%argrw{"wrr"}
	min		___360_threshold $tmp59 $const18 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:100
#   if (dot(Ng, R) >= threshold) {
	dot		$tmp60 Ng ___360_R 	%line{100} %argrw{"wrr"}
	ge		$tmp61 $tmp60 ___360_threshold 	%argrw{"wrr"}
	if		$tmp61 104 104 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:101
#     return N;
	assign		Normal Normal 	%line{101} %argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:104
#   float NdotNg = dot(N, Ng);
	dot		___360_NdotNg Normal Ng 	%line{104} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:105
#   vector X = normalize(N - NdotNg * Ng);
	mul		$tmp62 ___360_NdotNg Ng 	%line{105} %argrw{"wrr"}
	sub		$tmp63 Normal $tmp62 	%argrw{"wrr"}
	normalize	___360_X $tmp63 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:107
#   float Ix = dot(I, X), Iz = dot(I, Ng);
	dot		___360_Ix I ___360_X 	%line{107} %argrw{"wrr"}
	dot		___360_Iz I Ng 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:108
#   float Ix2 = sqr(Ix), Iz2 = sqr(Iz);
	functioncall	$const19 112 	%line{108} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:94
#     return x * x;
	mul		___360_Ix2 ___360_Ix ___360_Ix 	%line{94} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:108
#   float Ix2 = sqr(Ix), Iz2 = sqr(Iz);
	functioncall	$const19 114 	%line{108} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:94
#     return x * x;
	mul		___360_Iz2 ___360_Iz ___360_Iz 	%line{94} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:109
#   float a = Ix2 + Iz2;
	add		___360_a ___360_Ix2 ___360_Iz2 	%line{109} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:111
#   float b = sqrt(Ix2 * (a - sqr(threshold)));
	functioncall	$const19 117 	%line{111} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:94
#     return x * x;
	mul		$tmp64 ___360_threshold ___360_threshold 	%line{94} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:111
#   float b = sqrt(Ix2 * (a - sqr(threshold)));
	sub		$tmp65 ___360_a $tmp64 	%line{111} %argrw{"wrr"}
	mul		$tmp66 ___360_Ix2 $tmp65 	%argrw{"wrr"}
	sqrt		___360_b $tmp66 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:112
#   float c = Iz * threshold + a;
	mul		$tmp67 ___360_Iz ___360_threshold 	%line{112} %argrw{"wrr"}
	add		___360_c $tmp67 ___360_a 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:114
#   float fac = 0.5 / a;
	div		___360_fac $const3 ___360_a 	%line{114} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:115
#   float N1_z2 = fac * (b + c), N2_z2 = fac * (-b + c);
	add		$tmp68 ___360_b ___360_c 	%line{115} %argrw{"wrr"}
	mul		___360_N1_z2 ___360_fac $tmp68 	%argrw{"wrr"}
	neg		$tmp69 ___360_b 	%argrw{"wr"}
	add		$tmp70 $tmp69 ___360_c 	%argrw{"wrr"}
	mul		___360_N2_z2 ___360_fac $tmp70 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:116
#   int valid1 = (N1_z2 > 1e-5) && (N1_z2 <= (1.0 + 1e-5));
	gt		$tmp71 ___360_N1_z2 $const20 	%line{116} %argrw{"wrr"}
	neq		$tmp72 $tmp71 $const2 	%argrw{"wrr"}
	if		$tmp72 135 135 	%argrw{"r"}
	add		$tmp73 $const15 $const20 	%argrw{"wrr"}
	le		$tmp74 ___360_N1_z2 $tmp73 	%argrw{"wrr"}
	neq		$tmp75 $tmp74 $const2 	%argrw{"wrr"}
	assign		$tmp72 $tmp75 	%argrw{"wr"}
	assign		___360_valid1 $tmp72 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:117
#   int valid2 = (N2_z2 > 1e-5) && (N2_z2 <= (1.0 + 1e-5));
	gt		$tmp76 ___360_N2_z2 $const20 	%line{117} %argrw{"wrr"}
	neq		$tmp77 $tmp76 $const2 	%argrw{"wrr"}
	if		$tmp77 143 143 	%argrw{"r"}
	add		$tmp78 $const15 $const20 	%argrw{"wrr"}
	le		$tmp79 ___360_N2_z2 $tmp78 	%argrw{"wrr"}
	neq		$tmp80 $tmp79 $const2 	%argrw{"wrr"}
	assign		$tmp77 $tmp80 	%argrw{"wr"}
	assign		___360_valid2 $tmp77 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:120
#   if (valid1 && valid2) {
	neq		$tmp81 ___360_valid1 $const2 	%line{120} %argrw{"wrr"}
	if		$tmp81 148 148 	%argrw{"r"}
	neq		$tmp82 ___360_valid2 $const2 	%argrw{"wrr"}
	assign		$tmp81 $tmp82 	%argrw{"wr"}
	if		$tmp81 190 203 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:121
#     float N1_x = sqrt(1.0 - N1_z2), N1_z = sqrt(N1_z2);
	sub		$tmp83 $const15 ___360_N1_z2 	%line{121} %argrw{"wrr"}
	sqrt		___363_N1_x $tmp83 	%argrw{"wr"}
	sqrt		___363_N1_z ___360_N1_z2 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:122
#     float N2_x = sqrt(1.0 - N2_z2), N2_z = sqrt(N2_z2);
	sub		$tmp84 $const15 ___360_N2_z2 	%line{122} %argrw{"wrr"}
	sqrt		___363_N2_x $tmp84 	%argrw{"wr"}
	sqrt		___363_N2_z ___360_N2_z2 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:124
#     float R1 = 2 * (N1_x * Ix + N1_z * Iz) * N1_z - Iz;
	mul		$tmp85 ___363_N1_x ___360_Ix 	%line{124} %argrw{"wrr"}
	mul		$tmp86 ___363_N1_z ___360_Iz 	%argrw{"wrr"}
	add		$tmp87 $tmp85 $tmp86 	%argrw{"wrr"}
	mul		$tmp88 $const1 $tmp87 	%argrw{"wrr"}
	mul		$tmp89 $tmp88 ___363_N1_z 	%argrw{"wrr"}
	sub		___363_R1 $tmp89 ___360_Iz 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:125
#     float R2 = 2 * (N2_x * Ix + N2_z * Iz) * N2_z - Iz;
	mul		$tmp90 ___363_N2_x ___360_Ix 	%line{125} %argrw{"wrr"}
	mul		$tmp91 ___363_N2_z ___360_Iz 	%argrw{"wrr"}
	add		$tmp92 $tmp90 $tmp91 	%argrw{"wrr"}
	mul		$tmp93 $const1 $tmp92 	%argrw{"wrr"}
	mul		$tmp94 $tmp93 ___363_N2_z 	%argrw{"wrr"}
	sub		___363_R2 $tmp94 ___360_Iz 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:127
#     valid1 = (R1 >= 1e-5);
	ge		___360_valid1 ___363_R1 $const20 	%line{127} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:128
#     valid2 = (R2 >= 1e-5);
	ge		___360_valid2 ___363_R2 $const20 	%line{128} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:129
#     if (valid1 && valid2) {
	neq		$tmp95 ___360_valid1 $const2 	%line{129} %argrw{"wrr"}
	if		$tmp95 173 173 	%argrw{"r"}
	neq		$tmp96 ___360_valid2 $const2 	%argrw{"wrr"}
	assign		$tmp95 $tmp96 	%argrw{"wr"}
	if		$tmp95 182 190 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:130
#       N_new_x = (R1 < R2) ? N1_x : N2_x;
	lt		$tmp97 ___363_R1 ___363_R2 	%line{130} %argrw{"wrr"}
	if		$tmp97 177 178 	%argrw{"r"}
	assign		___360_N_new_x ___363_N1_x 	%argrw{"wr"}
	assign		___360_N_new_x ___363_N2_x 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:131
#       N_new_z = (R1 < R2) ? N1_z : N2_z;
	lt		$tmp98 ___363_R1 ___363_R2 	%line{131} %argrw{"wrr"}
	if		$tmp98 181 182 	%argrw{"r"}
	assign		___360_N_new_z ___363_N1_z 	%argrw{"wr"}
	assign		___360_N_new_z ___363_N2_z 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:134
#       N_new_x = (R1 > R2) ? N1_x : N2_x;
	gt		$tmp99 ___363_R1 ___363_R2 	%line{134} %argrw{"wrr"}
	if		$tmp99 185 186 	%argrw{"r"}
	assign		___360_N_new_x ___363_N1_x 	%argrw{"wr"}
	assign		___360_N_new_x ___363_N2_x 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:135
#       N_new_z = (R1 > R2) ? N1_z : N2_z;
	gt		$tmp100 ___363_R1 ___363_R2 	%line{135} %argrw{"wrr"}
	if		$tmp100 189 190 	%argrw{"r"}
	assign		___360_N_new_z ___363_N1_z 	%argrw{"wr"}
	assign		___360_N_new_z ___363_N2_z 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:138
#   else if (valid1 || valid2) {
	neq		$tmp101 ___360_valid1 $const2 	%line{138} %argrw{"wrr"}
	if		$tmp101 192 194 	%argrw{"r"}
	neq		$tmp102 ___360_valid2 $const2 	%argrw{"wrr"}
	assign		$tmp101 $tmp102 	%argrw{"wr"}
	if		$tmp101 201 203 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:139
#     float Nz2 = valid1 ? N1_z2 : N2_z2;
	if		___360_valid1 197 198 	%line{139} %argrw{"r"}
	assign		___366_Nz2 ___360_N1_z2 	%argrw{"wr"}
	assign		___366_Nz2 ___360_N2_z2 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:140
#     N_new_x = sqrt(1.0 - Nz2);
	sub		$tmp103 $const15 ___366_Nz2 	%line{140} %argrw{"wrr"}
	sqrt		___360_N_new_x $tmp103 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:141
#     N_new_z = sqrt(Nz2);
	sqrt		___360_N_new_z ___366_Nz2 	%line{141} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:144
#     return Ng;
	assign		Normal Ng 	%line{144} %argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/stdcycles.h:147
#   return N_new_x * X + N_new_z * Ng;
	mul		$tmp104 ___360_N_new_x ___360_X 	%line{147} %argrw{"wrr"}
	mul		$tmp105 ___360_N_new_z Ng 	%argrw{"wrr"}
	add		Normal $tmp104 $tmp105 	%argrw{"wrr"}
	return
	end
