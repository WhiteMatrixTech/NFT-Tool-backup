OpenShadingLanguage 1.00
# Compiled by oslc 1.11.10
# options: -q -O2 -I/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders -I/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders -o /home/blender/git/blender-v293/build_release/intern/cycles/kernel/shaders/node_voronoi_texture.oso
shader node_voronoi_texture
param	int	use_mapping	0		%read{10,10} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{11,11} %write{2147483647,-1}
param	string	dimensions	"3D"		%read{14,1577} %write{2147483647,-1}
param	string	feature	"f1"		%read{16,2476} %write{2147483647,-1}
param	string	metric	"euclidean"		%read{301,2137} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{9,9} %write{0,0} %initexpr
param	float	WIn	0		%read{12,12} %write{2147483647,-1}
param	float	Scale	5		%read{12,2740} %write{2147483647,-1}
param	float	Smoothness	5		%read{5,5} %write{2147483647,-1}
param	float	Exponent	1		%read{334,2154} %write{2147483647,-1}
param	float	Randomness	1		%read{3,3} %write{2147483647,-1}
oparam	float	Distance	0		%read{2147483647,-1} %write{43,2475}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{56,2222}
oparam	point	Position	0 0 0		%read{1575,1575} %write{1,2743} %initexpr
oparam	float	WOut	0		%read{256,256} %write{57,2744}
oparam	float	Radius	0		%read{2147483647,-1} %write{252,2723}
global	point	P	%read{0,1} %write{2147483647,-1}
local	float	___386_b_inv	%read{687,757} %write{687,757}
local	float	___440_b_inv	%read{2338,2474} %write{2338,2474}
local	float	___496_cellPosition	%read{20,57} %write{19,19}
local	float	___496_localPosition	%read{24,42} %write{20,20}
local	float	___496_minDistance	%read{24,43} %write{21,42}
local	float	___496_targetOffset	%read{44,44} %write{24,42}
local	float	___496_targetPosition	%read{57,57} %write{24,42}
local	int	___497_i	%read{24,42} %write{23,42}
local	float	___498_cellOffset	%read{24,42} %write{24,42}
local	float	___498_pointPosition	%read{24,42} %write{24,42}
local	float	___498_distanceToPoint	%read{24,42} %write{24,42}
local	float	___500_cellPosition	%read{62,114} %write{61,61}
local	float	___500_localPosition	%read{68,111} %write{62,62}
local	float	___500_smoothDistance	%read{68,112} %write{63,111}
local	float	___500_smoothPosition	%read{68,114} %write{64,111}
local	color	___500_smoothColor	%read{68,113} %write{65,111}
local	int	___501_i	%read{68,111} %write{67,111}
local	float	___502_cellOffset	%read{68,111} %write{68,111}
local	float	___502_pointPosition	%read{68,111} %write{68,111}
local	float	___502_distanceToPoint	%read{68,111} %write{68,111}
local	float	___502_h	%read{68,111} %write{68,111}
local	float	___502_correctionFactor	%read{68,111} %write{68,111}
local	color	___502_cellColor	%read{68,111} %write{68,111}
local	float	___503_cellPosition	%read{119,167} %write{118,118}
local	float	___503_localPosition	%read{126,152} %write{119,119}
local	float	___503_distanceF1	%read{126,152} %write{120,152}
local	float	___503_distanceF2	%read{126,153} %write{121,152}
local	float	___503_offsetF1	%read{126,152} %write{122,152}
local	float	___503_positionF1	%read{126,152} %write{123,152}
local	float	___503_offsetF2	%read{154,154} %write{126,152}
local	float	___503_positionF2	%read{167,167} %write{126,152}
local	int	___504_i	%read{126,152} %write{125,152}
local	float	___505_cellOffset	%read{126,152} %write{126,152}
local	float	___505_pointPosition	%read{126,152} %write{126,152}
local	float	___505_distanceToPoint	%read{126,152} %write{126,152}
local	float	___508_cellPosition	%read{172,181} %write{171,171}
local	float	___508_localPosition	%read{189,194} %write{172,172}
local	float	___508_midPointPosition	%read{186,191} %write{175,175}
local	float	___508_leftPointPosition	%read{186,186} %write{180,180}
local	float	___508_rightPointPosition	%read{191,191} %write{185,185}
local	float	___508_distanceToMidLeft	%read{196,196} %write{190,190}
local	float	___508_distanceToMidRight	%read{196,196} %write{195,195}
local	float	___509_cellPosition	%read{201,248} %write{200,200}
local	float	___509_localPosition	%read{205,223} %write{201,201}
local	float	___509_closestPoint	%read{227,250} %write{205,223}
local	float	___509_closestPointOffset	%read{227,248} %write{205,223}
local	float	___509_minDistance	%read{205,248} %write{202,248}
local	int	___510_i	%read{205,223} %write{204,223}
local	float	___511_cellOffset	%read{205,223} %write{205,223}
local	float	___511_pointPosition	%read{205,223} %write{205,223}
local	float	___511_distanceToPoint	%read{205,223} %write{205,223}
local	float	___509_closestPointToClosestPoint	%read{250,250} %write{227,248}
local	int	___513_i	%read{227,248} %write{226,248}
local	float	___514_cellOffset	%read{227,248} %write{227,248}
local	float	___514_pointPosition	%read{227,248} %write{227,248}
local	float	___514_distanceToPoint	%read{227,248} %write{227,248}
local	float	___523_cellPosition.x	%read{269,370} %write{266,266} %mystruct{___523_cellPosition} %mystructfield{0}
local	float	___523_cellPosition.y	%read{270,371} %write{267,267} %mystruct{___523_cellPosition} %mystructfield{1}
local	float	___523_localPosition.x	%read{274,354} %write{269,269} %mystruct{___523_localPosition} %mystructfield{0}
local	float	___523_localPosition.y	%read{274,354} %write{270,270} %mystruct{___523_localPosition} %mystructfield{1}
local	float	___523_minDistance	%read{274,355} %write{271,354}
local	float	___523_targetOffset.x	%read{357,357} %write{274,354} %mystruct{___523_targetOffset} %mystructfield{0}
local	float	___523_targetOffset.y	%read{358,358} %write{274,354} %mystruct{___523_targetOffset} %mystructfield{1}
local	float	___523_targetPosition.x	%read{370,370} %write{274,354} %mystruct{___523_targetPosition} %mystructfield{0}
local	float	___523_targetPosition.y	%read{371,371} %write{274,354} %mystruct{___523_targetPosition} %mystructfield{1}
local	int	___524_j	%read{274,354} %write{273,354}
local	int	___526_i	%read{274,354} %write{274,354}
local	float	___527_cellOffset.x	%read{274,354} %write{274,354} %mystruct{___527_cellOffset} %mystructfield{0}
local	float	___527_cellOffset.y	%read{274,354} %write{274,354} %mystruct{___527_cellOffset} %mystructfield{1}
local	float	___527_pointPosition.x	%read{274,354} %write{274,354} %mystruct{___527_pointPosition} %mystructfield{0}
local	float	___527_pointPosition.y	%read{274,354} %write{274,354} %mystruct{___527_pointPosition} %mystructfield{1}
local	float	___527_distanceToPoint	%read{274,354} %write{274,354}
local	float	___529_cellPosition.x	%read{379,501} %write{376,376} %mystruct{___529_cellPosition} %mystructfield{0}
local	float	___529_cellPosition.y	%read{380,502} %write{377,377} %mystruct{___529_cellPosition} %mystructfield{1}
local	float	___529_localPosition.x	%read{387,497} %write{379,379} %mystruct{___529_localPosition} %mystructfield{0}
local	float	___529_localPosition.y	%read{387,497} %write{380,380} %mystruct{___529_localPosition} %mystructfield{1}
local	float	___529_smoothDistance	%read{387,498} %write{381,497}
local	color	___529_smoothColor	%read{387,499} %write{382,497}
local	float	___529_smoothPosition.x	%read{387,501} %write{383,497} %mystruct{___529_smoothPosition} %mystructfield{0}
local	float	___529_smoothPosition.y	%read{387,502} %write{384,497} %mystruct{___529_smoothPosition} %mystructfield{1}
local	int	___530_j	%read{387,497} %write{386,497}
local	int	___532_i	%read{387,497} %write{387,497}
local	float	___533_cellOffset.x	%read{387,497} %write{387,497} %mystruct{___533_cellOffset} %mystructfield{0}
local	float	___533_cellOffset.y	%read{387,497} %write{387,497} %mystruct{___533_cellOffset} %mystructfield{1}
local	float	___533_pointPosition.x	%read{387,497} %write{387,497} %mystruct{___533_pointPosition} %mystructfield{0}
local	float	___533_pointPosition.y	%read{387,497} %write{387,497} %mystruct{___533_pointPosition} %mystructfield{1}
local	float	___533_distanceToPoint	%read{387,497} %write{387,497}
local	float	___533_h	%read{387,497} %write{387,497}
local	float	___533_correctionFactor	%read{387,497} %write{387,497}
local	color	___533_cellColor	%read{387,497} %write{387,497}
local	float	___534_cellPosition.x	%read{510,628} %write{507,507} %mystruct{___534_cellPosition} %mystructfield{0}
local	float	___534_cellPosition.y	%read{511,629} %write{508,508} %mystruct{___534_cellPosition} %mystructfield{1}
local	float	___534_localPosition.x	%read{520,612} %write{510,510} %mystruct{___534_localPosition} %mystructfield{0}
local	float	___534_localPosition.y	%read{520,612} %write{511,511} %mystruct{___534_localPosition} %mystructfield{1}
local	float	___534_distanceF1	%read{520,612} %write{512,612}
local	float	___534_distanceF2	%read{520,613} %write{513,612}
local	float	___534_offsetF1.x	%read{520,612} %write{514,612} %mystruct{___534_offsetF1} %mystructfield{0}
local	float	___534_offsetF1.y	%read{520,612} %write{515,612} %mystruct{___534_offsetF1} %mystructfield{1}
local	float	___534_positionF1.x	%read{520,612} %write{516,612} %mystruct{___534_positionF1} %mystructfield{0}
local	float	___534_positionF1.y	%read{520,612} %write{517,612} %mystruct{___534_positionF1} %mystructfield{1}
local	float	___534_offsetF2.x	%read{615,615} %write{520,612} %mystruct{___534_offsetF2} %mystructfield{0}
local	float	___534_offsetF2.y	%read{616,616} %write{520,612} %mystruct{___534_offsetF2} %mystructfield{1}
local	float	___534_positionF2.x	%read{628,628} %write{520,612} %mystruct{___534_positionF2} %mystructfield{0}
local	float	___534_positionF2.y	%read{629,629} %write{520,612} %mystruct{___534_positionF2} %mystructfield{1}
local	int	___535_j	%read{520,612} %write{519,612}
local	int	___537_i	%read{520,612} %write{520,612}
local	float	___538_cellOffset.x	%read{520,612} %write{520,612} %mystruct{___538_cellOffset} %mystructfield{0}
local	float	___538_cellOffset.y	%read{520,612} %write{520,612} %mystruct{___538_cellOffset} %mystructfield{1}
local	float	___538_pointPosition.x	%read{520,612} %write{520,612} %mystruct{___538_pointPosition} %mystructfield{0}
local	float	___538_pointPosition.y	%read{520,612} %write{520,612} %mystruct{___538_pointPosition} %mystructfield{1}
local	float	___538_distanceToPoint	%read{520,612} %write{520,612}
local	float	___541_cellPosition.x	%read{637,757} %write{634,634} %mystruct{___541_cellPosition} %mystructfield{0}
local	float	___541_cellPosition.y	%read{638,757} %write{635,635} %mystruct{___541_cellPosition} %mystructfield{1}
local	float	___541_localPosition.x	%read{642,757} %write{637,637} %mystruct{___541_localPosition} %mystructfield{0}
local	float	___541_localPosition.y	%read{642,757} %write{638,638} %mystruct{___541_localPosition} %mystructfield{1}
local	float	___541_vectorToClosest.x	%read{687,757} %write{642,683} %mystruct{___541_vectorToClosest} %mystructfield{0}
local	float	___541_vectorToClosest.y	%read{687,757} %write{642,683} %mystruct{___541_vectorToClosest} %mystructfield{1}
local	float	___541_minDistance	%read{642,758} %write{639,757}
local	int	___542_j	%read{642,683} %write{641,683}
local	int	___544_i	%read{642,683} %write{642,683}
local	float	___545_cellOffset.x	%read{642,683} %write{642,683} %mystruct{___545_cellOffset} %mystructfield{0}
local	float	___545_cellOffset.y	%read{642,683} %write{642,683} %mystruct{___545_cellOffset} %mystructfield{1}
local	float	___545_vectorToPoint.x	%read{642,683} %write{642,683} %mystruct{___545_vectorToPoint} %mystructfield{0}
local	float	___545_vectorToPoint.y	%read{642,683} %write{642,683} %mystruct{___545_vectorToPoint} %mystructfield{1}
local	float	___545_distanceToPoint	%read{642,683} %write{642,683}
local	int	___547_j	%read{687,757} %write{686,757}
local	int	___549_i	%read{687,757} %write{687,757}
local	float	___550_cellOffset.x	%read{687,757} %write{687,757} %mystruct{___550_cellOffset} %mystructfield{0}
local	float	___550_cellOffset.y	%read{687,757} %write{687,757} %mystruct{___550_cellOffset} %mystructfield{1}
local	float	___550_vectorToPoint.x	%read{687,757} %write{687,757} %mystruct{___550_vectorToPoint} %mystructfield{0}
local	float	___550_vectorToPoint.y	%read{687,757} %write{687,757} %mystruct{___550_vectorToPoint} %mystructfield{1}
local	float	___550_perpendicularToEdge.x	%read{687,757} %write{687,757} %mystruct{___550_perpendicularToEdge} %mystructfield{0}
local	float	___550_perpendicularToEdge.y	%read{687,757} %write{687,757} %mystruct{___550_perpendicularToEdge} %mystructfield{1}
local	float	___551_distanceToEdge	%read{687,757} %write{687,757}
local	float	___552_cellPosition.x	%read{766,876} %write{763,763} %mystruct{___552_cellPosition} %mystructfield{0}
local	float	___552_cellPosition.y	%read{767,876} %write{764,764} %mystruct{___552_cellPosition} %mystructfield{1}
local	float	___552_localPosition.x	%read{771,817} %write{766,766} %mystruct{___552_localPosition} %mystructfield{0}
local	float	___552_localPosition.y	%read{771,817} %write{767,767} %mystruct{___552_localPosition} %mystructfield{1}
local	float	___552_closestPoint.x	%read{821,879} %write{771,817} %mystruct{___552_closestPoint} %mystructfield{0}
local	float	___552_closestPoint.y	%read{821,880} %write{771,817} %mystruct{___552_closestPoint} %mystructfield{1}
local	float	___552_closestPointOffset.x	%read{821,876} %write{771,817} %mystruct{___552_closestPointOffset} %mystructfield{0}
local	float	___552_closestPointOffset.y	%read{821,876} %write{771,817} %mystruct{___552_closestPointOffset} %mystructfield{1}
local	float	___552_minDistance	%read{771,876} %write{768,876}
local	int	___553_j	%read{771,817} %write{770,817}
local	int	___555_i	%read{771,817} %write{771,817}
local	float	___556_cellOffset.x	%read{771,817} %write{771,817} %mystruct{___556_cellOffset} %mystructfield{0}
local	float	___556_cellOffset.y	%read{771,817} %write{771,817} %mystruct{___556_cellOffset} %mystructfield{1}
local	float	___556_pointPosition.x	%read{771,817} %write{771,817} %mystruct{___556_pointPosition} %mystructfield{0}
local	float	___556_pointPosition.y	%read{771,817} %write{771,817} %mystruct{___556_pointPosition} %mystructfield{1}
local	float	___556_distanceToPoint	%read{771,817} %write{771,817}
local	float	___552_closestPointToClosestPoint.x	%read{879,879} %write{821,876} %mystruct{___552_closestPointToClosestPoint} %mystructfield{0}
local	float	___552_closestPointToClosestPoint.y	%read{880,880} %write{821,876} %mystruct{___552_closestPointToClosestPoint} %mystructfield{1}
local	int	___558_j	%read{821,876} %write{820,876}
local	int	___560_i	%read{821,876} %write{821,876}
local	float	___561_cellOffset.x	%read{821,876} %write{821,876} %mystruct{___561_cellOffset} %mystructfield{0}
local	float	___561_cellOffset.y	%read{821,876} %write{821,876} %mystruct{___561_cellOffset} %mystructfield{1}
local	float	___561_pointPosition.x	%read{821,876} %write{821,876} %mystruct{___561_pointPosition} %mystructfield{0}
local	float	___561_pointPosition.y	%read{821,876} %write{821,876} %mystruct{___561_pointPosition} %mystructfield{1}
local	float	___561_distanceToPoint	%read{821,876} %write{821,876}
local	point	___570_cellPosition	%read{906,1039} %write{905,905}
local	point	___570_localPosition	%read{910,1018} %write{906,906}
local	float	___570_minDistance	%read{910,1019} %write{907,1018}
local	point	___570_targetOffset	%read{1020,1020} %write{910,1018}
local	point	___570_targetPosition	%read{1039,1039} %write{910,1018}
local	int	___571_k	%read{910,1018} %write{909,1018}
local	int	___573_j	%read{910,1018} %write{910,1018}
local	int	___575_i	%read{910,1018} %write{910,1018}
local	point	___576_cellOffset	%read{910,1018} %write{910,1018}
local	point	___576_pointPosition	%read{910,1018} %write{910,1018}
local	float	___576_distanceToPoint	%read{910,1018} %write{910,1018}
local	point	___578_cellPosition	%read{1044,1192} %write{1043,1043}
local	point	___578_localPosition	%read{1050,1189} %write{1044,1044}
local	float	___578_smoothDistance	%read{1050,1190} %write{1045,1189}
local	color	___578_smoothColor	%read{1050,1191} %write{1046,1189}
local	point	___578_smoothPosition	%read{1050,1192} %write{1047,1189}
local	int	___579_k	%read{1050,1189} %write{1049,1189}
local	int	___581_j	%read{1050,1189} %write{1050,1189}
local	int	___583_i	%read{1050,1189} %write{1050,1189}
local	point	___584_cellOffset	%read{1050,1189} %write{1050,1189}
local	point	___584_pointPosition	%read{1050,1189} %write{1050,1189}
local	float	___584_distanceToPoint	%read{1050,1189} %write{1050,1189}
local	float	___584_h	%read{1050,1189} %write{1050,1189}
local	float	___584_correctionFactor	%read{1050,1189} %write{1050,1189}
local	color	___584_cellColor	%read{1050,1189} %write{1050,1189}
local	point	___585_cellPosition	%read{1197,1341} %write{1196,1196}
local	point	___585_localPosition	%read{1204,1320} %write{1197,1197}
local	float	___585_distanceF1	%read{1204,1320} %write{1198,1320}
local	float	___585_distanceF2	%read{1204,1321} %write{1199,1320}
local	point	___585_offsetF1	%read{1204,1320} %write{1200,1320}
local	point	___585_positionF1	%read{1204,1320} %write{1201,1320}
local	point	___585_offsetF2	%read{1322,1322} %write{1204,1320}
local	point	___585_positionF2	%read{1341,1341} %write{1204,1320}
local	int	___586_k	%read{1204,1320} %write{1203,1320}
local	int	___588_j	%read{1204,1320} %write{1204,1320}
local	int	___590_i	%read{1204,1320} %write{1204,1320}
local	point	___591_cellOffset	%read{1204,1320} %write{1204,1320}
local	point	___591_pointPosition	%read{1204,1320} %write{1204,1320}
local	float	___591_distanceToPoint	%read{1204,1320} %write{1204,1320}
local	point	___594_cellPosition	%read{1346,1450} %write{1345,1345}
local	point	___594_localPosition	%read{1350,1450} %write{1346,1346}
local	point	___594_vectorToClosest	%read{1400,1450} %write{1350,1396}
local	float	___594_minDistance	%read{1350,1451} %write{1347,1450}
local	int	___595_k	%read{1350,1396} %write{1349,1396}
local	int	___597_j	%read{1350,1396} %write{1350,1396}
local	int	___599_i	%read{1350,1396} %write{1350,1396}
local	point	___600_cellOffset	%read{1350,1396} %write{1350,1396}
local	point	___600_vectorToPoint	%read{1350,1396} %write{1350,1396}
local	float	___600_distanceToPoint	%read{1350,1396} %write{1350,1396}
local	int	___602_k	%read{1400,1450} %write{1399,1450}
local	int	___604_j	%read{1400,1450} %write{1400,1450}
local	int	___606_i	%read{1400,1450} %write{1400,1450}
local	point	___607_cellOffset	%read{1400,1450} %write{1400,1450}
local	point	___607_vectorToPoint	%read{1400,1450} %write{1400,1450}
local	point	___607_perpendicularToEdge	%read{1400,1450} %write{1400,1450}
local	float	___608_distanceToEdge	%read{1400,1450} %write{1400,1450}
local	point	___609_cellPosition	%read{1456,1569} %write{1455,1455}
local	point	___609_localPosition	%read{1460,1506} %write{1456,1456}
local	point	___609_closestPoint	%read{1510,1570} %write{1460,1506}
local	point	___609_closestPointOffset	%read{1510,1569} %write{1460,1506}
local	float	___609_minDistance	%read{1460,1569} %write{1457,1569}
local	int	___610_k	%read{1460,1506} %write{1459,1506}
local	int	___612_j	%read{1460,1506} %write{1460,1506}
local	int	___614_i	%read{1460,1506} %write{1460,1506}
local	point	___615_cellOffset	%read{1460,1506} %write{1460,1506}
local	point	___615_pointPosition	%read{1460,1506} %write{1460,1506}
local	float	___615_distanceToPoint	%read{1460,1506} %write{1460,1506}
local	point	___609_closestPointToClosestPoint	%read{1570,1570} %write{1510,1569}
local	int	___617_k	%read{1510,1569} %write{1509,1569}
local	int	___619_j	%read{1510,1569} %write{1510,1569}
local	int	___621_i	%read{1510,1569} %write{1510,1569}
local	point	___622_cellOffset	%read{1510,1569} %write{1510,1569}
local	point	___622_pointPosition	%read{1510,1569} %write{1510,1569}
local	float	___622_distanceToPoint	%read{1510,1569} %write{1510,1569}
local	float	___631_cellPosition.x	%read{1592,1776} %write{1587,1587} %mystruct{___631_cellPosition} %mystructfield{0}
local	float	___631_cellPosition.y	%read{1593,1777} %write{1588,1588} %mystruct{___631_cellPosition} %mystructfield{1}
local	float	___631_cellPosition.z	%read{1594,1778} %write{1589,1589} %mystruct{___631_cellPosition} %mystructfield{2}
local	float	___631_cellPosition.w	%read{1595,1779} %write{1590,1590} %mystruct{___631_cellPosition} %mystructfield{3}
local	float	___631_localPosition.x	%read{1599,1749} %write{1592,1592} %mystruct{___631_localPosition} %mystructfield{0}
local	float	___631_localPosition.y	%read{1599,1749} %write{1593,1593} %mystruct{___631_localPosition} %mystructfield{1}
local	float	___631_localPosition.z	%read{1599,1749} %write{1594,1594} %mystruct{___631_localPosition} %mystructfield{2}
local	float	___631_localPosition.w	%read{1599,1749} %write{1595,1595} %mystruct{___631_localPosition} %mystructfield{3}
local	float	___631_minDistance	%read{1599,1750} %write{1596,1749}
local	float	___631_targetOffset.x	%read{1752,1752} %write{1599,1749} %mystruct{___631_targetOffset} %mystructfield{0}
local	float	___631_targetOffset.y	%read{1753,1753} %write{1599,1749} %mystruct{___631_targetOffset} %mystructfield{1}
local	float	___631_targetOffset.z	%read{1754,1754} %write{1599,1749} %mystruct{___631_targetOffset} %mystructfield{2}
local	float	___631_targetOffset.w	%read{1755,1755} %write{1599,1749} %mystruct{___631_targetOffset} %mystructfield{3}
local	float	___631_targetPosition.x	%read{1776,1776} %write{1599,1749} %mystruct{___631_targetPosition} %mystructfield{0}
local	float	___631_targetPosition.y	%read{1777,1777} %write{1599,1749} %mystruct{___631_targetPosition} %mystructfield{1}
local	float	___631_targetPosition.z	%read{1778,1778} %write{1599,1749} %mystruct{___631_targetPosition} %mystructfield{2}
local	float	___631_targetPosition.w	%read{1779,1779} %write{1599,1749} %mystruct{___631_targetPosition} %mystructfield{3}
local	int	___632_u	%read{1599,1749} %write{1598,1749}
local	int	___634_k	%read{1599,1749} %write{1599,1749}
local	int	___636_j	%read{1599,1749} %write{1599,1749}
local	int	___638_i	%read{1599,1749} %write{1599,1749}
local	float	___639_cellOffset.x	%read{1599,1749} %write{1599,1749} %mystruct{___639_cellOffset} %mystructfield{0}
local	float	___639_cellOffset.y	%read{1599,1749} %write{1599,1749} %mystruct{___639_cellOffset} %mystructfield{1}
local	float	___639_cellOffset.z	%read{1599,1749} %write{1599,1749} %mystruct{___639_cellOffset} %mystructfield{2}
local	float	___639_cellOffset.w	%read{1599,1749} %write{1599,1749} %mystruct{___639_cellOffset} %mystructfield{3}
local	float	___639_pointPosition.x	%read{1599,1749} %write{1599,1749} %mystruct{___639_pointPosition} %mystructfield{0}
local	float	___639_pointPosition.y	%read{1599,1749} %write{1599,1749} %mystruct{___639_pointPosition} %mystructfield{1}
local	float	___639_pointPosition.z	%read{1599,1749} %write{1599,1749} %mystruct{___639_pointPosition} %mystructfield{2}
local	float	___639_pointPosition.w	%read{1599,1749} %write{1599,1749} %mystruct{___639_pointPosition} %mystructfield{3}
local	float	___639_distanceToPoint	%read{1599,1749} %write{1599,1749}
local	float	___641_cellPosition.x	%read{1789,1998} %write{1784,1784} %mystruct{___641_cellPosition} %mystructfield{0}
local	float	___641_cellPosition.y	%read{1790,1999} %write{1785,1785} %mystruct{___641_cellPosition} %mystructfield{1}
local	float	___641_cellPosition.z	%read{1791,2000} %write{1786,1786} %mystruct{___641_cellPosition} %mystructfield{2}
local	float	___641_cellPosition.w	%read{1792,2001} %write{1787,1787} %mystruct{___641_cellPosition} %mystructfield{3}
local	float	___641_localPosition.x	%read{1801,1994} %write{1789,1789} %mystruct{___641_localPosition} %mystructfield{0}
local	float	___641_localPosition.y	%read{1801,1994} %write{1790,1790} %mystruct{___641_localPosition} %mystructfield{1}
local	float	___641_localPosition.z	%read{1801,1994} %write{1791,1791} %mystruct{___641_localPosition} %mystructfield{2}
local	float	___641_localPosition.w	%read{1801,1994} %write{1792,1792} %mystruct{___641_localPosition} %mystructfield{3}
local	float	___641_smoothDistance	%read{1801,1995} %write{1793,1994}
local	color	___641_smoothColor	%read{1801,1996} %write{1794,1994}
local	float	___641_smoothPosition.x	%read{1801,1998} %write{1795,1994} %mystruct{___641_smoothPosition} %mystructfield{0}
local	float	___641_smoothPosition.y	%read{1801,1999} %write{1796,1994} %mystruct{___641_smoothPosition} %mystructfield{1}
local	float	___641_smoothPosition.z	%read{1801,2000} %write{1797,1994} %mystruct{___641_smoothPosition} %mystructfield{2}
local	float	___641_smoothPosition.w	%read{1801,2001} %write{1798,1994} %mystruct{___641_smoothPosition} %mystructfield{3}
local	int	___642_u	%read{1801,1994} %write{1800,1994}
local	int	___644_k	%read{1801,1994} %write{1801,1994}
local	int	___646_j	%read{1801,1994} %write{1801,1994}
local	int	___648_i	%read{1801,1994} %write{1801,1994}
local	float	___649_cellOffset.x	%read{1801,1994} %write{1801,1994} %mystruct{___649_cellOffset} %mystructfield{0}
local	float	___649_cellOffset.y	%read{1801,1994} %write{1801,1994} %mystruct{___649_cellOffset} %mystructfield{1}
local	float	___649_cellOffset.z	%read{1801,1994} %write{1801,1994} %mystruct{___649_cellOffset} %mystructfield{2}
local	float	___649_cellOffset.w	%read{1801,1994} %write{1801,1994} %mystruct{___649_cellOffset} %mystructfield{3}
local	float	___649_pointPosition.x	%read{1801,1994} %write{1801,1994} %mystruct{___649_pointPosition} %mystructfield{0}
local	float	___649_pointPosition.y	%read{1801,1994} %write{1801,1994} %mystruct{___649_pointPosition} %mystructfield{1}
local	float	___649_pointPosition.z	%read{1801,1994} %write{1801,1994} %mystruct{___649_pointPosition} %mystructfield{2}
local	float	___649_pointPosition.w	%read{1801,1994} %write{1801,1994} %mystruct{___649_pointPosition} %mystructfield{3}
local	float	___649_distanceToPoint	%read{1801,1994} %write{1801,1994}
local	float	___649_h	%read{1801,1994} %write{1801,1994}
local	float	___649_correctionFactor	%read{1801,1994} %write{1801,1994}
local	color	___649_cellColor	%read{1801,1994} %write{1801,1994}
local	float	___650_cellPosition.x	%read{2011,2224} %write{2006,2006} %mystruct{___650_cellPosition} %mystructfield{0}
local	float	___650_cellPosition.y	%read{2012,2225} %write{2007,2007} %mystruct{___650_cellPosition} %mystructfield{1}
local	float	___650_cellPosition.z	%read{2013,2226} %write{2008,2008} %mystruct{___650_cellPosition} %mystructfield{2}
local	float	___650_cellPosition.w	%read{2014,2227} %write{2009,2009} %mystruct{___650_cellPosition} %mystructfield{3}
local	float	___650_localPosition.x	%read{2027,2197} %write{2011,2011} %mystruct{___650_localPosition} %mystructfield{0}
local	float	___650_localPosition.y	%read{2027,2197} %write{2012,2012} %mystruct{___650_localPosition} %mystructfield{1}
local	float	___650_localPosition.z	%read{2027,2197} %write{2013,2013} %mystruct{___650_localPosition} %mystructfield{2}
local	float	___650_localPosition.w	%read{2027,2197} %write{2014,2014} %mystruct{___650_localPosition} %mystructfield{3}
local	float	___650_distanceF1	%read{2027,2197} %write{2015,2197}
local	float	___650_distanceF2	%read{2027,2198} %write{2016,2197}
local	float	___650_offsetF1.x	%read{2027,2197} %write{2017,2197} %mystruct{___650_offsetF1} %mystructfield{0}
local	float	___650_offsetF1.y	%read{2027,2197} %write{2018,2197} %mystruct{___650_offsetF1} %mystructfield{1}
local	float	___650_offsetF1.z	%read{2027,2197} %write{2019,2197} %mystruct{___650_offsetF1} %mystructfield{2}
local	float	___650_offsetF1.w	%read{2027,2197} %write{2020,2197} %mystruct{___650_offsetF1} %mystructfield{3}
local	float	___650_positionF1.x	%read{2027,2197} %write{2021,2197} %mystruct{___650_positionF1} %mystructfield{0}
local	float	___650_positionF1.y	%read{2027,2197} %write{2022,2197} %mystruct{___650_positionF1} %mystructfield{1}
local	float	___650_positionF1.z	%read{2027,2197} %write{2023,2197} %mystruct{___650_positionF1} %mystructfield{2}
local	float	___650_positionF1.w	%read{2027,2197} %write{2024,2197} %mystruct{___650_positionF1} %mystructfield{3}
local	float	___650_offsetF2.x	%read{2200,2200} %write{2027,2197} %mystruct{___650_offsetF2} %mystructfield{0}
local	float	___650_offsetF2.y	%read{2201,2201} %write{2027,2197} %mystruct{___650_offsetF2} %mystructfield{1}
local	float	___650_offsetF2.z	%read{2202,2202} %write{2027,2197} %mystruct{___650_offsetF2} %mystructfield{2}
local	float	___650_offsetF2.w	%read{2203,2203} %write{2027,2197} %mystruct{___650_offsetF2} %mystructfield{3}
local	float	___650_positionF2.x	%read{2224,2224} %write{2027,2197} %mystruct{___650_positionF2} %mystructfield{0}
local	float	___650_positionF2.y	%read{2225,2225} %write{2027,2197} %mystruct{___650_positionF2} %mystructfield{1}
local	float	___650_positionF2.z	%read{2226,2226} %write{2027,2197} %mystruct{___650_positionF2} %mystructfield{2}
local	float	___650_positionF2.w	%read{2227,2227} %write{2027,2197} %mystruct{___650_positionF2} %mystructfield{3}
local	int	___651_u	%read{2027,2197} %write{2026,2197}
local	int	___653_k	%read{2027,2197} %write{2027,2197}
local	int	___655_j	%read{2027,2197} %write{2027,2197}
local	int	___657_i	%read{2027,2197} %write{2027,2197}
local	float	___658_cellOffset.x	%read{2027,2197} %write{2027,2197} %mystruct{___658_cellOffset} %mystructfield{0}
local	float	___658_cellOffset.y	%read{2027,2197} %write{2027,2197} %mystruct{___658_cellOffset} %mystructfield{1}
local	float	___658_cellOffset.z	%read{2027,2197} %write{2027,2197} %mystruct{___658_cellOffset} %mystructfield{2}
local	float	___658_cellOffset.w	%read{2027,2197} %write{2027,2197} %mystruct{___658_cellOffset} %mystructfield{3}
local	float	___658_pointPosition.x	%read{2027,2197} %write{2027,2197} %mystruct{___658_pointPosition} %mystructfield{0}
local	float	___658_pointPosition.y	%read{2027,2197} %write{2027,2197} %mystruct{___658_pointPosition} %mystructfield{1}
local	float	___658_pointPosition.z	%read{2027,2197} %write{2027,2197} %mystruct{___658_pointPosition} %mystructfield{2}
local	float	___658_pointPosition.w	%read{2027,2197} %write{2027,2197} %mystruct{___658_pointPosition} %mystructfield{3}
local	float	___658_distanceToPoint	%read{2027,2197} %write{2027,2197}
local	float	___661_cellPosition.x	%read{2237,2474} %write{2232,2232} %mystruct{___661_cellPosition} %mystructfield{0}
local	float	___661_cellPosition.y	%read{2238,2474} %write{2233,2233} %mystruct{___661_cellPosition} %mystructfield{1}
local	float	___661_cellPosition.z	%read{2239,2474} %write{2234,2234} %mystruct{___661_cellPosition} %mystructfield{2}
local	float	___661_cellPosition.w	%read{2240,2474} %write{2235,2235} %mystruct{___661_cellPosition} %mystructfield{3}
local	float	___661_localPosition.x	%read{2244,2474} %write{2237,2237} %mystruct{___661_localPosition} %mystructfield{0}
local	float	___661_localPosition.y	%read{2244,2474} %write{2238,2238} %mystruct{___661_localPosition} %mystructfield{1}
local	float	___661_localPosition.z	%read{2244,2474} %write{2239,2239} %mystruct{___661_localPosition} %mystructfield{2}
local	float	___661_localPosition.w	%read{2244,2474} %write{2240,2240} %mystruct{___661_localPosition} %mystructfield{3}
local	float	___661_vectorToClosest.x	%read{2338,2474} %write{2244,2334} %mystruct{___661_vectorToClosest} %mystructfield{0}
local	float	___661_vectorToClosest.y	%read{2338,2474} %write{2244,2334} %mystruct{___661_vectorToClosest} %mystructfield{1}
local	float	___661_vectorToClosest.z	%read{2338,2474} %write{2244,2334} %mystruct{___661_vectorToClosest} %mystructfield{2}
local	float	___661_vectorToClosest.w	%read{2338,2474} %write{2244,2334} %mystruct{___661_vectorToClosest} %mystructfield{3}
local	float	___661_minDistance	%read{2244,2475} %write{2241,2474}
local	int	___662_u	%read{2244,2334} %write{2243,2334}
local	int	___664_k	%read{2244,2334} %write{2244,2334}
local	int	___666_j	%read{2244,2334} %write{2244,2334}
local	int	___668_i	%read{2244,2334} %write{2244,2334}
local	float	___669_cellOffset.x	%read{2244,2334} %write{2244,2334} %mystruct{___669_cellOffset} %mystructfield{0}
local	float	___669_cellOffset.y	%read{2244,2334} %write{2244,2334} %mystruct{___669_cellOffset} %mystructfield{1}
local	float	___669_cellOffset.z	%read{2244,2334} %write{2244,2334} %mystruct{___669_cellOffset} %mystructfield{2}
local	float	___669_cellOffset.w	%read{2244,2334} %write{2244,2334} %mystruct{___669_cellOffset} %mystructfield{3}
local	float	___669_vectorToPoint.x	%read{2244,2334} %write{2244,2334} %mystruct{___669_vectorToPoint} %mystructfield{0}
local	float	___669_vectorToPoint.y	%read{2244,2334} %write{2244,2334} %mystruct{___669_vectorToPoint} %mystructfield{1}
local	float	___669_vectorToPoint.z	%read{2244,2334} %write{2244,2334} %mystruct{___669_vectorToPoint} %mystructfield{2}
local	float	___669_vectorToPoint.w	%read{2244,2334} %write{2244,2334} %mystruct{___669_vectorToPoint} %mystructfield{3}
local	float	___669_distanceToPoint	%read{2244,2334} %write{2244,2334}
local	int	___671_u	%read{2338,2474} %write{2337,2474}
local	int	___673_k	%read{2338,2474} %write{2338,2474}
local	int	___675_j	%read{2338,2474} %write{2338,2474}
local	int	___677_i	%read{2338,2474} %write{2338,2474}
local	float	___678_cellOffset.x	%read{2338,2474} %write{2338,2474} %mystruct{___678_cellOffset} %mystructfield{0}
local	float	___678_cellOffset.y	%read{2338,2474} %write{2338,2474} %mystruct{___678_cellOffset} %mystructfield{1}
local	float	___678_cellOffset.z	%read{2338,2474} %write{2338,2474} %mystruct{___678_cellOffset} %mystructfield{2}
local	float	___678_cellOffset.w	%read{2338,2474} %write{2338,2474} %mystruct{___678_cellOffset} %mystructfield{3}
local	float	___678_vectorToPoint.x	%read{2338,2474} %write{2338,2474} %mystruct{___678_vectorToPoint} %mystructfield{0}
local	float	___678_vectorToPoint.y	%read{2338,2474} %write{2338,2474} %mystruct{___678_vectorToPoint} %mystructfield{1}
local	float	___678_vectorToPoint.z	%read{2338,2474} %write{2338,2474} %mystruct{___678_vectorToPoint} %mystructfield{2}
local	float	___678_vectorToPoint.w	%read{2338,2474} %write{2338,2474} %mystruct{___678_vectorToPoint} %mystructfield{3}
local	float	___678_perpendicularToEdge.x	%read{2338,2474} %write{2338,2474} %mystruct{___678_perpendicularToEdge} %mystructfield{0}
local	float	___678_perpendicularToEdge.y	%read{2338,2474} %write{2338,2474} %mystruct{___678_perpendicularToEdge} %mystructfield{1}
local	float	___678_perpendicularToEdge.z	%read{2338,2474} %write{2338,2474} %mystruct{___678_perpendicularToEdge} %mystructfield{2}
local	float	___678_perpendicularToEdge.w	%read{2338,2474} %write{2338,2474} %mystruct{___678_perpendicularToEdge} %mystructfield{3}
local	float	___679_distanceToEdge	%read{2338,2474} %write{2338,2474}
local	float	___680_cellPosition.x	%read{2485,2707} %write{2480,2480} %mystruct{___680_cellPosition} %mystructfield{0}
local	float	___680_cellPosition.y	%read{2486,2707} %write{2481,2481} %mystruct{___680_cellPosition} %mystructfield{1}
local	float	___680_cellPosition.z	%read{2487,2707} %write{2482,2482} %mystruct{___680_cellPosition} %mystructfield{2}
local	float	___680_cellPosition.w	%read{2488,2707} %write{2483,2483} %mystruct{___680_cellPosition} %mystructfield{3}
local	float	___680_localPosition.x	%read{2492,2588} %write{2485,2485} %mystruct{___680_localPosition} %mystructfield{0}
local	float	___680_localPosition.y	%read{2492,2588} %write{2486,2486} %mystruct{___680_localPosition} %mystructfield{1}
local	float	___680_localPosition.z	%read{2492,2588} %write{2487,2487} %mystruct{___680_localPosition} %mystructfield{2}
local	float	___680_localPosition.w	%read{2492,2588} %write{2488,2488} %mystruct{___680_localPosition} %mystructfield{3}
local	float	___680_closestPoint.x	%read{2592,2710} %write{2492,2588} %mystruct{___680_closestPoint} %mystructfield{0}
local	float	___680_closestPoint.y	%read{2592,2711} %write{2492,2588} %mystruct{___680_closestPoint} %mystructfield{1}
local	float	___680_closestPoint.z	%read{2592,2712} %write{2492,2588} %mystruct{___680_closestPoint} %mystructfield{2}
local	float	___680_closestPoint.w	%read{2592,2713} %write{2492,2588} %mystruct{___680_closestPoint} %mystructfield{3}
local	float	___680_closestPointOffset.x	%read{2592,2707} %write{2492,2588} %mystruct{___680_closestPointOffset} %mystructfield{0}
local	float	___680_closestPointOffset.y	%read{2592,2707} %write{2492,2588} %mystruct{___680_closestPointOffset} %mystructfield{1}
local	float	___680_closestPointOffset.z	%read{2592,2707} %write{2492,2588} %mystruct{___680_closestPointOffset} %mystructfield{2}
local	float	___680_closestPointOffset.w	%read{2592,2707} %write{2492,2588} %mystruct{___680_closestPointOffset} %mystructfield{3}
local	float	___680_minDistance	%read{2492,2707} %write{2489,2707}
local	int	___681_u	%read{2492,2588} %write{2491,2588}
local	int	___683_k	%read{2492,2588} %write{2492,2588}
local	int	___685_j	%read{2492,2588} %write{2492,2588}
local	int	___687_i	%read{2492,2588} %write{2492,2588}
local	float	___688_cellOffset.x	%read{2492,2588} %write{2492,2588} %mystruct{___688_cellOffset} %mystructfield{0}
local	float	___688_cellOffset.y	%read{2492,2588} %write{2492,2588} %mystruct{___688_cellOffset} %mystructfield{1}
local	float	___688_cellOffset.z	%read{2492,2588} %write{2492,2588} %mystruct{___688_cellOffset} %mystructfield{2}
local	float	___688_cellOffset.w	%read{2492,2588} %write{2492,2588} %mystruct{___688_cellOffset} %mystructfield{3}
local	float	___688_pointPosition.x	%read{2492,2588} %write{2492,2588} %mystruct{___688_pointPosition} %mystructfield{0}
local	float	___688_pointPosition.y	%read{2492,2588} %write{2492,2588} %mystruct{___688_pointPosition} %mystructfield{1}
local	float	___688_pointPosition.z	%read{2492,2588} %write{2492,2588} %mystruct{___688_pointPosition} %mystructfield{2}
local	float	___688_pointPosition.w	%read{2492,2588} %write{2492,2588} %mystruct{___688_pointPosition} %mystructfield{3}
local	float	___688_distanceToPoint	%read{2492,2588} %write{2492,2588}
local	float	___680_closestPointToClosestPoint.x	%read{2710,2710} %write{2592,2707} %mystruct{___680_closestPointToClosestPoint} %mystructfield{0}
local	float	___680_closestPointToClosestPoint.y	%read{2711,2711} %write{2592,2707} %mystruct{___680_closestPointToClosestPoint} %mystructfield{1}
local	float	___680_closestPointToClosestPoint.z	%read{2712,2712} %write{2592,2707} %mystruct{___680_closestPointToClosestPoint} %mystructfield{2}
local	float	___680_closestPointToClosestPoint.w	%read{2713,2713} %write{2592,2707} %mystruct{___680_closestPointToClosestPoint} %mystructfield{3}
local	int	___690_u	%read{2592,2707} %write{2591,2707}
local	int	___692_k	%read{2592,2707} %write{2592,2707}
local	int	___694_j	%read{2592,2707} %write{2592,2707}
local	int	___696_i	%read{2592,2707} %write{2592,2707}
local	float	___697_cellOffset.x	%read{2592,2707} %write{2592,2707} %mystruct{___697_cellOffset} %mystructfield{0}
local	float	___697_cellOffset.y	%read{2592,2707} %write{2592,2707} %mystruct{___697_cellOffset} %mystructfield{1}
local	float	___697_cellOffset.z	%read{2592,2707} %write{2592,2707} %mystruct{___697_cellOffset} %mystructfield{2}
local	float	___697_cellOffset.w	%read{2592,2707} %write{2592,2707} %mystruct{___697_cellOffset} %mystructfield{3}
local	float	___697_pointPosition.x	%read{2592,2707} %write{2592,2707} %mystruct{___697_pointPosition} %mystructfield{0}
local	float	___697_pointPosition.y	%read{2592,2707} %write{2592,2707} %mystruct{___697_pointPosition} %mystructfield{1}
local	float	___697_pointPosition.z	%read{2592,2707} %write{2592,2707} %mystruct{___697_pointPosition} %mystructfield{2}
local	float	___697_pointPosition.w	%read{2592,2707} %write{2592,2707} %mystruct{___697_pointPosition} %mystructfield{3}
local	float	___697_distanceToPoint	%read{2592,2707} %write{2592,2707}
local	float	randomness	%read{24,2707} %write{4,4}
local	float	smoothness	%read{68,1994} %write{8,8}
local	point	coord	%read{11,1581} %write{9,13}
local	float	w	%read{19,1582} %write{12,12}
local	float	___707_coord2D.x	%read{266,766} %write{260,260} %mystruct{___707_coord2D} %mystructfield{0}
local	float	___707_coord2D.y	%read{267,767} %write{261,261} %mystruct{___707_coord2D} %mystructfield{1}
local	float	___707_outPosition2D.x	%read{892,899} %write{370,893} %mystruct{___707_outPosition2D} %mystructfield{0}
local	float	___707_outPosition2D.y	%read{896,899} %write{371,897} %mystruct{___707_outPosition2D} %mystructfield{1}
local	float	___721_coord4D.x	%read{1587,2485} %write{1579,1579} %mystruct{___721_coord4D} %mystructfield{0}
local	float	___721_coord4D.y	%read{1588,2486} %write{1580,1580} %mystruct{___721_coord4D} %mystructfield{1}
local	float	___721_coord4D.z	%read{1589,2487} %write{1581,1581} %mystruct{___721_coord4D} %mystructfield{2}
local	float	___721_coord4D.w	%read{1590,2488} %write{1582,1582} %mystruct{___721_coord4D} %mystructfield{3}
local	float	___721_outPosition4D.x	%read{2728,2743} %write{1776,2729} %mystruct{___721_outPosition4D} %mystructfield{0}
local	float	___721_outPosition4D.y	%read{2732,2743} %write{1777,2733} %mystruct{___721_outPosition4D} %mystructfield{1}
local	float	___721_outPosition4D.z	%read{2736,2743} %write{1778,2737} %mystruct{___721_outPosition4D} %mystructfield{2}
local	float	___721_outPosition4D.w	%read{2740,2744} %write{1779,2741} %mystruct{___721_outPosition4D} %mystructfield{3}
const	float	$const1	0		%read{4,2741} %write{2147483647,-1}
const	float	$const2	1		%read{3,2448} %write{2147483647,-1}
const	string	$const3	"clamp"		%read{2,6} %write{2147483647,-1}
temp	float	$tmp1	%read{4,4} %write{3,3}
const	float	$const4	2		%read{5,2723} %write{2147483647,-1}
temp	float	$tmp2	%read{7,7} %write{5,5}
const	float	$const5	0.5		%read{7,1936} %write{2147483647,-1}
temp	float	$tmp3	%read{8,8} %write{7,7}
const	string	$const6	"1D"		%read{14,14} %write{2147483647,-1}
temp	int	$tmp4	%read{15,15} %write{14,14}
const	string	$const7	"f1"		%read{16,1583} %write{2147483647,-1}
temp	int	$tmp5	%read{17,17} %write{16,16}
const	string	$const8	"voronoi_f1_1d"		%read{18,18} %write{2147483647,-1}
const	float	$const9	8		%read{21,2589} %write{2147483647,-1}
const	int	$const10	-1		%read{23,2603} %write{2147483647,-1}
const	int	$const11	1		%read{24,2707} %write{2147483647,-1}
temp	int	$tmp6	%read{24,42} %write{24,42}
temp	int	$tmp7	%read{22,42} %write{23,42}
const	int	$const12	0		%read{25,2620} %write{2147483647,-1}
temp	float	$tmp8	%read{24,42} %write{24,42}
temp	float	$tmp9	%read{24,42} %write{24,42}
temp	float	$tmp10	%read{24,42} %write{24,42}
const	string	$const13	"hash_float_to_float"		%read{29,236} %write{2147483647,-1}
temp	float	$tmp11	%read{24,42} %write{24,42}
const	string	$const14	"voronoi_distance"		%read{33,2090} %write{2147483647,-1}
temp	float	$tmp12	%read{24,42} %write{24,42}
temp	int	$tmp13	%read{24,42} %write{24,42}
temp	int	$tmp14	%read{2147483647,-1} %write{24,42}
temp	float	$tmp15	%read{47,52} %write{44,44}
const	string	$const15	"hash_float_to_color"		%read{45,155} %write{2147483647,-1}
temp	float	$tmp16	%read{56,56} %write{47,47}
temp	float	$tmp17	%read{56,56} %write{51,51}
temp	float	$tmp18.x	%read{51,51} %write{48,48}
temp	float	$tmp18.y	%read{51,51} %write{49,49}
const	string	$const16	"hash_vector2_to_float"		%read{50,844} %write{2147483647,-1}
temp	float	$tmp19	%read{56,56} %write{55,55}
temp	float	$tmp20.x	%read{55,55} %write{52,52}
temp	float	$tmp20.y	%read{55,55} %write{53,53}
const	string	$const17	"smooth_f1"		%read{58,1780} %write{2147483647,-1}
temp	int	$tmp21	%read{59,59} %write{58,58}
const	string	$const18	"voronoi_smooth_f1_1d"		%read{60,60} %write{2147483647,-1}
const	color	$const19	0 0 0		%read{65,1794} %write{2147483647,-1}
const	int	$const20	-2		%read{67,1812} %write{2147483647,-1}
const	int	$const21	2		%read{68,1813} %write{2147483647,-1}
temp	int	$tmp22	%read{68,111} %write{68,111}
temp	int	$tmp23	%read{66,111} %write{67,111}
temp	float	$tmp24	%read{68,111} %write{68,111}
temp	float	$tmp25	%read{68,111} %write{68,111}
temp	float	$tmp26	%read{68,111} %write{68,111}
temp	float	$tmp27	%read{68,111} %write{68,111}
temp	float	$tmp28	%read{68,111} %write{68,111}
temp	float	$tmp29	%read{68,111} %write{68,111}
temp	float	$tmp30	%read{68,111} %write{68,111}
temp	float	$tmp31	%read{68,111} %write{68,111}
temp	float	$tmp32	%read{68,111} %write{68,111}
temp	float	$tmp33	%read{68,111} %write{68,111}
temp	float	$tmp34	%read{68,111} %write{68,111}
temp	float	$tmp35	%read{68,111} %write{68,111}
const	float	$const22	3		%read{90,1943} %write{2147483647,-1}
temp	float	$tmp36	%read{68,111} %write{68,111}
temp	float	$tmp37	%read{68,111} %write{68,111}
temp	float	$tmp38	%read{68,111} %write{68,111}
temp	float	$tmp39	%read{68,111} %write{68,111}
temp	float	$tmp40	%read{68,111} %write{68,111}
temp	float	$tmp41.x	%read{68,111} %write{68,111}
temp	float	$tmp41.y	%read{68,111} %write{68,111}
temp	float	$tmp42	%read{68,111} %write{68,111}
temp	float	$tmp43.x	%read{68,111} %write{68,111}
temp	float	$tmp43.y	%read{68,111} %write{68,111}
temp	color	$tmp44	%read{68,111} %write{68,111}
temp	float	$tmp45	%read{68,111} %write{68,111}
temp	int	$tmp46	%read{2147483647,-1} %write{68,111}
const	string	$const23	"f2"		%read{115,2002} %write{2147483647,-1}
temp	int	$tmp47	%read{116,116} %write{115,115}
const	string	$const24	"voronoi_f2_1d"		%read{117,117} %write{2147483647,-1}
temp	int	$tmp48	%read{126,152} %write{126,152}
temp	int	$tmp49	%read{124,152} %write{125,152}
temp	float	$tmp50	%read{126,152} %write{126,152}
temp	float	$tmp51	%read{126,152} %write{126,152}
temp	float	$tmp52	%read{126,152} %write{126,152}
temp	float	$tmp53	%read{126,152} %write{126,152}
temp	float	$tmp54	%read{126,152} %write{126,152}
temp	int	$tmp55	%read{126,152} %write{126,152}
temp	int	$tmp56	%read{126,152} %write{126,152}
temp	int	$tmp57	%read{2147483647,-1} %write{126,152}
temp	float	$tmp58	%read{157,162} %write{154,154}
temp	float	$tmp59	%read{166,166} %write{157,157}
temp	float	$tmp60	%read{166,166} %write{161,161}
temp	float	$tmp61.x	%read{161,161} %write{158,158}
temp	float	$tmp61.y	%read{161,161} %write{159,159}
temp	float	$tmp62	%read{166,166} %write{165,165}
temp	float	$tmp63.x	%read{165,165} %write{162,162}
temp	float	$tmp63.y	%read{165,165} %write{163,163}
const	string	$const25	"distance_to_edge"		%read{168,2228} %write{2147483647,-1}
temp	int	$tmp64	%read{169,169} %write{168,168}
const	string	$const26	"voronoi_distance_to_edge_1d"		%read{170,170} %write{2147483647,-1}
temp	float	$tmp65	%read{175,175} %write{174,174}
const	float	$const27	-1		%read{180,180} %write{2147483647,-1}
temp	float	$tmp66	%read{179,179} %write{178,178}
temp	float	$tmp67	%read{178,178} %write{176,176}
temp	float	$tmp68	%read{180,180} %write{179,179}
temp	float	$tmp69	%read{184,184} %write{183,183}
temp	float	$tmp70	%read{183,183} %write{181,181}
temp	float	$tmp71	%read{185,185} %write{184,184}
temp	float	$tmp72	%read{187,187} %write{186,186}
temp	float	$tmp73	%read{189,189} %write{187,187}
const	string	$const28	"distance"		%read{188,2708} %write{2147483647,-1}
temp	float	$tmp74	%read{190,190} %write{189,189}
temp	float	$tmp75	%read{192,192} %write{191,191}
temp	float	$tmp76	%read{194,194} %write{192,192}
temp	float	$tmp77	%read{195,195} %write{194,194}
const	string	$const29	"n_sphere_radius"		%read{197,2476} %write{2147483647,-1}
temp	int	$tmp78	%read{198,198} %write{197,197}
const	string	$const30	"voronoi_n_sphere_radius_1d"		%read{199,199} %write{2147483647,-1}
temp	int	$tmp79	%read{205,223} %write{205,223}
temp	int	$tmp80	%read{203,223} %write{204,223}
temp	float	$tmp81	%read{205,223} %write{205,223}
temp	float	$tmp82	%read{205,223} %write{205,223}
temp	float	$tmp83	%read{205,223} %write{205,223}
temp	float	$tmp84	%read{205,223} %write{205,223}
temp	float	$tmp85	%read{205,223} %write{205,223}
temp	int	$tmp86	%read{205,223} %write{205,223}
temp	int	$tmp87	%read{2147483647,-1} %write{205,223}
temp	int	$tmp88	%read{227,248} %write{227,248}
temp	int	$tmp89	%read{225,248} %write{226,248}
temp	int	$tmp90	%read{227,248} %write{227,248}
temp	float	$tmp91	%read{227,248} %write{227,248}
temp	float	$tmp92	%read{227,248} %write{227,248}
temp	float	$tmp93	%read{227,248} %write{227,248}
temp	float	$tmp94	%read{227,248} %write{227,248}
temp	float	$tmp95	%read{227,248} %write{227,248}
temp	float	$tmp96	%read{227,248} %write{227,248}
temp	int	$tmp97	%read{227,248} %write{227,248}
temp	int	$tmp98	%read{2147483647,-1} %write{227,248}
temp	float	$tmp99	%read{252,252} %write{251,251}
temp	float	$tmp100	%read{251,251} %write{250,250}
const	string	$const31	"Unknown feature!"		%read{253,2724} %write{2147483647,-1}
temp	int	$tmp101	%read{255,255} %write{254,254}
const	string	$const32	"2D"		%read{258,258} %write{2147483647,-1}
temp	int	$tmp102	%read{259,259} %write{258,258}
temp	int	$tmp103	%read{263,263} %write{262,262}
const	string	$const33	"voronoi_f1_2d"		%read{264,264} %write{2147483647,-1}
const	string	$const34	"floor"		%read{265,2479} %write{2147483647,-1}
const	string	$const35	"__operator__sub__"		%read{268,2709} %write{2147483647,-1}
temp	int	$tmp104	%read{274,354} %write{274,354}
temp	int	$tmp105	%read{272,354} %write{273,354}
temp	int	$tmp106	%read{274,354} %write{274,354}
temp	int	$tmp107	%read{274,354} %write{274,354}
temp	float	$tmp108.x	%read{274,354} %write{274,354}
temp	float	$tmp108.y	%read{274,354} %write{274,354}
temp	float	$tmp109.x	%read{274,354} %write{274,354}
temp	float	$tmp109.y	%read{274,354} %write{274,354}
temp	float	$tmp110.x	%read{274,354} %write{274,354}
temp	float	$tmp110.y	%read{274,354} %write{274,354}
const	string	$const36	"__operator__add__"		%read{282,2673} %write{2147483647,-1}
const	string	$const37	"hash_vector2_to_vector2"		%read{285,843} %write{2147483647,-1}
temp	point	$tmp111	%read{274,354} %write{274,354}
const	string	$const38	"hash_vector3_to_float"		%read{289,1540} %write{2147483647,-1}
const	string	$const39	"__operator__mul__"		%read{291,2668} %write{2147483647,-1}
temp	float	$tmp112.x	%read{274,354} %write{274,354}
temp	float	$tmp112.y	%read{274,354} %write{274,354}
const	string	$const40	"euclidean"		%read{301,2091} %write{2147483647,-1}
temp	int	$tmp113	%read{274,354} %write{274,354}
temp	float	$tmp114.x	%read{274,354} %write{274,354}
temp	float	$tmp114.y	%read{274,354} %write{274,354}
const	string	$const41	"length"		%read{307,2714} %write{2147483647,-1}
const	string	$const42	"hypot"		%read{308,882} %write{2147483647,-1}
temp	float	$tmp115	%read{274,354} %write{274,354}
temp	float	$tmp116	%read{274,354} %write{274,354}
temp	float	$tmp117	%read{274,354} %write{274,354}
const	string	$const43	"manhattan"		%read{314,2109} %write{2147483647,-1}
temp	int	$tmp118	%read{274,354} %write{274,354}
temp	float	$tmp119	%read{274,354} %write{274,354}
temp	float	$tmp120	%read{274,354} %write{274,354}
temp	float	$tmp121	%read{274,354} %write{274,354}
temp	float	$tmp122	%read{274,354} %write{274,354}
const	string	$const44	"chebychev"		%read{322,2123} %write{2147483647,-1}
temp	int	$tmp123	%read{274,354} %write{274,354}
temp	float	$tmp124	%read{274,354} %write{274,354}
temp	float	$tmp125	%read{274,354} %write{274,354}
temp	float	$tmp126	%read{274,354} %write{274,354}
temp	float	$tmp127	%read{274,354} %write{274,354}
const	string	$const45	"minkowski"		%read{330,2137} %write{2147483647,-1}
temp	int	$tmp128	%read{274,354} %write{274,354}
temp	float	$tmp129	%read{274,354} %write{274,354}
temp	float	$tmp130	%read{274,354} %write{274,354}
temp	float	$tmp131	%read{274,354} %write{274,354}
temp	float	$tmp132	%read{274,354} %write{274,354}
temp	float	$tmp133	%read{274,354} %write{274,354}
temp	float	$tmp134	%read{274,354} %write{274,354}
temp	float	$tmp135	%read{274,354} %write{274,354}
temp	float	$tmp136	%read{274,354} %write{274,354}
temp	int	$tmp137	%read{274,354} %write{274,354}
temp	int	$tmp138	%read{2147483647,-1} %write{274,354}
temp	int	$tmp139	%read{2147483647,-1} %write{274,354}
temp	float	$tmp140.x	%read{361,365} %write{357,357}
temp	float	$tmp140.y	%read{361,365} %write{358,358}
const	string	$const46	"hash_vector2_to_color"		%read{359,617} %write{2147483647,-1}
temp	float	$tmp141	%read{368,368} %write{361,361}
temp	float	$tmp142	%read{368,368} %write{364,364}
temp	point	$tmp143	%read{364,364} %write{362,362}
temp	float	$tmp144	%read{368,368} %write{367,367}
temp	point	$tmp145	%read{367,367} %write{365,365}
temp	int	$tmp146	%read{373,373} %write{372,372}
const	string	$const47	"voronoi_smooth_f1_2d"		%read{374,374} %write{2147483647,-1}
temp	int	$tmp147	%read{387,497} %write{387,497}
temp	int	$tmp148	%read{385,497} %write{386,497}
temp	int	$tmp149	%read{387,497} %write{387,497}
temp	int	$tmp150	%read{387,497} %write{387,497}
temp	float	$tmp151.x	%read{387,497} %write{387,497}
temp	float	$tmp151.y	%read{387,497} %write{387,497}
temp	float	$tmp152.x	%read{387,497} %write{387,497}
temp	float	$tmp152.y	%read{387,497} %write{387,497}
temp	float	$tmp153.x	%read{387,497} %write{387,497}
temp	float	$tmp153.y	%read{387,497} %write{387,497}
temp	point	$tmp154	%read{387,497} %write{387,497}
temp	float	$tmp155.x	%read{387,497} %write{387,497}
temp	float	$tmp155.y	%read{387,497} %write{387,497}
temp	int	$tmp156	%read{387,497} %write{387,497}
temp	float	$tmp157.x	%read{387,497} %write{387,497}
temp	float	$tmp157.y	%read{387,497} %write{387,497}
temp	float	$tmp158	%read{387,497} %write{387,497}
temp	float	$tmp159	%read{387,497} %write{387,497}
temp	float	$tmp160	%read{387,497} %write{387,497}
temp	int	$tmp161	%read{387,497} %write{387,497}
temp	float	$tmp162	%read{387,497} %write{387,497}
temp	float	$tmp163	%read{387,497} %write{387,497}
temp	float	$tmp164	%read{387,497} %write{387,497}
temp	float	$tmp165	%read{387,497} %write{387,497}
temp	int	$tmp166	%read{387,497} %write{387,497}
temp	float	$tmp167	%read{387,497} %write{387,497}
temp	float	$tmp168	%read{387,497} %write{387,497}
temp	float	$tmp169	%read{387,497} %write{387,497}
temp	float	$tmp170	%read{387,497} %write{387,497}
temp	int	$tmp171	%read{387,497} %write{387,497}
temp	float	$tmp172	%read{387,497} %write{387,497}
temp	float	$tmp173	%read{387,497} %write{387,497}
temp	float	$tmp174	%read{387,497} %write{387,497}
temp	float	$tmp175	%read{387,497} %write{387,497}
temp	float	$tmp176	%read{387,497} %write{387,497}
temp	float	$tmp177	%read{387,497} %write{387,497}
temp	float	$tmp178	%read{387,497} %write{387,497}
temp	float	$tmp179	%read{387,497} %write{387,497}
temp	float	$tmp180	%read{387,497} %write{387,497}
temp	float	$tmp181	%read{387,497} %write{387,497}
temp	float	$tmp182	%read{387,497} %write{387,497}
temp	float	$tmp183	%read{387,497} %write{387,497}
temp	float	$tmp184	%read{387,497} %write{387,497}
temp	float	$tmp185	%read{387,497} %write{387,497}
temp	float	$tmp186	%read{387,497} %write{387,497}
temp	float	$tmp187	%read{387,497} %write{387,497}
temp	float	$tmp188	%read{387,497} %write{387,497}
temp	float	$tmp189.x	%read{387,497} %write{387,497}
temp	float	$tmp189.y	%read{387,497} %write{387,497}
temp	float	$tmp190	%read{387,497} %write{387,497}
temp	float	$tmp191	%read{387,497} %write{387,497}
temp	point	$tmp192	%read{387,497} %write{387,497}
temp	float	$tmp193	%read{387,497} %write{387,497}
temp	point	$tmp194	%read{387,497} %write{387,497}
temp	color	$tmp195	%read{387,497} %write{387,497}
temp	float	$tmp196.x	%read{387,497} %write{387,497}
temp	float	$tmp196.y	%read{387,497} %write{387,497}
const	string	$const48	"mix"		%read{485,1972} %write{2147483647,-1}
temp	float	$tmp197.x	%read{387,497} %write{387,497}
temp	float	$tmp197.y	%read{387,497} %write{387,497}
temp	int	$tmp198	%read{2147483647,-1} %write{387,497}
temp	int	$tmp199	%read{2147483647,-1} %write{387,497}
temp	int	$tmp200	%read{504,504} %write{503,503}
const	string	$const49	"voronoi_f2_2d"		%read{505,505} %write{2147483647,-1}
temp	int	$tmp201	%read{520,612} %write{520,612}
temp	int	$tmp202	%read{518,612} %write{519,612}
temp	int	$tmp203	%read{520,612} %write{520,612}
temp	int	$tmp204	%read{520,612} %write{520,612}
temp	float	$tmp205.x	%read{520,612} %write{520,612}
temp	float	$tmp205.y	%read{520,612} %write{520,612}
temp	float	$tmp206.x	%read{520,612} %write{520,612}
temp	float	$tmp206.y	%read{520,612} %write{520,612}
temp	float	$tmp207.x	%read{520,612} %write{520,612}
temp	float	$tmp207.y	%read{520,612} %write{520,612}
temp	point	$tmp208	%read{520,612} %write{520,612}
temp	float	$tmp209.x	%read{520,612} %write{520,612}
temp	float	$tmp209.y	%read{520,612} %write{520,612}
temp	int	$tmp210	%read{520,612} %write{520,612}
temp	float	$tmp211.x	%read{520,612} %write{520,612}
temp	float	$tmp211.y	%read{520,612} %write{520,612}
temp	float	$tmp212	%read{520,612} %write{520,612}
temp	float	$tmp213	%read{520,612} %write{520,612}
temp	float	$tmp214	%read{520,612} %write{520,612}
temp	int	$tmp215	%read{520,612} %write{520,612}
temp	float	$tmp216	%read{520,612} %write{520,612}
temp	float	$tmp217	%read{520,612} %write{520,612}
temp	float	$tmp218	%read{520,612} %write{520,612}
temp	float	$tmp219	%read{520,612} %write{520,612}
temp	int	$tmp220	%read{520,612} %write{520,612}
temp	float	$tmp221	%read{520,612} %write{520,612}
temp	float	$tmp222	%read{520,612} %write{520,612}
temp	float	$tmp223	%read{520,612} %write{520,612}
temp	float	$tmp224	%read{520,612} %write{520,612}
temp	int	$tmp225	%read{520,612} %write{520,612}
temp	float	$tmp226	%read{520,612} %write{520,612}
temp	float	$tmp227	%read{520,612} %write{520,612}
temp	float	$tmp228	%read{520,612} %write{520,612}
temp	float	$tmp229	%read{520,612} %write{520,612}
temp	float	$tmp230	%read{520,612} %write{520,612}
temp	float	$tmp231	%read{520,612} %write{520,612}
temp	float	$tmp232	%read{520,612} %write{520,612}
temp	float	$tmp233	%read{520,612} %write{520,612}
temp	int	$tmp234	%read{520,612} %write{520,612}
temp	int	$tmp235	%read{520,612} %write{520,612}
temp	int	$tmp236	%read{2147483647,-1} %write{520,612}
temp	int	$tmp237	%read{2147483647,-1} %write{520,612}
temp	float	$tmp238.x	%read{619,623} %write{615,615}
temp	float	$tmp238.y	%read{619,623} %write{616,616}
temp	float	$tmp239	%read{626,626} %write{619,619}
temp	float	$tmp240	%read{626,626} %write{622,622}
temp	point	$tmp241	%read{622,622} %write{620,620}
temp	float	$tmp242	%read{626,626} %write{625,625}
temp	point	$tmp243	%read{625,625} %write{623,623}
temp	int	$tmp244	%read{631,631} %write{630,630}
const	string	$const50	"voronoi_distance_to_edge_2d"		%read{632,632} %write{2147483647,-1}
temp	int	$tmp245	%read{642,683} %write{642,683}
temp	int	$tmp246	%read{640,683} %write{641,683}
temp	int	$tmp247	%read{642,683} %write{642,683}
temp	int	$tmp248	%read{642,683} %write{642,683}
temp	float	$tmp249.x	%read{642,683} %write{642,683}
temp	float	$tmp249.y	%read{642,683} %write{642,683}
temp	float	$tmp250.x	%read{642,683} %write{642,683}
temp	float	$tmp250.y	%read{642,683} %write{642,683}
temp	float	$tmp251.x	%read{642,683} %write{642,683}
temp	float	$tmp251.y	%read{642,683} %write{642,683}
temp	float	$tmp252.x	%read{642,683} %write{642,683}
temp	float	$tmp252.y	%read{642,683} %write{642,683}
temp	point	$tmp253	%read{642,683} %write{642,683}
temp	float	$tmp254.x	%read{642,683} %write{642,683}
temp	float	$tmp254.y	%read{642,683} %write{642,683}
const	string	$const51	"dot"		%read{671,2458} %write{2147483647,-1}
temp	float	$tmp255	%read{642,683} %write{642,683}
temp	float	$tmp256	%read{642,683} %write{642,683}
temp	int	$tmp257	%read{642,683} %write{642,683}
temp	int	$tmp258	%read{2147483647,-1} %write{642,683}
temp	int	$tmp259	%read{2147483647,-1} %write{642,683}
temp	int	$tmp260	%read{687,757} %write{687,757}
temp	int	$tmp261	%read{685,757} %write{686,757}
temp	int	$tmp262	%read{687,757} %write{687,757}
temp	int	$tmp263	%read{687,757} %write{687,757}
temp	float	$tmp264.x	%read{687,757} %write{687,757}
temp	float	$tmp264.y	%read{687,757} %write{687,757}
temp	float	$tmp265.x	%read{687,757} %write{687,757}
temp	float	$tmp265.y	%read{687,757} %write{687,757}
temp	float	$tmp266.x	%read{687,757} %write{687,757}
temp	float	$tmp266.y	%read{687,757} %write{687,757}
temp	float	$tmp267.x	%read{687,757} %write{687,757}
temp	float	$tmp267.y	%read{687,757} %write{687,757}
temp	point	$tmp268	%read{687,757} %write{687,757}
temp	float	$tmp269.x	%read{687,757} %write{687,757}
temp	float	$tmp269.y	%read{687,757} %write{687,757}
temp	float	$tmp270	%read{687,757} %write{687,757}
temp	float	$tmp271	%read{687,757} %write{687,757}
temp	float	$tmp272	%read{687,757} %write{687,757}
const	float	$const52	9.99999975e-05		%read{723,2419} %write{2147483647,-1}
temp	int	$tmp273	%read{687,757} %write{687,757}
temp	float	$tmp274.x	%read{687,757} %write{687,757}
temp	float	$tmp274.y	%read{687,757} %write{687,757}
temp	float	$tmp275.x	%read{687,757} %write{687,757}
temp	float	$tmp275.y	%read{687,757} %write{687,757}
const	string	$const53	"__operator__div__"		%read{728,2447} %write{2147483647,-1}
temp	float	$tmp276.x	%read{687,757} %write{687,757}
temp	float	$tmp276.y	%read{687,757} %write{687,757}
temp	float	$tmp277.x	%read{687,757} %write{687,757}
temp	float	$tmp277.y	%read{687,757} %write{687,757}
const	string	$const54	"normalize"		%read{735,2437} %write{2147483647,-1}
temp	float	$tmp278	%read{687,757} %write{687,757}
temp	float	$tmp279	%read{687,757} %write{687,757}
temp	float	$tmp280	%read{687,757} %write{687,757}
temp	float	$tmp281	%read{687,757} %write{687,757}
temp	float	$tmp282.x	%read{687,757} %write{687,757}
temp	float	$tmp282.y	%read{687,757} %write{687,757}
temp	float	$tmp283	%read{687,757} %write{687,757}
temp	float	$tmp284	%read{687,757} %write{687,757}
temp	int	$tmp285	%read{2147483647,-1} %write{687,757}
temp	int	$tmp286	%read{2147483647,-1} %write{687,757}
temp	int	$tmp287	%read{760,760} %write{759,759}
const	string	$const55	"voronoi_n_sphere_radius_2d"		%read{761,761} %write{2147483647,-1}
temp	int	$tmp288	%read{771,817} %write{771,817}
temp	int	$tmp289	%read{769,817} %write{770,817}
temp	int	$tmp290	%read{771,817} %write{771,817}
temp	int	$tmp291	%read{771,817} %write{771,817}
temp	float	$tmp292.x	%read{771,817} %write{771,817}
temp	float	$tmp292.y	%read{771,817} %write{771,817}
temp	float	$tmp293.x	%read{771,817} %write{771,817}
temp	float	$tmp293.y	%read{771,817} %write{771,817}
temp	float	$tmp294.x	%read{771,817} %write{771,817}
temp	float	$tmp294.y	%read{771,817} %write{771,817}
temp	point	$tmp295	%read{771,817} %write{771,817}
temp	float	$tmp296.x	%read{771,817} %write{771,817}
temp	float	$tmp296.y	%read{771,817} %write{771,817}
temp	float	$tmp297.x	%read{771,817} %write{771,817}
temp	float	$tmp297.y	%read{771,817} %write{771,817}
temp	float	$tmp298	%read{771,817} %write{771,817}
temp	float	$tmp299	%read{771,817} %write{771,817}
temp	float	$tmp300	%read{771,817} %write{771,817}
temp	int	$tmp301	%read{771,817} %write{771,817}
temp	int	$tmp302	%read{2147483647,-1} %write{771,817}
temp	int	$tmp303	%read{2147483647,-1} %write{771,817}
temp	int	$tmp304	%read{821,876} %write{821,876}
temp	int	$tmp305	%read{819,876} %write{820,876}
temp	int	$tmp306	%read{821,876} %write{821,876}
temp	int	$tmp307	%read{821,876} %write{821,876}
temp	int	$tmp308	%read{821,876} %write{821,876}
temp	int	$tmp309	%read{821,876} %write{821,876}
temp	int	$tmp310	%read{821,876} %write{821,876}
temp	int	$tmp311	%read{821,876} %write{821,876}
temp	float	$tmp312.x	%read{821,876} %write{821,876}
temp	float	$tmp312.y	%read{821,876} %write{821,876}
temp	float	$tmp313.x	%read{821,876} %write{821,876}
temp	float	$tmp313.y	%read{821,876} %write{821,876}
temp	float	$tmp314.x	%read{821,876} %write{821,876}
temp	float	$tmp314.y	%read{821,876} %write{821,876}
temp	float	$tmp315.x	%read{821,876} %write{821,876}
temp	float	$tmp315.y	%read{821,876} %write{821,876}
temp	point	$tmp316	%read{821,876} %write{821,876}
temp	float	$tmp317.x	%read{821,876} %write{821,876}
temp	float	$tmp317.y	%read{821,876} %write{821,876}
temp	float	$tmp318.x	%read{821,876} %write{821,876}
temp	float	$tmp318.y	%read{821,876} %write{821,876}
temp	float	$tmp319	%read{821,876} %write{821,876}
temp	float	$tmp320	%read{821,876} %write{821,876}
temp	float	$tmp321	%read{821,876} %write{821,876}
temp	int	$tmp322	%read{821,876} %write{821,876}
temp	int	$tmp323	%read{2147483647,-1} %write{821,876}
temp	int	$tmp324	%read{2147483647,-1} %write{821,876}
temp	float	$tmp325	%read{887,887} %write{886,886}
temp	float	$tmp326.x	%read{883,883} %write{879,879}
temp	float	$tmp326.y	%read{884,884} %write{880,880}
temp	float	$tmp327	%read{885,885} %write{883,883}
temp	float	$tmp328	%read{885,885} %write{884,884}
temp	float	$tmp329	%read{886,886} %write{885,885}
const	string	$const56	"safe_divide"		%read{889,2725} %write{2147483647,-1}
temp	int	$tmp330	%read{891,891} %write{890,890}
temp	int	$tmp331	%read{895,895} %write{894,894}
const	string	$const57	"3D"		%read{900,900} %write{2147483647,-1}
temp	int	$tmp332	%read{901,901} %write{900,900}
temp	int	$tmp333	%read{903,903} %write{902,902}
const	string	$const58	"voronoi_f1_3d"		%read{904,904} %write{2147483647,-1}
temp	int	$tmp334	%read{910,1018} %write{910,1018}
temp	int	$tmp335	%read{908,1018} %write{909,1018}
temp	int	$tmp336	%read{910,1018} %write{910,1018}
temp	int	$tmp337	%read{910,1018} %write{910,1018}
temp	int	$tmp338	%read{910,1018} %write{910,1018}
temp	int	$tmp339	%read{910,1018} %write{910,1018}
temp	float	$tmp340	%read{910,1018} %write{910,1018}
temp	float	$tmp341	%read{910,1018} %write{910,1018}
temp	float	$tmp342	%read{910,1018} %write{910,1018}
temp	point	$tmp343	%read{910,1018} %write{910,1018}
temp	point	$tmp344	%read{910,1018} %write{910,1018}
const	string	$const59	"hash_vector3_to_vector3"		%read{925,1539} %write{2147483647,-1}
temp	float	$tmp345	%read{910,1018} %write{910,1018}
temp	float	$tmp346	%read{910,1018} %write{910,1018}
temp	float	$tmp347.x	%read{910,1018} %write{910,1018}
temp	float	$tmp347.y	%read{910,1018} %write{910,1018}
temp	float	$tmp347.z	%read{910,1018} %write{910,1018}
temp	float	$tmp347.w	%read{910,1018} %write{910,1018}
const	string	$const60	"hash_vector4_to_float"		%read{932,2660} %write{2147483647,-1}
temp	point	$tmp348	%read{910,1018} %write{910,1018}
temp	float	$tmp349	%read{910,1018} %write{910,1018}
temp	float	$tmp350.x	%read{910,1018} %write{910,1018}
temp	float	$tmp350.y	%read{910,1018} %write{910,1018}
temp	float	$tmp350.z	%read{910,1018} %write{910,1018}
temp	float	$tmp350.w	%read{910,1018} %write{910,1018}
temp	point	$tmp351	%read{910,1018} %write{910,1018}
temp	point	$tmp352	%read{910,1018} %write{910,1018}
temp	int	$tmp353	%read{910,1018} %write{910,1018}
temp	int	$tmp354	%read{910,1018} %write{910,1018}
temp	float	$tmp355	%read{910,1018} %write{910,1018}
temp	float	$tmp356	%read{910,1018} %write{910,1018}
temp	float	$tmp357	%read{910,1018} %write{910,1018}
temp	float	$tmp358	%read{910,1018} %write{910,1018}
temp	float	$tmp359	%read{910,1018} %write{910,1018}
temp	float	$tmp360	%read{910,1018} %write{910,1018}
temp	float	$tmp361	%read{910,1018} %write{910,1018}
temp	float	$tmp362	%read{910,1018} %write{910,1018}
temp	float	$tmp363	%read{910,1018} %write{910,1018}
temp	float	$tmp364	%read{910,1018} %write{910,1018}
temp	float	$tmp365	%read{910,1018} %write{910,1018}
temp	float	$tmp366	%read{910,1018} %write{910,1018}
temp	float	$tmp367	%read{910,1018} %write{910,1018}
temp	int	$tmp368	%read{910,1018} %write{910,1018}
temp	float	$tmp369	%read{910,1018} %write{910,1018}
temp	float	$tmp370	%read{910,1018} %write{910,1018}
temp	float	$tmp371	%read{910,1018} %write{910,1018}
temp	float	$tmp372	%read{910,1018} %write{910,1018}
temp	float	$tmp373	%read{910,1018} %write{910,1018}
temp	float	$tmp374	%read{910,1018} %write{910,1018}
temp	float	$tmp375	%read{910,1018} %write{910,1018}
temp	float	$tmp376	%read{910,1018} %write{910,1018}
temp	float	$tmp377	%read{910,1018} %write{910,1018}
temp	float	$tmp378	%read{910,1018} %write{910,1018}
temp	float	$tmp379	%read{910,1018} %write{910,1018}
temp	float	$tmp380	%read{910,1018} %write{910,1018}
temp	float	$tmp381	%read{910,1018} %write{910,1018}
temp	int	$tmp382	%read{910,1018} %write{910,1018}
temp	float	$tmp383	%read{910,1018} %write{910,1018}
temp	float	$tmp384	%read{910,1018} %write{910,1018}
temp	float	$tmp385	%read{910,1018} %write{910,1018}
temp	float	$tmp386	%read{910,1018} %write{910,1018}
temp	float	$tmp387	%read{910,1018} %write{910,1018}
temp	float	$tmp388	%read{910,1018} %write{910,1018}
temp	float	$tmp389	%read{910,1018} %write{910,1018}
temp	float	$tmp390	%read{910,1018} %write{910,1018}
temp	float	$tmp391	%read{910,1018} %write{910,1018}
temp	float	$tmp392	%read{910,1018} %write{910,1018}
temp	float	$tmp393	%read{910,1018} %write{910,1018}
temp	float	$tmp394	%read{910,1018} %write{910,1018}
temp	float	$tmp395	%read{910,1018} %write{910,1018}
temp	float	$tmp396	%read{910,1018} %write{910,1018}
temp	float	$tmp397	%read{910,1018} %write{910,1018}
temp	float	$tmp398	%read{910,1018} %write{910,1018}
temp	float	$tmp399	%read{910,1018} %write{910,1018}
temp	float	$tmp400	%read{910,1018} %write{910,1018}
temp	int	$tmp401	%read{910,1018} %write{910,1018}
temp	int	$tmp402	%read{2147483647,-1} %write{910,1018}
temp	int	$tmp403	%read{2147483647,-1} %write{910,1018}
temp	int	$tmp404	%read{2147483647,-1} %write{910,1018}
temp	point	$tmp405	%read{1023,1033} %write{1020,1020}
const	string	$const61	"hash_vector3_to_color"		%read{1021,1323} %write{2147483647,-1}
temp	float	$tmp406	%read{1038,1038} %write{1023,1023}
temp	float	$tmp407	%read{1038,1038} %write{1030,1030}
temp	float	$tmp408.x	%read{1029,1029} %write{1024,1024}
temp	float	$tmp408.y	%read{1029,1029} %write{1025,1025}
temp	float	$tmp408.z	%read{1029,1029} %write{1026,1026}
temp	float	$tmp408.w	%read{1030,1030} %write{1027,1027}
temp	point	$tmp409	%read{1030,1030} %write{1029,1029}
temp	float	$tmp410	%read{1038,1038} %write{1037,1037}
temp	float	$tmp411.x	%read{1036,1036} %write{1031,1031}
temp	float	$tmp411.y	%read{1036,1036} %write{1032,1032}
temp	float	$tmp411.z	%read{1036,1036} %write{1033,1033}
temp	float	$tmp411.w	%read{1037,1037} %write{1034,1034}
temp	point	$tmp412	%read{1037,1037} %write{1036,1036}
temp	int	$tmp413	%read{1041,1041} %write{1040,1040}
const	string	$const62	"voronoi_smooth_f1_3d"		%read{1042,1042} %write{2147483647,-1}
const	point	$const63	0 0 0		%read{1047,1576} %write{2147483647,-1}
temp	int	$tmp414	%read{1050,1189} %write{1050,1189}
temp	int	$tmp415	%read{1048,1189} %write{1049,1189}
temp	int	$tmp416	%read{1050,1189} %write{1050,1189}
temp	int	$tmp417	%read{1050,1189} %write{1050,1189}
temp	int	$tmp418	%read{1050,1189} %write{1050,1189}
temp	int	$tmp419	%read{1050,1189} %write{1050,1189}
temp	float	$tmp420	%read{1050,1189} %write{1050,1189}
temp	float	$tmp421	%read{1050,1189} %write{1050,1189}
temp	float	$tmp422	%read{1050,1189} %write{1050,1189}
temp	point	$tmp423	%read{1050,1189} %write{1050,1189}
temp	point	$tmp424	%read{1050,1189} %write{1050,1189}
temp	float	$tmp425	%read{1050,1189} %write{1050,1189}
temp	float	$tmp426	%read{1050,1189} %write{1050,1189}
temp	float	$tmp427.x	%read{1050,1189} %write{1050,1189}
temp	float	$tmp427.y	%read{1050,1189} %write{1050,1189}
temp	float	$tmp427.z	%read{1050,1189} %write{1050,1189}
temp	float	$tmp427.w	%read{1050,1189} %write{1050,1189}
temp	point	$tmp428	%read{1050,1189} %write{1050,1189}
temp	float	$tmp429	%read{1050,1189} %write{1050,1189}
temp	float	$tmp430.x	%read{1050,1189} %write{1050,1189}
temp	float	$tmp430.y	%read{1050,1189} %write{1050,1189}
temp	float	$tmp430.z	%read{1050,1189} %write{1050,1189}
temp	float	$tmp430.w	%read{1050,1189} %write{1050,1189}
temp	point	$tmp431	%read{1050,1189} %write{1050,1189}
temp	point	$tmp432	%read{1050,1189} %write{1050,1189}
temp	int	$tmp433	%read{1050,1189} %write{1050,1189}
temp	int	$tmp434	%read{1050,1189} %write{1050,1189}
temp	float	$tmp435	%read{1050,1189} %write{1050,1189}
temp	float	$tmp436	%read{1050,1189} %write{1050,1189}
temp	float	$tmp437	%read{1050,1189} %write{1050,1189}
temp	float	$tmp438	%read{1050,1189} %write{1050,1189}
temp	float	$tmp439	%read{1050,1189} %write{1050,1189}
temp	float	$tmp440	%read{1050,1189} %write{1050,1189}
temp	float	$tmp441	%read{1050,1189} %write{1050,1189}
temp	float	$tmp442	%read{1050,1189} %write{1050,1189}
temp	float	$tmp443	%read{1050,1189} %write{1050,1189}
temp	float	$tmp444	%read{1050,1189} %write{1050,1189}
temp	float	$tmp445	%read{1050,1189} %write{1050,1189}
temp	float	$tmp446	%read{1050,1189} %write{1050,1189}
temp	float	$tmp447	%read{1050,1189} %write{1050,1189}
temp	int	$tmp448	%read{1050,1189} %write{1050,1189}
temp	float	$tmp449	%read{1050,1189} %write{1050,1189}
temp	float	$tmp450	%read{1050,1189} %write{1050,1189}
temp	float	$tmp451	%read{1050,1189} %write{1050,1189}
temp	float	$tmp452	%read{1050,1189} %write{1050,1189}
temp	float	$tmp453	%read{1050,1189} %write{1050,1189}
temp	float	$tmp454	%read{1050,1189} %write{1050,1189}
temp	float	$tmp455	%read{1050,1189} %write{1050,1189}
temp	float	$tmp456	%read{1050,1189} %write{1050,1189}
temp	float	$tmp457	%read{1050,1189} %write{1050,1189}
temp	float	$tmp458	%read{1050,1189} %write{1050,1189}
temp	float	$tmp459	%read{1050,1189} %write{1050,1189}
temp	float	$tmp460	%read{1050,1189} %write{1050,1189}
temp	float	$tmp461	%read{1050,1189} %write{1050,1189}
temp	int	$tmp462	%read{1050,1189} %write{1050,1189}
temp	float	$tmp463	%read{1050,1189} %write{1050,1189}
temp	float	$tmp464	%read{1050,1189} %write{1050,1189}
temp	float	$tmp465	%read{1050,1189} %write{1050,1189}
temp	float	$tmp466	%read{1050,1189} %write{1050,1189}
temp	float	$tmp467	%read{1050,1189} %write{1050,1189}
temp	float	$tmp468	%read{1050,1189} %write{1050,1189}
temp	float	$tmp469	%read{1050,1189} %write{1050,1189}
temp	float	$tmp470	%read{1050,1189} %write{1050,1189}
temp	float	$tmp471	%read{1050,1189} %write{1050,1189}
temp	float	$tmp472	%read{1050,1189} %write{1050,1189}
temp	float	$tmp473	%read{1050,1189} %write{1050,1189}
temp	float	$tmp474	%read{1050,1189} %write{1050,1189}
temp	float	$tmp475	%read{1050,1189} %write{1050,1189}
temp	float	$tmp476	%read{1050,1189} %write{1050,1189}
temp	float	$tmp477	%read{1050,1189} %write{1050,1189}
temp	float	$tmp478	%read{1050,1189} %write{1050,1189}
temp	float	$tmp479	%read{1050,1189} %write{1050,1189}
temp	float	$tmp480	%read{1050,1189} %write{1050,1189}
temp	float	$tmp481	%read{1050,1189} %write{1050,1189}
temp	float	$tmp482	%read{1050,1189} %write{1050,1189}
temp	float	$tmp483	%read{1050,1189} %write{1050,1189}
temp	float	$tmp484	%read{1050,1189} %write{1050,1189}
temp	float	$tmp485	%read{1050,1189} %write{1050,1189}
temp	float	$tmp486	%read{1050,1189} %write{1050,1189}
temp	float	$tmp487	%read{1050,1189} %write{1050,1189}
temp	float	$tmp488	%read{1050,1189} %write{1050,1189}
temp	float	$tmp489	%read{1050,1189} %write{1050,1189}
temp	point	$tmp490	%read{1050,1189} %write{1050,1189}
temp	float	$tmp491	%read{1050,1189} %write{1050,1189}
temp	float	$tmp492	%read{1050,1189} %write{1050,1189}
temp	float	$tmp493.x	%read{1050,1189} %write{1050,1189}
temp	float	$tmp493.y	%read{1050,1189} %write{1050,1189}
temp	float	$tmp493.z	%read{1050,1189} %write{1050,1189}
temp	float	$tmp493.w	%read{1050,1189} %write{1050,1189}
temp	point	$tmp494	%read{1050,1189} %write{1050,1189}
temp	float	$tmp495	%read{1050,1189} %write{1050,1189}
temp	float	$tmp496.x	%read{1050,1189} %write{1050,1189}
temp	float	$tmp496.y	%read{1050,1189} %write{1050,1189}
temp	float	$tmp496.z	%read{1050,1189} %write{1050,1189}
temp	float	$tmp496.w	%read{1050,1189} %write{1050,1189}
temp	point	$tmp497	%read{1050,1189} %write{1050,1189}
temp	color	$tmp498	%read{1050,1189} %write{1050,1189}
temp	point	$tmp499	%read{1050,1189} %write{1050,1189}
temp	int	$tmp500	%read{2147483647,-1} %write{1050,1189}
temp	int	$tmp501	%read{2147483647,-1} %write{1050,1189}
temp	int	$tmp502	%read{2147483647,-1} %write{1050,1189}
temp	int	$tmp503	%read{1194,1194} %write{1193,1193}
const	string	$const64	"voronoi_f2_3d"		%read{1195,1195} %write{2147483647,-1}
temp	int	$tmp504	%read{1204,1320} %write{1204,1320}
temp	int	$tmp505	%read{1202,1320} %write{1203,1320}
temp	int	$tmp506	%read{1204,1320} %write{1204,1320}
temp	int	$tmp507	%read{1204,1320} %write{1204,1320}
temp	int	$tmp508	%read{1204,1320} %write{1204,1320}
temp	int	$tmp509	%read{1204,1320} %write{1204,1320}
temp	float	$tmp510	%read{1204,1320} %write{1204,1320}
temp	float	$tmp511	%read{1204,1320} %write{1204,1320}
temp	float	$tmp512	%read{1204,1320} %write{1204,1320}
temp	point	$tmp513	%read{1204,1320} %write{1204,1320}
temp	point	$tmp514	%read{1204,1320} %write{1204,1320}
temp	float	$tmp515	%read{1204,1320} %write{1204,1320}
temp	float	$tmp516	%read{1204,1320} %write{1204,1320}
temp	float	$tmp517.x	%read{1204,1320} %write{1204,1320}
temp	float	$tmp517.y	%read{1204,1320} %write{1204,1320}
temp	float	$tmp517.z	%read{1204,1320} %write{1204,1320}
temp	float	$tmp517.w	%read{1204,1320} %write{1204,1320}
temp	point	$tmp518	%read{1204,1320} %write{1204,1320}
temp	float	$tmp519	%read{1204,1320} %write{1204,1320}
temp	float	$tmp520.x	%read{1204,1320} %write{1204,1320}
temp	float	$tmp520.y	%read{1204,1320} %write{1204,1320}
temp	float	$tmp520.z	%read{1204,1320} %write{1204,1320}
temp	float	$tmp520.w	%read{1204,1320} %write{1204,1320}
temp	point	$tmp521	%read{1204,1320} %write{1204,1320}
temp	point	$tmp522	%read{1204,1320} %write{1204,1320}
temp	int	$tmp523	%read{1204,1320} %write{1204,1320}
temp	int	$tmp524	%read{1204,1320} %write{1204,1320}
temp	float	$tmp525	%read{1204,1320} %write{1204,1320}
temp	float	$tmp526	%read{1204,1320} %write{1204,1320}
temp	float	$tmp527	%read{1204,1320} %write{1204,1320}
temp	float	$tmp528	%read{1204,1320} %write{1204,1320}
temp	float	$tmp529	%read{1204,1320} %write{1204,1320}
temp	float	$tmp530	%read{1204,1320} %write{1204,1320}
temp	float	$tmp531	%read{1204,1320} %write{1204,1320}
temp	float	$tmp532	%read{1204,1320} %write{1204,1320}
temp	float	$tmp533	%read{1204,1320} %write{1204,1320}
temp	float	$tmp534	%read{1204,1320} %write{1204,1320}
temp	float	$tmp535	%read{1204,1320} %write{1204,1320}
temp	float	$tmp536	%read{1204,1320} %write{1204,1320}
temp	float	$tmp537	%read{1204,1320} %write{1204,1320}
temp	int	$tmp538	%read{1204,1320} %write{1204,1320}
temp	float	$tmp539	%read{1204,1320} %write{1204,1320}
temp	float	$tmp540	%read{1204,1320} %write{1204,1320}
temp	float	$tmp541	%read{1204,1320} %write{1204,1320}
temp	float	$tmp542	%read{1204,1320} %write{1204,1320}
temp	float	$tmp543	%read{1204,1320} %write{1204,1320}
temp	float	$tmp544	%read{1204,1320} %write{1204,1320}
temp	float	$tmp545	%read{1204,1320} %write{1204,1320}
temp	float	$tmp546	%read{1204,1320} %write{1204,1320}
temp	float	$tmp547	%read{1204,1320} %write{1204,1320}
temp	float	$tmp548	%read{1204,1320} %write{1204,1320}
temp	float	$tmp549	%read{1204,1320} %write{1204,1320}
temp	float	$tmp550	%read{1204,1320} %write{1204,1320}
temp	float	$tmp551	%read{1204,1320} %write{1204,1320}
temp	int	$tmp552	%read{1204,1320} %write{1204,1320}
temp	float	$tmp553	%read{1204,1320} %write{1204,1320}
temp	float	$tmp554	%read{1204,1320} %write{1204,1320}
temp	float	$tmp555	%read{1204,1320} %write{1204,1320}
temp	float	$tmp556	%read{1204,1320} %write{1204,1320}
temp	float	$tmp557	%read{1204,1320} %write{1204,1320}
temp	float	$tmp558	%read{1204,1320} %write{1204,1320}
temp	float	$tmp559	%read{1204,1320} %write{1204,1320}
temp	float	$tmp560	%read{1204,1320} %write{1204,1320}
temp	float	$tmp561	%read{1204,1320} %write{1204,1320}
temp	float	$tmp562	%read{1204,1320} %write{1204,1320}
temp	float	$tmp563	%read{1204,1320} %write{1204,1320}
temp	float	$tmp564	%read{1204,1320} %write{1204,1320}
temp	float	$tmp565	%read{1204,1320} %write{1204,1320}
temp	float	$tmp566	%read{1204,1320} %write{1204,1320}
temp	float	$tmp567	%read{1204,1320} %write{1204,1320}
temp	float	$tmp568	%read{1204,1320} %write{1204,1320}
temp	float	$tmp569	%read{1204,1320} %write{1204,1320}
temp	float	$tmp570	%read{1204,1320} %write{1204,1320}
temp	int	$tmp571	%read{1204,1320} %write{1204,1320}
temp	int	$tmp572	%read{1204,1320} %write{1204,1320}
temp	int	$tmp573	%read{2147483647,-1} %write{1204,1320}
temp	int	$tmp574	%read{2147483647,-1} %write{1204,1320}
temp	int	$tmp575	%read{2147483647,-1} %write{1204,1320}
temp	point	$tmp576	%read{1325,1335} %write{1322,1322}
temp	float	$tmp577	%read{1340,1340} %write{1325,1325}
temp	float	$tmp578	%read{1340,1340} %write{1332,1332}
temp	float	$tmp579.x	%read{1331,1331} %write{1326,1326}
temp	float	$tmp579.y	%read{1331,1331} %write{1327,1327}
temp	float	$tmp579.z	%read{1331,1331} %write{1328,1328}
temp	float	$tmp579.w	%read{1332,1332} %write{1329,1329}
temp	point	$tmp580	%read{1332,1332} %write{1331,1331}
temp	float	$tmp581	%read{1340,1340} %write{1339,1339}
temp	float	$tmp582.x	%read{1338,1338} %write{1333,1333}
temp	float	$tmp582.y	%read{1338,1338} %write{1334,1334}
temp	float	$tmp582.z	%read{1338,1338} %write{1335,1335}
temp	float	$tmp582.w	%read{1339,1339} %write{1336,1336}
temp	point	$tmp583	%read{1339,1339} %write{1338,1338}
temp	int	$tmp584	%read{1343,1343} %write{1342,1342}
const	string	$const65	"voronoi_distance_to_edge_3d"		%read{1344,1344} %write{2147483647,-1}
temp	int	$tmp585	%read{1350,1396} %write{1350,1396}
temp	int	$tmp586	%read{1348,1396} %write{1349,1396}
temp	int	$tmp587	%read{1350,1396} %write{1350,1396}
temp	int	$tmp588	%read{1350,1396} %write{1350,1396}
temp	int	$tmp589	%read{1350,1396} %write{1350,1396}
temp	int	$tmp590	%read{1350,1396} %write{1350,1396}
temp	float	$tmp591	%read{1350,1396} %write{1350,1396}
temp	float	$tmp592	%read{1350,1396} %write{1350,1396}
temp	float	$tmp593	%read{1350,1396} %write{1350,1396}
temp	point	$tmp594	%read{1350,1396} %write{1350,1396}
temp	point	$tmp595	%read{1350,1396} %write{1350,1396}
temp	float	$tmp596	%read{1350,1396} %write{1350,1396}
temp	float	$tmp597	%read{1350,1396} %write{1350,1396}
temp	float	$tmp598.x	%read{1350,1396} %write{1350,1396}
temp	float	$tmp598.y	%read{1350,1396} %write{1350,1396}
temp	float	$tmp598.z	%read{1350,1396} %write{1350,1396}
temp	float	$tmp598.w	%read{1350,1396} %write{1350,1396}
temp	point	$tmp599	%read{1350,1396} %write{1350,1396}
temp	float	$tmp600	%read{1350,1396} %write{1350,1396}
temp	float	$tmp601.x	%read{1350,1396} %write{1350,1396}
temp	float	$tmp601.y	%read{1350,1396} %write{1350,1396}
temp	float	$tmp601.z	%read{1350,1396} %write{1350,1396}
temp	float	$tmp601.w	%read{1350,1396} %write{1350,1396}
temp	point	$tmp602	%read{1350,1396} %write{1350,1396}
temp	point	$tmp603	%read{1350,1396} %write{1350,1396}
temp	point	$tmp604	%read{1350,1396} %write{1350,1396}
temp	int	$tmp605	%read{1350,1396} %write{1350,1396}
temp	int	$tmp606	%read{2147483647,-1} %write{1350,1396}
temp	int	$tmp607	%read{2147483647,-1} %write{1350,1396}
temp	int	$tmp608	%read{2147483647,-1} %write{1350,1396}
temp	int	$tmp609	%read{1400,1450} %write{1400,1450}
temp	int	$tmp610	%read{1398,1450} %write{1399,1450}
temp	int	$tmp611	%read{1400,1450} %write{1400,1450}
temp	int	$tmp612	%read{1400,1450} %write{1400,1450}
temp	int	$tmp613	%read{1400,1450} %write{1400,1450}
temp	int	$tmp614	%read{1400,1450} %write{1400,1450}
temp	float	$tmp615	%read{1400,1450} %write{1400,1450}
temp	float	$tmp616	%read{1400,1450} %write{1400,1450}
temp	float	$tmp617	%read{1400,1450} %write{1400,1450}
temp	point	$tmp618	%read{1400,1450} %write{1400,1450}
temp	point	$tmp619	%read{1400,1450} %write{1400,1450}
temp	float	$tmp620	%read{1400,1450} %write{1400,1450}
temp	float	$tmp621	%read{1400,1450} %write{1400,1450}
temp	float	$tmp622.x	%read{1400,1450} %write{1400,1450}
temp	float	$tmp622.y	%read{1400,1450} %write{1400,1450}
temp	float	$tmp622.z	%read{1400,1450} %write{1400,1450}
temp	float	$tmp622.w	%read{1400,1450} %write{1400,1450}
temp	point	$tmp623	%read{1400,1450} %write{1400,1450}
temp	float	$tmp624	%read{1400,1450} %write{1400,1450}
temp	float	$tmp625.x	%read{1400,1450} %write{1400,1450}
temp	float	$tmp625.y	%read{1400,1450} %write{1400,1450}
temp	float	$tmp625.z	%read{1400,1450} %write{1400,1450}
temp	float	$tmp625.w	%read{1400,1450} %write{1400,1450}
temp	point	$tmp626	%read{1400,1450} %write{1400,1450}
temp	point	$tmp627	%read{1400,1450} %write{1400,1450}
temp	point	$tmp628	%read{1400,1450} %write{1400,1450}
temp	float	$tmp629	%read{1400,1450} %write{1400,1450}
temp	int	$tmp630	%read{1400,1450} %write{1400,1450}
temp	point	$tmp631	%read{1400,1450} %write{1400,1450}
temp	point	$tmp632	%read{1400,1450} %write{1400,1450}
temp	vector	$tmp633	%read{1400,1450} %write{1400,1450}
temp	int	$tmp634	%read{2147483647,-1} %write{1400,1450}
temp	int	$tmp635	%read{2147483647,-1} %write{1400,1450}
temp	int	$tmp636	%read{2147483647,-1} %write{1400,1450}
temp	int	$tmp637	%read{1453,1453} %write{1452,1452}
const	string	$const66	"voronoi_n_sphere_radius_3d"		%read{1454,1454} %write{2147483647,-1}
temp	int	$tmp638	%read{1460,1506} %write{1460,1506}
temp	int	$tmp639	%read{1458,1506} %write{1459,1506}
temp	int	$tmp640	%read{1460,1506} %write{1460,1506}
temp	int	$tmp641	%read{1460,1506} %write{1460,1506}
temp	int	$tmp642	%read{1460,1506} %write{1460,1506}
temp	int	$tmp643	%read{1460,1506} %write{1460,1506}
temp	float	$tmp644	%read{1460,1506} %write{1460,1506}
temp	float	$tmp645	%read{1460,1506} %write{1460,1506}
temp	float	$tmp646	%read{1460,1506} %write{1460,1506}
temp	point	$tmp647	%read{1460,1506} %write{1460,1506}
temp	point	$tmp648	%read{1460,1506} %write{1460,1506}
temp	float	$tmp649	%read{1460,1506} %write{1460,1506}
temp	float	$tmp650	%read{1460,1506} %write{1460,1506}
temp	float	$tmp651.x	%read{1460,1506} %write{1460,1506}
temp	float	$tmp651.y	%read{1460,1506} %write{1460,1506}
temp	float	$tmp651.z	%read{1460,1506} %write{1460,1506}
temp	float	$tmp651.w	%read{1460,1506} %write{1460,1506}
temp	point	$tmp652	%read{1460,1506} %write{1460,1506}
temp	float	$tmp653	%read{1460,1506} %write{1460,1506}
temp	float	$tmp654.x	%read{1460,1506} %write{1460,1506}
temp	float	$tmp654.y	%read{1460,1506} %write{1460,1506}
temp	float	$tmp654.z	%read{1460,1506} %write{1460,1506}
temp	float	$tmp654.w	%read{1460,1506} %write{1460,1506}
temp	point	$tmp655	%read{1460,1506} %write{1460,1506}
temp	point	$tmp656	%read{1460,1506} %write{1460,1506}
temp	int	$tmp657	%read{1460,1506} %write{1460,1506}
temp	int	$tmp658	%read{2147483647,-1} %write{1460,1506}
temp	int	$tmp659	%read{2147483647,-1} %write{1460,1506}
temp	int	$tmp660	%read{2147483647,-1} %write{1460,1506}
temp	int	$tmp661	%read{1510,1569} %write{1510,1569}
temp	int	$tmp662	%read{1508,1569} %write{1509,1569}
temp	int	$tmp663	%read{1510,1569} %write{1510,1569}
temp	int	$tmp664	%read{1510,1569} %write{1510,1569}
temp	int	$tmp665	%read{1510,1569} %write{1510,1569}
temp	int	$tmp666	%read{1510,1569} %write{1510,1569}
temp	int	$tmp667	%read{1510,1569} %write{1510,1569}
temp	int	$tmp668	%read{1510,1569} %write{1510,1569}
temp	int	$tmp669	%read{1510,1569} %write{1510,1569}
temp	int	$tmp670	%read{1510,1569} %write{1510,1569}
temp	int	$tmp671	%read{1510,1569} %write{1510,1569}
temp	int	$tmp672	%read{1510,1569} %write{1510,1569}
temp	int	$tmp673	%read{1510,1569} %write{1510,1569}
temp	point	$tmp674	%read{1510,1569} %write{1510,1569}
temp	float	$tmp675	%read{1510,1569} %write{1510,1569}
temp	float	$tmp676	%read{1510,1569} %write{1510,1569}
temp	float	$tmp677	%read{1510,1569} %write{1510,1569}
temp	point	$tmp678	%read{1510,1569} %write{1510,1569}
temp	point	$tmp679	%read{1510,1569} %write{1510,1569}
temp	float	$tmp680	%read{1510,1569} %write{1510,1569}
temp	float	$tmp681	%read{1510,1569} %write{1510,1569}
temp	float	$tmp682.x	%read{1510,1569} %write{1510,1569}
temp	float	$tmp682.y	%read{1510,1569} %write{1510,1569}
temp	float	$tmp682.z	%read{1510,1569} %write{1510,1569}
temp	float	$tmp682.w	%read{1510,1569} %write{1510,1569}
temp	point	$tmp683	%read{1510,1569} %write{1510,1569}
temp	float	$tmp684	%read{1510,1569} %write{1510,1569}
temp	float	$tmp685.x	%read{1510,1569} %write{1510,1569}
temp	float	$tmp685.y	%read{1510,1569} %write{1510,1569}
temp	float	$tmp685.z	%read{1510,1569} %write{1510,1569}
temp	float	$tmp685.w	%read{1510,1569} %write{1510,1569}
temp	point	$tmp686	%read{1510,1569} %write{1510,1569}
temp	point	$tmp687	%read{1510,1569} %write{1510,1569}
temp	int	$tmp688	%read{1510,1569} %write{1510,1569}
temp	int	$tmp689	%read{2147483647,-1} %write{1510,1569}
temp	int	$tmp690	%read{2147483647,-1} %write{1510,1569}
temp	int	$tmp691	%read{2147483647,-1} %write{1510,1569}
temp	float	$tmp692	%read{1571,1571} %write{1570,1570}
temp	int	$tmp693	%read{1574,1574} %write{1573,1573}
const	string	$const67	"4D"		%read{1577,1577} %write{2147483647,-1}
temp	int	$tmp694	%read{1578,1578} %write{1577,1577}
temp	int	$tmp695	%read{1584,1584} %write{1583,1583}
const	string	$const68	"voronoi_f1_4d"		%read{1585,1585} %write{2147483647,-1}
temp	int	$tmp696	%read{1599,1749} %write{1599,1749}
temp	int	$tmp697	%read{1597,1749} %write{1598,1749}
temp	int	$tmp698	%read{1599,1749} %write{1599,1749}
temp	int	$tmp699	%read{1599,1749} %write{1599,1749}
temp	int	$tmp700	%read{1599,1749} %write{1599,1749}
temp	int	$tmp701	%read{1599,1749} %write{1599,1749}
temp	int	$tmp702	%read{1599,1749} %write{1599,1749}
temp	int	$tmp703	%read{1599,1749} %write{1599,1749}
temp	float	$tmp704.x	%read{1599,1749} %write{1599,1749}
temp	float	$tmp704.y	%read{1599,1749} %write{1599,1749}
temp	float	$tmp704.z	%read{1599,1749} %write{1599,1749}
temp	float	$tmp704.w	%read{1599,1749} %write{1599,1749}
temp	float	$tmp705.x	%read{1599,1749} %write{1599,1749}
temp	float	$tmp705.y	%read{1599,1749} %write{1599,1749}
temp	float	$tmp705.z	%read{1599,1749} %write{1599,1749}
temp	float	$tmp705.w	%read{1599,1749} %write{1599,1749}
temp	float	$tmp706.x	%read{1599,1749} %write{1599,1749}
temp	float	$tmp706.y	%read{1599,1749} %write{1599,1749}
temp	float	$tmp706.z	%read{1599,1749} %write{1599,1749}
temp	float	$tmp706.w	%read{1599,1749} %write{1599,1749}
const	string	$const69	"hash_vector4_to_vector4"		%read{1622,2638} %write{2147483647,-1}
temp	point	$tmp707	%read{1599,1749} %write{1599,1749}
temp	float	$tmp708.x	%read{1599,1749} %write{1599,1749}
temp	float	$tmp708.y	%read{1599,1749} %write{1599,1749}
temp	float	$tmp708.z	%read{1599,1749} %write{1599,1749}
temp	float	$tmp708.w	%read{1599,1749} %write{1599,1749}
temp	point	$tmp709	%read{1599,1749} %write{1599,1749}
temp	float	$tmp710.x	%read{1599,1749} %write{1599,1749}
temp	float	$tmp710.y	%read{1599,1749} %write{1599,1749}
temp	float	$tmp710.z	%read{1599,1749} %write{1599,1749}
temp	float	$tmp710.w	%read{1599,1749} %write{1599,1749}
temp	point	$tmp711	%read{1599,1749} %write{1599,1749}
temp	float	$tmp712.x	%read{1599,1749} %write{1599,1749}
temp	float	$tmp712.y	%read{1599,1749} %write{1599,1749}
temp	float	$tmp712.z	%read{1599,1749} %write{1599,1749}
temp	float	$tmp712.w	%read{1599,1749} %write{1599,1749}
temp	point	$tmp713	%read{1599,1749} %write{1599,1749}
temp	float	$tmp714.x	%read{1599,1749} %write{1599,1749}
temp	float	$tmp714.y	%read{1599,1749} %write{1599,1749}
temp	float	$tmp714.z	%read{1599,1749} %write{1599,1749}
temp	float	$tmp714.w	%read{1599,1749} %write{1599,1749}
temp	int	$tmp715	%read{1599,1749} %write{1599,1749}
temp	float	$tmp716.x	%read{1599,1749} %write{1599,1749}
temp	float	$tmp716.y	%read{1599,1749} %write{1599,1749}
temp	float	$tmp716.z	%read{1599,1749} %write{1599,1749}
temp	float	$tmp716.w	%read{1599,1749} %write{1599,1749}
temp	float	$tmp717	%read{1599,1749} %write{1599,1749}
temp	float	$tmp718	%read{1599,1749} %write{1599,1749}
temp	float	$tmp719	%read{1599,1749} %write{1599,1749}
temp	float	$tmp720	%read{1599,1749} %write{1599,1749}
temp	float	$tmp721	%read{1599,1749} %write{1599,1749}
temp	float	$tmp722	%read{1599,1749} %write{1599,1749}
temp	float	$tmp723	%read{1599,1749} %write{1599,1749}
temp	int	$tmp724	%read{1599,1749} %write{1599,1749}
temp	float	$tmp725	%read{1599,1749} %write{1599,1749}
temp	float	$tmp726	%read{1599,1749} %write{1599,1749}
temp	float	$tmp727	%read{1599,1749} %write{1599,1749}
temp	float	$tmp728	%read{1599,1749} %write{1599,1749}
temp	float	$tmp729	%read{1599,1749} %write{1599,1749}
temp	float	$tmp730	%read{1599,1749} %write{1599,1749}
temp	float	$tmp731	%read{1599,1749} %write{1599,1749}
temp	float	$tmp732	%read{1599,1749} %write{1599,1749}
temp	float	$tmp733	%read{1599,1749} %write{1599,1749}
temp	float	$tmp734	%read{1599,1749} %write{1599,1749}
temp	int	$tmp735	%read{1599,1749} %write{1599,1749}
temp	float	$tmp736	%read{1599,1749} %write{1599,1749}
temp	float	$tmp737	%read{1599,1749} %write{1599,1749}
temp	float	$tmp738	%read{1599,1749} %write{1599,1749}
temp	float	$tmp739	%read{1599,1749} %write{1599,1749}
temp	float	$tmp740	%read{1599,1749} %write{1599,1749}
temp	float	$tmp741	%read{1599,1749} %write{1599,1749}
temp	float	$tmp742	%read{1599,1749} %write{1599,1749}
temp	float	$tmp743	%read{1599,1749} %write{1599,1749}
temp	float	$tmp744	%read{1599,1749} %write{1599,1749}
temp	float	$tmp745	%read{1599,1749} %write{1599,1749}
temp	int	$tmp746	%read{1599,1749} %write{1599,1749}
temp	float	$tmp747	%read{1599,1749} %write{1599,1749}
temp	float	$tmp748	%read{1599,1749} %write{1599,1749}
temp	float	$tmp749	%read{1599,1749} %write{1599,1749}
temp	float	$tmp750	%read{1599,1749} %write{1599,1749}
temp	float	$tmp751	%read{1599,1749} %write{1599,1749}
temp	float	$tmp752	%read{1599,1749} %write{1599,1749}
temp	float	$tmp753	%read{1599,1749} %write{1599,1749}
temp	float	$tmp754	%read{1599,1749} %write{1599,1749}
temp	float	$tmp755	%read{1599,1749} %write{1599,1749}
temp	float	$tmp756	%read{1599,1749} %write{1599,1749}
temp	float	$tmp757	%read{1599,1749} %write{1599,1749}
temp	float	$tmp758	%read{1599,1749} %write{1599,1749}
temp	float	$tmp759	%read{1599,1749} %write{1599,1749}
temp	float	$tmp760	%read{1599,1749} %write{1599,1749}
temp	float	$tmp761	%read{1599,1749} %write{1599,1749}
temp	float	$tmp762	%read{1599,1749} %write{1599,1749}
temp	int	$tmp763	%read{1599,1749} %write{1599,1749}
temp	int	$tmp764	%read{2147483647,-1} %write{1599,1749}
temp	int	$tmp765	%read{2147483647,-1} %write{1599,1749}
temp	int	$tmp766	%read{2147483647,-1} %write{1599,1749}
temp	int	$tmp767	%read{2147483647,-1} %write{1599,1749}
temp	float	$tmp768.x	%read{1758,1770} %write{1752,1752}
temp	float	$tmp768.y	%read{1758,1769} %write{1753,1753}
temp	float	$tmp768.z	%read{1758,1768} %write{1754,1754}
temp	float	$tmp768.w	%read{1759,1767} %write{1755,1755}
const	string	$const70	"hash_vector4_to_color"		%read{1756,2204} %write{2147483647,-1}
temp	float	$tmp769	%read{1774,1774} %write{1759,1759}
temp	point	$tmp770	%read{1759,1759} %write{1758,1758}
temp	float	$tmp771	%read{1774,1774} %write{1766,1766}
temp	float	$tmp772.x	%read{1765,1765} %write{1760,1760}
temp	float	$tmp772.y	%read{1765,1765} %write{1761,1761}
temp	float	$tmp772.z	%read{1765,1765} %write{1762,1762}
temp	float	$tmp772.w	%read{1766,1766} %write{1763,1763}
temp	point	$tmp773	%read{1766,1766} %write{1765,1765}
temp	float	$tmp774	%read{1774,1774} %write{1773,1773}
temp	float	$tmp775.x	%read{1772,1772} %write{1767,1767}
temp	float	$tmp775.y	%read{1772,1772} %write{1768,1768}
temp	float	$tmp775.z	%read{1772,1772} %write{1769,1769}
temp	float	$tmp775.w	%read{1773,1773} %write{1770,1770}
temp	point	$tmp776	%read{1773,1773} %write{1772,1772}
temp	int	$tmp777	%read{1781,1781} %write{1780,1780}
const	string	$const71	"voronoi_smooth_f1_4d"		%read{1782,1782} %write{2147483647,-1}
temp	int	$tmp778	%read{1801,1994} %write{1801,1994}
temp	int	$tmp779	%read{1799,1994} %write{1800,1994}
temp	int	$tmp780	%read{1801,1994} %write{1801,1994}
temp	int	$tmp781	%read{1801,1994} %write{1801,1994}
temp	int	$tmp782	%read{1801,1994} %write{1801,1994}
temp	int	$tmp783	%read{1801,1994} %write{1801,1994}
temp	int	$tmp784	%read{1801,1994} %write{1801,1994}
temp	int	$tmp785	%read{1801,1994} %write{1801,1994}
temp	float	$tmp786.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp786.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp786.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp786.w	%read{1801,1994} %write{1801,1994}
temp	float	$tmp787.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp787.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp787.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp787.w	%read{1801,1994} %write{1801,1994}
temp	float	$tmp788.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp788.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp788.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp788.w	%read{1801,1994} %write{1801,1994}
temp	point	$tmp789	%read{1801,1994} %write{1801,1994}
temp	float	$tmp790.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp790.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp790.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp790.w	%read{1801,1994} %write{1801,1994}
temp	point	$tmp791	%read{1801,1994} %write{1801,1994}
temp	float	$tmp792.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp792.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp792.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp792.w	%read{1801,1994} %write{1801,1994}
temp	point	$tmp793	%read{1801,1994} %write{1801,1994}
temp	float	$tmp794.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp794.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp794.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp794.w	%read{1801,1994} %write{1801,1994}
temp	point	$tmp795	%read{1801,1994} %write{1801,1994}
temp	float	$tmp796.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp796.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp796.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp796.w	%read{1801,1994} %write{1801,1994}
temp	int	$tmp797	%read{1801,1994} %write{1801,1994}
temp	float	$tmp798.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp798.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp798.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp798.w	%read{1801,1994} %write{1801,1994}
temp	float	$tmp799	%read{1801,1994} %write{1801,1994}
temp	float	$tmp800	%read{1801,1994} %write{1801,1994}
temp	float	$tmp801	%read{1801,1994} %write{1801,1994}
temp	float	$tmp802	%read{1801,1994} %write{1801,1994}
temp	float	$tmp803	%read{1801,1994} %write{1801,1994}
temp	float	$tmp804	%read{1801,1994} %write{1801,1994}
temp	float	$tmp805	%read{1801,1994} %write{1801,1994}
temp	int	$tmp806	%read{1801,1994} %write{1801,1994}
temp	float	$tmp807	%read{1801,1994} %write{1801,1994}
temp	float	$tmp808	%read{1801,1994} %write{1801,1994}
temp	float	$tmp809	%read{1801,1994} %write{1801,1994}
temp	float	$tmp810	%read{1801,1994} %write{1801,1994}
temp	float	$tmp811	%read{1801,1994} %write{1801,1994}
temp	float	$tmp812	%read{1801,1994} %write{1801,1994}
temp	float	$tmp813	%read{1801,1994} %write{1801,1994}
temp	float	$tmp814	%read{1801,1994} %write{1801,1994}
temp	float	$tmp815	%read{1801,1994} %write{1801,1994}
temp	float	$tmp816	%read{1801,1994} %write{1801,1994}
temp	int	$tmp817	%read{1801,1994} %write{1801,1994}
temp	float	$tmp818	%read{1801,1994} %write{1801,1994}
temp	float	$tmp819	%read{1801,1994} %write{1801,1994}
temp	float	$tmp820	%read{1801,1994} %write{1801,1994}
temp	float	$tmp821	%read{1801,1994} %write{1801,1994}
temp	float	$tmp822	%read{1801,1994} %write{1801,1994}
temp	float	$tmp823	%read{1801,1994} %write{1801,1994}
temp	float	$tmp824	%read{1801,1994} %write{1801,1994}
temp	float	$tmp825	%read{1801,1994} %write{1801,1994}
temp	float	$tmp826	%read{1801,1994} %write{1801,1994}
temp	float	$tmp827	%read{1801,1994} %write{1801,1994}
temp	int	$tmp828	%read{1801,1994} %write{1801,1994}
temp	float	$tmp829	%read{1801,1994} %write{1801,1994}
temp	float	$tmp830	%read{1801,1994} %write{1801,1994}
temp	float	$tmp831	%read{1801,1994} %write{1801,1994}
temp	float	$tmp832	%read{1801,1994} %write{1801,1994}
temp	float	$tmp833	%read{1801,1994} %write{1801,1994}
temp	float	$tmp834	%read{1801,1994} %write{1801,1994}
temp	float	$tmp835	%read{1801,1994} %write{1801,1994}
temp	float	$tmp836	%read{1801,1994} %write{1801,1994}
temp	float	$tmp837	%read{1801,1994} %write{1801,1994}
temp	float	$tmp838	%read{1801,1994} %write{1801,1994}
temp	float	$tmp839	%read{1801,1994} %write{1801,1994}
temp	float	$tmp840	%read{1801,1994} %write{1801,1994}
temp	float	$tmp841	%read{1801,1994} %write{1801,1994}
temp	float	$tmp842	%read{1801,1994} %write{1801,1994}
temp	float	$tmp843	%read{1801,1994} %write{1801,1994}
temp	float	$tmp844	%read{1801,1994} %write{1801,1994}
temp	float	$tmp845	%read{1801,1994} %write{1801,1994}
temp	float	$tmp846	%read{1801,1994} %write{1801,1994}
temp	float	$tmp847	%read{1801,1994} %write{1801,1994}
temp	float	$tmp848	%read{1801,1994} %write{1801,1994}
temp	float	$tmp849	%read{1801,1994} %write{1801,1994}
temp	float	$tmp850	%read{1801,1994} %write{1801,1994}
temp	float	$tmp851	%read{1801,1994} %write{1801,1994}
temp	float	$tmp852	%read{1801,1994} %write{1801,1994}
temp	float	$tmp853	%read{1801,1994} %write{1801,1994}
temp	float	$tmp854.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp854.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp854.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp854.w	%read{1801,1994} %write{1801,1994}
temp	float	$tmp855	%read{1801,1994} %write{1801,1994}
temp	point	$tmp856	%read{1801,1994} %write{1801,1994}
temp	float	$tmp857	%read{1801,1994} %write{1801,1994}
temp	float	$tmp858.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp858.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp858.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp858.w	%read{1801,1994} %write{1801,1994}
temp	point	$tmp859	%read{1801,1994} %write{1801,1994}
temp	float	$tmp860	%read{1801,1994} %write{1801,1994}
temp	float	$tmp861.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp861.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp861.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp861.w	%read{1801,1994} %write{1801,1994}
temp	point	$tmp862	%read{1801,1994} %write{1801,1994}
temp	color	$tmp863	%read{1801,1994} %write{1801,1994}
temp	float	$tmp864.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp864.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp864.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp864.w	%read{1801,1994} %write{1801,1994}
temp	float	$tmp865.x	%read{1801,1994} %write{1801,1994}
temp	float	$tmp865.y	%read{1801,1994} %write{1801,1994}
temp	float	$tmp865.z	%read{1801,1994} %write{1801,1994}
temp	float	$tmp865.w	%read{1801,1994} %write{1801,1994}
temp	int	$tmp866	%read{2147483647,-1} %write{1801,1994}
temp	int	$tmp867	%read{2147483647,-1} %write{1801,1994}
temp	int	$tmp868	%read{2147483647,-1} %write{1801,1994}
temp	int	$tmp869	%read{2147483647,-1} %write{1801,1994}
temp	int	$tmp870	%read{2003,2003} %write{2002,2002}
const	string	$const72	"voronoi_f2_4d"		%read{2004,2004} %write{2147483647,-1}
temp	int	$tmp871	%read{2027,2197} %write{2027,2197}
temp	int	$tmp872	%read{2025,2197} %write{2026,2197}
temp	int	$tmp873	%read{2027,2197} %write{2027,2197}
temp	int	$tmp874	%read{2027,2197} %write{2027,2197}
temp	int	$tmp875	%read{2027,2197} %write{2027,2197}
temp	int	$tmp876	%read{2027,2197} %write{2027,2197}
temp	int	$tmp877	%read{2027,2197} %write{2027,2197}
temp	int	$tmp878	%read{2027,2197} %write{2027,2197}
temp	float	$tmp879.x	%read{2027,2197} %write{2027,2197}
temp	float	$tmp879.y	%read{2027,2197} %write{2027,2197}
temp	float	$tmp879.z	%read{2027,2197} %write{2027,2197}
temp	float	$tmp879.w	%read{2027,2197} %write{2027,2197}
temp	float	$tmp880.x	%read{2027,2197} %write{2027,2197}
temp	float	$tmp880.y	%read{2027,2197} %write{2027,2197}
temp	float	$tmp880.z	%read{2027,2197} %write{2027,2197}
temp	float	$tmp880.w	%read{2027,2197} %write{2027,2197}
temp	float	$tmp881.x	%read{2027,2197} %write{2027,2197}
temp	float	$tmp881.y	%read{2027,2197} %write{2027,2197}
temp	float	$tmp881.z	%read{2027,2197} %write{2027,2197}
temp	float	$tmp881.w	%read{2027,2197} %write{2027,2197}
temp	point	$tmp882	%read{2027,2197} %write{2027,2197}
temp	float	$tmp883.x	%read{2027,2197} %write{2027,2197}
temp	float	$tmp883.y	%read{2027,2197} %write{2027,2197}
temp	float	$tmp883.z	%read{2027,2197} %write{2027,2197}
temp	float	$tmp883.w	%read{2027,2197} %write{2027,2197}
temp	point	$tmp884	%read{2027,2197} %write{2027,2197}
temp	float	$tmp885.x	%read{2027,2197} %write{2027,2197}
temp	float	$tmp885.y	%read{2027,2197} %write{2027,2197}
temp	float	$tmp885.z	%read{2027,2197} %write{2027,2197}
temp	float	$tmp885.w	%read{2027,2197} %write{2027,2197}
temp	point	$tmp886	%read{2027,2197} %write{2027,2197}
temp	float	$tmp887.x	%read{2027,2197} %write{2027,2197}
temp	float	$tmp887.y	%read{2027,2197} %write{2027,2197}
temp	float	$tmp887.z	%read{2027,2197} %write{2027,2197}
temp	float	$tmp887.w	%read{2027,2197} %write{2027,2197}
temp	point	$tmp888	%read{2027,2197} %write{2027,2197}
temp	float	$tmp889.x	%read{2027,2197} %write{2027,2197}
temp	float	$tmp889.y	%read{2027,2197} %write{2027,2197}
temp	float	$tmp889.z	%read{2027,2197} %write{2027,2197}
temp	float	$tmp889.w	%read{2027,2197} %write{2027,2197}
temp	int	$tmp890	%read{2027,2197} %write{2027,2197}
temp	float	$tmp891.x	%read{2027,2197} %write{2027,2197}
temp	float	$tmp891.y	%read{2027,2197} %write{2027,2197}
temp	float	$tmp891.z	%read{2027,2197} %write{2027,2197}
temp	float	$tmp891.w	%read{2027,2197} %write{2027,2197}
temp	float	$tmp892	%read{2027,2197} %write{2027,2197}
temp	float	$tmp893	%read{2027,2197} %write{2027,2197}
temp	float	$tmp894	%read{2027,2197} %write{2027,2197}
temp	float	$tmp895	%read{2027,2197} %write{2027,2197}
temp	float	$tmp896	%read{2027,2197} %write{2027,2197}
temp	float	$tmp897	%read{2027,2197} %write{2027,2197}
temp	float	$tmp898	%read{2027,2197} %write{2027,2197}
temp	int	$tmp899	%read{2027,2197} %write{2027,2197}
temp	float	$tmp900	%read{2027,2197} %write{2027,2197}
temp	float	$tmp901	%read{2027,2197} %write{2027,2197}
temp	float	$tmp902	%read{2027,2197} %write{2027,2197}
temp	float	$tmp903	%read{2027,2197} %write{2027,2197}
temp	float	$tmp904	%read{2027,2197} %write{2027,2197}
temp	float	$tmp905	%read{2027,2197} %write{2027,2197}
temp	float	$tmp906	%read{2027,2197} %write{2027,2197}
temp	float	$tmp907	%read{2027,2197} %write{2027,2197}
temp	float	$tmp908	%read{2027,2197} %write{2027,2197}
temp	float	$tmp909	%read{2027,2197} %write{2027,2197}
temp	int	$tmp910	%read{2027,2197} %write{2027,2197}
temp	float	$tmp911	%read{2027,2197} %write{2027,2197}
temp	float	$tmp912	%read{2027,2197} %write{2027,2197}
temp	float	$tmp913	%read{2027,2197} %write{2027,2197}
temp	float	$tmp914	%read{2027,2197} %write{2027,2197}
temp	float	$tmp915	%read{2027,2197} %write{2027,2197}
temp	float	$tmp916	%read{2027,2197} %write{2027,2197}
temp	float	$tmp917	%read{2027,2197} %write{2027,2197}
temp	float	$tmp918	%read{2027,2197} %write{2027,2197}
temp	float	$tmp919	%read{2027,2197} %write{2027,2197}
temp	float	$tmp920	%read{2027,2197} %write{2027,2197}
temp	int	$tmp921	%read{2027,2197} %write{2027,2197}
temp	float	$tmp922	%read{2027,2197} %write{2027,2197}
temp	float	$tmp923	%read{2027,2197} %write{2027,2197}
temp	float	$tmp924	%read{2027,2197} %write{2027,2197}
temp	float	$tmp925	%read{2027,2197} %write{2027,2197}
temp	float	$tmp926	%read{2027,2197} %write{2027,2197}
temp	float	$tmp927	%read{2027,2197} %write{2027,2197}
temp	float	$tmp928	%read{2027,2197} %write{2027,2197}
temp	float	$tmp929	%read{2027,2197} %write{2027,2197}
temp	float	$tmp930	%read{2027,2197} %write{2027,2197}
temp	float	$tmp931	%read{2027,2197} %write{2027,2197}
temp	float	$tmp932	%read{2027,2197} %write{2027,2197}
temp	float	$tmp933	%read{2027,2197} %write{2027,2197}
temp	float	$tmp934	%read{2027,2197} %write{2027,2197}
temp	float	$tmp935	%read{2027,2197} %write{2027,2197}
temp	float	$tmp936	%read{2027,2197} %write{2027,2197}
temp	float	$tmp937	%read{2027,2197} %write{2027,2197}
temp	int	$tmp938	%read{2027,2197} %write{2027,2197}
temp	int	$tmp939	%read{2027,2197} %write{2027,2197}
temp	int	$tmp940	%read{2147483647,-1} %write{2027,2197}
temp	int	$tmp941	%read{2147483647,-1} %write{2027,2197}
temp	int	$tmp942	%read{2147483647,-1} %write{2027,2197}
temp	int	$tmp943	%read{2147483647,-1} %write{2027,2197}
temp	float	$tmp944.x	%read{2206,2218} %write{2200,2200}
temp	float	$tmp944.y	%read{2206,2217} %write{2201,2201}
temp	float	$tmp944.z	%read{2206,2216} %write{2202,2202}
temp	float	$tmp944.w	%read{2207,2215} %write{2203,2203}
temp	float	$tmp945	%read{2222,2222} %write{2207,2207}
temp	point	$tmp946	%read{2207,2207} %write{2206,2206}
temp	float	$tmp947	%read{2222,2222} %write{2214,2214}
temp	float	$tmp948.x	%read{2213,2213} %write{2208,2208}
temp	float	$tmp948.y	%read{2213,2213} %write{2209,2209}
temp	float	$tmp948.z	%read{2213,2213} %write{2210,2210}
temp	float	$tmp948.w	%read{2214,2214} %write{2211,2211}
temp	point	$tmp949	%read{2214,2214} %write{2213,2213}
temp	float	$tmp950	%read{2222,2222} %write{2221,2221}
temp	float	$tmp951.x	%read{2220,2220} %write{2215,2215}
temp	float	$tmp951.y	%read{2220,2220} %write{2216,2216}
temp	float	$tmp951.z	%read{2220,2220} %write{2217,2217}
temp	float	$tmp951.w	%read{2221,2221} %write{2218,2218}
temp	point	$tmp952	%read{2221,2221} %write{2220,2220}
temp	int	$tmp953	%read{2229,2229} %write{2228,2228}
const	string	$const73	"voronoi_distance_to_edge_4d"		%read{2230,2230} %write{2147483647,-1}
temp	int	$tmp954	%read{2244,2334} %write{2244,2334}
temp	int	$tmp955	%read{2242,2334} %write{2243,2334}
temp	int	$tmp956	%read{2244,2334} %write{2244,2334}
temp	int	$tmp957	%read{2244,2334} %write{2244,2334}
temp	int	$tmp958	%read{2244,2334} %write{2244,2334}
temp	int	$tmp959	%read{2244,2334} %write{2244,2334}
temp	int	$tmp960	%read{2244,2334} %write{2244,2334}
temp	int	$tmp961	%read{2244,2334} %write{2244,2334}
temp	float	$tmp962.x	%read{2244,2334} %write{2244,2334}
temp	float	$tmp962.y	%read{2244,2334} %write{2244,2334}
temp	float	$tmp962.z	%read{2244,2334} %write{2244,2334}
temp	float	$tmp962.w	%read{2244,2334} %write{2244,2334}
temp	float	$tmp963.x	%read{2244,2334} %write{2244,2334}
temp	float	$tmp963.y	%read{2244,2334} %write{2244,2334}
temp	float	$tmp963.z	%read{2244,2334} %write{2244,2334}
temp	float	$tmp963.w	%read{2244,2334} %write{2244,2334}
temp	float	$tmp964.x	%read{2244,2334} %write{2244,2334}
temp	float	$tmp964.y	%read{2244,2334} %write{2244,2334}
temp	float	$tmp964.z	%read{2244,2334} %write{2244,2334}
temp	float	$tmp964.w	%read{2244,2334} %write{2244,2334}
temp	float	$tmp965.x	%read{2244,2334} %write{2244,2334}
temp	float	$tmp965.y	%read{2244,2334} %write{2244,2334}
temp	float	$tmp965.z	%read{2244,2334} %write{2244,2334}
temp	float	$tmp965.w	%read{2244,2334} %write{2244,2334}
temp	point	$tmp966	%read{2244,2334} %write{2244,2334}
temp	float	$tmp967.x	%read{2244,2334} %write{2244,2334}
temp	float	$tmp967.y	%read{2244,2334} %write{2244,2334}
temp	float	$tmp967.z	%read{2244,2334} %write{2244,2334}
temp	float	$tmp967.w	%read{2244,2334} %write{2244,2334}
temp	point	$tmp968	%read{2244,2334} %write{2244,2334}
temp	float	$tmp969.x	%read{2244,2334} %write{2244,2334}
temp	float	$tmp969.y	%read{2244,2334} %write{2244,2334}
temp	float	$tmp969.z	%read{2244,2334} %write{2244,2334}
temp	float	$tmp969.w	%read{2244,2334} %write{2244,2334}
temp	point	$tmp970	%read{2244,2334} %write{2244,2334}
temp	float	$tmp971.x	%read{2244,2334} %write{2244,2334}
temp	float	$tmp971.y	%read{2244,2334} %write{2244,2334}
temp	float	$tmp971.z	%read{2244,2334} %write{2244,2334}
temp	float	$tmp971.w	%read{2244,2334} %write{2244,2334}
temp	point	$tmp972	%read{2244,2334} %write{2244,2334}
temp	float	$tmp973.x	%read{2244,2334} %write{2244,2334}
temp	float	$tmp973.y	%read{2244,2334} %write{2244,2334}
temp	float	$tmp973.z	%read{2244,2334} %write{2244,2334}
temp	float	$tmp973.w	%read{2244,2334} %write{2244,2334}
temp	float	$tmp974	%read{2244,2334} %write{2244,2334}
temp	float	$tmp975	%read{2244,2334} %write{2244,2334}
temp	float	$tmp976	%read{2244,2334} %write{2244,2334}
temp	float	$tmp977	%read{2244,2334} %write{2244,2334}
temp	float	$tmp978	%read{2244,2334} %write{2244,2334}
temp	float	$tmp979	%read{2244,2334} %write{2244,2334}
temp	int	$tmp980	%read{2244,2334} %write{2244,2334}
temp	int	$tmp981	%read{2147483647,-1} %write{2244,2334}
temp	int	$tmp982	%read{2147483647,-1} %write{2244,2334}
temp	int	$tmp983	%read{2147483647,-1} %write{2244,2334}
temp	int	$tmp984	%read{2147483647,-1} %write{2244,2334}
temp	int	$tmp985	%read{2338,2474} %write{2338,2474}
temp	int	$tmp986	%read{2336,2474} %write{2337,2474}
temp	int	$tmp987	%read{2338,2474} %write{2338,2474}
temp	int	$tmp988	%read{2338,2474} %write{2338,2474}
temp	int	$tmp989	%read{2338,2474} %write{2338,2474}
temp	int	$tmp990	%read{2338,2474} %write{2338,2474}
temp	int	$tmp991	%read{2338,2474} %write{2338,2474}
temp	int	$tmp992	%read{2338,2474} %write{2338,2474}
temp	float	$tmp993.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp993.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp993.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp993.w	%read{2338,2474} %write{2338,2474}
temp	float	$tmp994.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp994.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp994.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp994.w	%read{2338,2474} %write{2338,2474}
temp	float	$tmp995.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp995.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp995.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp995.w	%read{2338,2474} %write{2338,2474}
temp	float	$tmp996.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp996.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp996.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp996.w	%read{2338,2474} %write{2338,2474}
temp	point	$tmp997	%read{2338,2474} %write{2338,2474}
temp	float	$tmp998.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp998.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp998.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp998.w	%read{2338,2474} %write{2338,2474}
temp	point	$tmp999	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1000.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1000.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1000.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1000.w	%read{2338,2474} %write{2338,2474}
temp	point	$tmp1001	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1002.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1002.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1002.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1002.w	%read{2338,2474} %write{2338,2474}
temp	point	$tmp1003	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1004.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1004.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1004.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1004.w	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1005	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1006	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1007	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1008	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1009	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1010	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1011	%read{2338,2474} %write{2338,2474}
temp	int	$tmp1012	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1013.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1013.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1013.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1013.w	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1014.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1014.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1014.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1014.w	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1015.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1015.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1015.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1015.w	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1016.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1016.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1016.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1016.w	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1017	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1018	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1019	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1020	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1021	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1022	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1023	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1024	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1025.x	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1025.y	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1025.z	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1025.w	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1026	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1027	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1028	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1029	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1030	%read{2338,2474} %write{2338,2474}
temp	float	$tmp1031	%read{2338,2474} %write{2338,2474}
temp	int	$tmp1032	%read{2147483647,-1} %write{2338,2474}
temp	int	$tmp1033	%read{2147483647,-1} %write{2338,2474}
temp	int	$tmp1034	%read{2147483647,-1} %write{2338,2474}
temp	int	$tmp1035	%read{2147483647,-1} %write{2338,2474}
temp	int	$tmp1036	%read{2477,2477} %write{2476,2476}
const	string	$const74	"voronoi_n_sphere_radius_4d"		%read{2478,2478} %write{2147483647,-1}
temp	int	$tmp1037	%read{2492,2588} %write{2492,2588}
temp	int	$tmp1038	%read{2490,2588} %write{2491,2588}
temp	int	$tmp1039	%read{2492,2588} %write{2492,2588}
temp	int	$tmp1040	%read{2492,2588} %write{2492,2588}
temp	int	$tmp1041	%read{2492,2588} %write{2492,2588}
temp	int	$tmp1042	%read{2492,2588} %write{2492,2588}
temp	int	$tmp1043	%read{2492,2588} %write{2492,2588}
temp	int	$tmp1044	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1045.x	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1045.y	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1045.z	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1045.w	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1046.x	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1046.y	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1046.z	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1046.w	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1047.x	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1047.y	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1047.z	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1047.w	%read{2492,2588} %write{2492,2588}
temp	point	$tmp1048	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1049.x	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1049.y	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1049.z	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1049.w	%read{2492,2588} %write{2492,2588}
temp	point	$tmp1050	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1051.x	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1051.y	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1051.z	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1051.w	%read{2492,2588} %write{2492,2588}
temp	point	$tmp1052	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1053.x	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1053.y	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1053.z	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1053.w	%read{2492,2588} %write{2492,2588}
temp	point	$tmp1054	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1055.x	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1055.y	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1055.z	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1055.w	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1056.x	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1056.y	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1056.z	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1056.w	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1057	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1058	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1059	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1060	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1061	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1062	%read{2492,2588} %write{2492,2588}
temp	float	$tmp1063	%read{2492,2588} %write{2492,2588}
temp	int	$tmp1064	%read{2492,2588} %write{2492,2588}
temp	int	$tmp1065	%read{2147483647,-1} %write{2492,2588}
temp	int	$tmp1066	%read{2147483647,-1} %write{2492,2588}
temp	int	$tmp1067	%read{2147483647,-1} %write{2492,2588}
temp	int	$tmp1068	%read{2147483647,-1} %write{2492,2588}
temp	int	$tmp1069	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1070	%read{2590,2707} %write{2591,2707}
temp	int	$tmp1071	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1072	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1073	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1074	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1075	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1076	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1077	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1078	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1079	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1080	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1081	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1082	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1083	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1084	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1085	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1086	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1087.x	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1087.y	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1087.z	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1087.w	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1088.x	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1088.y	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1088.z	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1088.w	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1089.x	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1089.y	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1089.z	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1089.w	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1090.x	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1090.y	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1090.z	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1090.w	%read{2592,2707} %write{2592,2707}
temp	point	$tmp1091	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1092.x	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1092.y	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1092.z	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1092.w	%read{2592,2707} %write{2592,2707}
temp	point	$tmp1093	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1094.x	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1094.y	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1094.z	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1094.w	%read{2592,2707} %write{2592,2707}
temp	point	$tmp1095	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1096.x	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1096.y	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1096.z	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1096.w	%read{2592,2707} %write{2592,2707}
temp	point	$tmp1097	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1098.x	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1098.y	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1098.z	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1098.w	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1099.x	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1099.y	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1099.z	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1099.w	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1100	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1101	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1102	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1103	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1104	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1105	%read{2592,2707} %write{2592,2707}
temp	float	$tmp1106	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1107	%read{2592,2707} %write{2592,2707}
temp	int	$tmp1108	%read{2147483647,-1} %write{2592,2707}
temp	int	$tmp1109	%read{2147483647,-1} %write{2592,2707}
temp	int	$tmp1110	%read{2147483647,-1} %write{2592,2707}
temp	int	$tmp1111	%read{2147483647,-1} %write{2592,2707}
temp	float	$tmp1112	%read{2723,2723} %write{2722,2722}
temp	float	$tmp1113.x	%read{2715,2715} %write{2710,2710}
temp	float	$tmp1113.y	%read{2716,2716} %write{2711,2711}
temp	float	$tmp1113.z	%read{2718,2718} %write{2712,2712}
temp	float	$tmp1113.w	%read{2720,2720} %write{2713,2713}
temp	float	$tmp1114	%read{2717,2717} %write{2715,2715}
temp	float	$tmp1115	%read{2717,2717} %write{2716,2716}
temp	float	$tmp1116	%read{2719,2719} %write{2717,2717}
temp	float	$tmp1117	%read{2719,2719} %write{2718,2718}
temp	float	$tmp1118	%read{2721,2721} %write{2719,2719}
temp	float	$tmp1119	%read{2721,2721} %write{2720,2720}
temp	float	$tmp1120	%read{2722,2722} %write{2721,2721}
temp	int	$tmp1121	%read{2727,2727} %write{2726,2726}
temp	int	$tmp1122	%read{2731,2731} %write{2730,2730}
temp	int	$tmp1123	%read{2735,2735} %write{2734,2734}
temp	int	$tmp1124	%read{2739,2739} %write{2738,2738}
const	string	$const75	"Unknown dimension!"		%read{2745,2745} %write{2147483647,-1}
code Vector
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:908
#     vector3 Vector = P,
	assign		Vector P 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{908} %argrw{"wr"}
code Position
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:916
#     output vector3 Position = P,
	assign		Position P 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{916} %argrw{"wr"}
code ___main___
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:920
#   float randomness = clamp(Randomness, 0.0, 1.0);
	functioncall	$const3 5 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{920} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp1 Randomness $const2 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		randomness $tmp1 $const1 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:921
#   float smoothness = clamp(Smoothness / 2.0, 0.0, 0.5);
	div		$tmp2 Smoothness $const4 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{921} %argrw{"wrr"}
	functioncall	$const3 9 	%argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp3 $tmp2 $const5 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		smoothness $tmp3 $const1 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:923
#   vector3 coord = Vector;
	assign		coord Vector 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{923} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:924
#   if (use_mapping)
	if		use_mapping 12 12 	%line{924} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:925
#     coord = transform(mapping, coord);
	transform	coord mapping coord 	%line{925} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:927
#   float w = WIn * Scale;
	mul		w WIn Scale 	%line{927} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:928
#   coord *= Scale;
	mul		coord coord Scale 	%line{928} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:930
#   if (dimensions == "1D") {
	eq		$tmp4 dimensions $const6 	%line{930} %argrw{"wrr"}
	if		$tmp4 258 2746 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:931
#     if (feature == "f1") {
	eq		$tmp5 feature $const7 	%line{931} %argrw{"wrr"}
	if		$tmp5 58 254 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:932
#       voronoi_f1_1d(w, Exponent, randomness, metric, Distance, Color, WOut);
	functioncall	$const8 58 	%line{932} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:82
#   float cellPosition = floor(w);
	floor		___496_cellPosition w 	%line{82} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:83
#   float localPosition = w - cellPosition;
	sub		___496_localPosition w ___496_cellPosition 	%line{83} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:85
#   float minDistance = 8.0;
	assign		___496_minDistance $const9 	%line{85} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:87
#   for (int i = -1; i <= 1; i++) {
	for		$tmp7 24 26 41 43 	%line{87} %argrw{"r"}
	assign		___497_i $const10 	%argrw{"wr"}
	le		$tmp6 ___497_i $const11 	%argrw{"wrr"}
	neq		$tmp7 $tmp6 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:88
#     float cellOffset = float(i);
	assign		$tmp8 ___497_i 	%line{88} %argrw{"wr"}
	assign		___498_cellOffset $tmp8 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:89
#     float pointPosition = cellOffset + hash_float_to_float(cellPosition + cellOffset) * randomness;
	add		$tmp10 ___496_cellPosition ___498_cellOffset 	%line{89} %argrw{"wrr"}
	functioncall	$const13 31 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:11
#   return hashnoise(k);
	hashnoise	$tmp9 $tmp10 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{11} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:89
#     float pointPosition = cellOffset + hash_float_to_float(cellPosition + cellOffset) * randomness;
	mul		$tmp11 $tmp9 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{89} %argrw{"wrr"}
	add		___498_pointPosition ___498_cellOffset $tmp11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:90
#     float distanceToPoint = voronoi_distance(pointPosition, localPosition, metric, exponent);
	functioncall	$const14 36 	%line{90} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:71
#   return abs(a - b);
	sub		$tmp12 ___498_pointPosition ___496_localPosition 	%line{71} %argrw{"wrr"}
	abs		___498_distanceToPoint $tmp12 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:91
#     if (distanceToPoint < minDistance) {
	lt		$tmp13 ___498_distanceToPoint ___496_minDistance 	%line{91} %argrw{"wrr"}
	if		$tmp13 41 41 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:92
#       targetOffset = cellOffset;
	assign		___496_targetOffset ___498_cellOffset 	%line{92} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:93
#       minDistance = distanceToPoint;
	assign		___496_minDistance ___498_distanceToPoint 	%line{93} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:94
#       targetPosition = pointPosition;
	assign		___496_targetPosition ___498_pointPosition 	%line{94} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:87
#   for (int i = -1; i <= 1; i++) {
	assign		$tmp14 ___497_i 	%line{87} %argrw{"wr"}
	add		___497_i ___497_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:97
#   outDistance = minDistance;
	assign		Distance ___496_minDistance 	%line{97} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:98
#   outColor = hash_float_to_color(cellPosition + targetOffset);
	add		$tmp15 ___496_cellPosition ___496_targetOffset 	%line{98} %argrw{"wrr"}
	functioncall	$const15 57 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:55
#   return color(hash_float_to_float(k),
	functioncall	$const13 48 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{55} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:11
#   return hashnoise(k);
	hashnoise	$tmp16 $tmp15 	%line{11} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:56
#                hash_vector2_to_float(vector2(k, 1.0)),
	assign		$tmp18.x $tmp15 	%line{56} %argrw{"wr"}
	assign		$tmp18.y $const2 	%argrw{"wr"}
	functioncall	$const16 52 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp17 $tmp18.x $tmp18.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:57
#                hash_vector2_to_float(vector2(k, 2.0)));
	assign		$tmp20.x $tmp15 	%line{57} %argrw{"wr"}
	assign		$tmp20.y $const4 	%argrw{"wr"}
	functioncall	$const16 56 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp19 $tmp20.x $tmp20.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:55
#   return color(hash_float_to_float(k),
	color		Color $tmp16 $tmp17 $tmp19 	%line{55} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:99
#   outW = targetPosition + cellPosition;
	add		WOut ___496_targetPosition ___496_cellPosition 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{99} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:934
#     else if (feature == "smooth_f1") {
	eq		$tmp21 feature $const17 	%line{934} %argrw{"wrr"}
	if		$tmp21 115 254 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:935
#       voronoi_smooth_f1_1d(w, smoothness, Exponent, randomness, metric, Distance, Color, WOut);
	functioncall	$const18 115 	%line{935} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:111
#   float cellPosition = floor(w);
	floor		___500_cellPosition w 	%line{111} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:112
#   float localPosition = w - cellPosition;
	sub		___500_localPosition w ___500_cellPosition 	%line{112} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:114
#   float smoothDistance = 8.0;
	assign		___500_smoothDistance $const9 	%line{114} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:115
#   float smoothPosition = 0.0;
	assign		___500_smoothPosition $const1 	%line{115} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:116
#   color smoothColor = color(0.0);
	assign		___500_smoothColor $const19 	%line{116} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:117
#   for (int i = -2; i <= 2; i++) {
	for		$tmp23 68 70 110 112 	%line{117} %argrw{"r"}
	assign		___501_i $const20 	%argrw{"wr"}
	le		$tmp22 ___501_i $const21 	%argrw{"wrr"}
	neq		$tmp23 $tmp22 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:118
#     float cellOffset = float(i);
	assign		$tmp24 ___501_i 	%line{118} %argrw{"wr"}
	assign		___502_cellOffset $tmp24 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:119
#     float pointPosition = cellOffset + hash_float_to_float(cellPosition + cellOffset) * randomness;
	add		$tmp26 ___500_cellPosition ___502_cellOffset 	%line{119} %argrw{"wrr"}
	functioncall	$const13 75 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:11
#   return hashnoise(k);
	hashnoise	$tmp25 $tmp26 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{11} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:119
#     float pointPosition = cellOffset + hash_float_to_float(cellPosition + cellOffset) * randomness;
	mul		$tmp27 $tmp25 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{119} %argrw{"wrr"}
	add		___502_pointPosition ___502_cellOffset $tmp27 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:120
#     float distanceToPoint = voronoi_distance(pointPosition, localPosition, metric, exponent);
	functioncall	$const14 80 	%line{120} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:71
#   return abs(a - b);
	sub		$tmp28 ___502_pointPosition ___500_localPosition 	%line{71} %argrw{"wrr"}
	abs		___502_distanceToPoint $tmp28 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:121
#     float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (smoothDistance - distanceToPoint) / smoothness);
	sub		$tmp29 ___500_smoothDistance ___502_distanceToPoint 	%line{121} %argrw{"wrr"}
	mul		$tmp30 $const5 $tmp29 	%argrw{"wrr"}
	div		$tmp31 $tmp30 smoothness 	%argrw{"wrr"}
	add		$tmp32 $const5 $tmp31 	%argrw{"wrr"}
	smoothstep	___502_h $const1 $const2 $tmp32 	%argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:122
#     float correctionFactor = smoothness * h * (1.0 - h);
	mul		$tmp33 smoothness ___502_h 	%line{122} %argrw{"wrr"}
	sub		$tmp34 $const2 ___502_h 	%argrw{"wrr"}
	mul		___502_correctionFactor $tmp33 $tmp34 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:123
#     smoothDistance = mix(smoothDistance, distanceToPoint, h) - correctionFactor;
	mix		$tmp35 ___500_smoothDistance ___502_distanceToPoint ___502_h 	%line{123} %argrw{"wrrr"}
	sub		___500_smoothDistance $tmp35 ___502_correctionFactor 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:124
#     correctionFactor /= 1.0 + 3.0 * smoothness;
	mul		$tmp36 $const22 smoothness 	%line{124} %argrw{"wrr"}
	add		$tmp37 $const2 $tmp36 	%argrw{"wrr"}
	div		___502_correctionFactor ___502_correctionFactor $tmp37 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:125
#     color cellColor = hash_float_to_color(cellPosition + cellOffset);
	add		$tmp38 ___500_cellPosition ___502_cellOffset 	%line{125} %argrw{"wrr"}
	functioncall	$const15 106 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:55
#   return color(hash_float_to_float(k),
	functioncall	$const13 97 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{55} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:11
#   return hashnoise(k);
	hashnoise	$tmp39 $tmp38 	%line{11} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:56
#                hash_vector2_to_float(vector2(k, 1.0)),
	assign		$tmp41.x $tmp38 	%line{56} %argrw{"wr"}
	assign		$tmp41.y $const2 	%argrw{"wr"}
	functioncall	$const16 101 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp40 $tmp41.x $tmp41.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:57
#                hash_vector2_to_float(vector2(k, 2.0)));
	assign		$tmp43.x $tmp38 	%line{57} %argrw{"wr"}
	assign		$tmp43.y $const4 	%argrw{"wr"}
	functioncall	$const16 105 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp42 $tmp43.x $tmp43.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:55
#   return color(hash_float_to_float(k),
	color		___502_cellColor $tmp39 $tmp40 $tmp42 	%line{55} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:126
#     smoothColor = mix(smoothColor, cellColor, h) - correctionFactor;
	mix		$tmp44 ___500_smoothColor ___502_cellColor ___502_h 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{126} %argrw{"wrrr"}
	sub		___500_smoothColor $tmp44 ___502_correctionFactor 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:127
#     smoothPosition = mix(smoothPosition, pointPosition, h) - correctionFactor;
	mix		$tmp45 ___500_smoothPosition ___502_pointPosition ___502_h 	%line{127} %argrw{"wrrr"}
	sub		___500_smoothPosition $tmp45 ___502_correctionFactor 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:117
#   for (int i = -2; i <= 2; i++) {
	assign		$tmp46 ___501_i 	%line{117} %argrw{"wr"}
	add		___501_i ___501_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:129
#   outDistance = smoothDistance;
	assign		Distance ___500_smoothDistance 	%line{129} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:130
#   outColor = smoothColor;
	assign		Color ___500_smoothColor 	%line{130} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:131
#   outW = cellPosition + smoothPosition;
	add		WOut ___500_cellPosition ___500_smoothPosition 	%line{131} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:937
#     else if (feature == "f2") {
	eq		$tmp47 feature $const23 	%line{937} %argrw{"wrr"}
	if		$tmp47 168 254 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:938
#       voronoi_f2_1d(w, Exponent, randomness, metric, Distance, Color, WOut);
	functioncall	$const24 168 	%line{938} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:142
#   float cellPosition = floor(w);
	floor		___503_cellPosition w 	%line{142} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:143
#   float localPosition = w - cellPosition;
	sub		___503_localPosition w ___503_cellPosition 	%line{143} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:145
#   float distanceF1 = 8.0;
	assign		___503_distanceF1 $const9 	%line{145} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:146
#   float distanceF2 = 8.0;
	assign		___503_distanceF2 $const9 	%line{146} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:147
#   float offsetF1 = 0.0;
	assign		___503_offsetF1 $const1 	%line{147} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:148
#   float positionF1 = 0.0;
	assign		___503_positionF1 $const1 	%line{148} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:150
#   for (int i = -1; i <= 1; i++) {
	for		$tmp49 126 128 151 153 	%line{150} %argrw{"r"}
	assign		___504_i $const10 	%argrw{"wr"}
	le		$tmp48 ___504_i $const11 	%argrw{"wrr"}
	neq		$tmp49 $tmp48 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:151
#     float cellOffset = float(i);
	assign		$tmp50 ___504_i 	%line{151} %argrw{"wr"}
	assign		___505_cellOffset $tmp50 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:152
#     float pointPosition = cellOffset + hash_float_to_float(cellPosition + cellOffset) * randomness;
	add		$tmp52 ___503_cellPosition ___505_cellOffset 	%line{152} %argrw{"wrr"}
	functioncall	$const13 133 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:11
#   return hashnoise(k);
	hashnoise	$tmp51 $tmp52 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{11} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:152
#     float pointPosition = cellOffset + hash_float_to_float(cellPosition + cellOffset) * randomness;
	mul		$tmp53 $tmp51 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{152} %argrw{"wrr"}
	add		___505_pointPosition ___505_cellOffset $tmp53 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:153
#     float distanceToPoint = voronoi_distance(pointPosition, localPosition, metric, exponent);
	functioncall	$const14 138 	%line{153} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:71
#   return abs(a - b);
	sub		$tmp54 ___505_pointPosition ___503_localPosition 	%line{71} %argrw{"wrr"}
	abs		___505_distanceToPoint $tmp54 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:154
#     if (distanceToPoint < distanceF1) {
	lt		$tmp55 ___505_distanceToPoint ___503_distanceF1 	%line{154} %argrw{"wrr"}
	if		$tmp55 146 151 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:155
#       distanceF2 = distanceF1;
	assign		___503_distanceF2 ___503_distanceF1 	%line{155} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:156
#       distanceF1 = distanceToPoint;
	assign		___503_distanceF1 ___505_distanceToPoint 	%line{156} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:157
#       offsetF2 = offsetF1;
	assign		___503_offsetF2 ___503_offsetF1 	%line{157} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:158
#       offsetF1 = cellOffset;
	assign		___503_offsetF1 ___505_cellOffset 	%line{158} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:159
#       positionF2 = positionF1;
	assign		___503_positionF2 ___503_positionF1 	%line{159} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:160
#       positionF1 = pointPosition;
	assign		___503_positionF1 ___505_pointPosition 	%line{160} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:162
#     else if (distanceToPoint < distanceF2) {
	lt		$tmp56 ___505_distanceToPoint ___503_distanceF2 	%line{162} %argrw{"wrr"}
	if		$tmp56 151 151 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:163
#       distanceF2 = distanceToPoint;
	assign		___503_distanceF2 ___505_distanceToPoint 	%line{163} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:164
#       offsetF2 = cellOffset;
	assign		___503_offsetF2 ___505_cellOffset 	%line{164} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:165
#       positionF2 = pointPosition;
	assign		___503_positionF2 ___505_pointPosition 	%line{165} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:150
#   for (int i = -1; i <= 1; i++) {
	assign		$tmp57 ___504_i 	%line{150} %argrw{"wr"}
	add		___504_i ___504_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:168
#   outDistance = distanceF2;
	assign		Distance ___503_distanceF2 	%line{168} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:169
#   outColor = hash_float_to_color(cellPosition + offsetF2);
	add		$tmp58 ___503_cellPosition ___503_offsetF2 	%line{169} %argrw{"wrr"}
	functioncall	$const15 167 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:55
#   return color(hash_float_to_float(k),
	functioncall	$const13 158 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{55} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:11
#   return hashnoise(k);
	hashnoise	$tmp59 $tmp58 	%line{11} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:56
#                hash_vector2_to_float(vector2(k, 1.0)),
	assign		$tmp61.x $tmp58 	%line{56} %argrw{"wr"}
	assign		$tmp61.y $const2 	%argrw{"wr"}
	functioncall	$const16 162 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp60 $tmp61.x $tmp61.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:57
#                hash_vector2_to_float(vector2(k, 2.0)));
	assign		$tmp63.x $tmp58 	%line{57} %argrw{"wr"}
	assign		$tmp63.y $const4 	%argrw{"wr"}
	functioncall	$const16 166 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp62 $tmp63.x $tmp63.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:55
#   return color(hash_float_to_float(k),
	color		Color $tmp59 $tmp60 $tmp62 	%line{55} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:170
#   outW = positionF2 + cellPosition;
	add		WOut ___503_positionF2 ___503_cellPosition 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{170} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:940
#     else if (feature == "distance_to_edge") {
	eq		$tmp64 feature $const25 	%line{940} %argrw{"wrr"}
	if		$tmp64 197 254 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:941
#       voronoi_distance_to_edge_1d(w, randomness, Distance);
	functioncall	$const26 197 	%line{941} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:175
#   float cellPosition = floor(w);
	floor		___508_cellPosition w 	%line{175} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:176
#   float localPosition = w - cellPosition;
	sub		___508_localPosition w ___508_cellPosition 	%line{176} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:178
#   float midPointPosition = hash_float_to_float(cellPosition) * randomness;
	functioncall	$const13 175 	%line{178} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:11
#   return hashnoise(k);
	hashnoise	$tmp65 ___508_cellPosition 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{11} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:178
#   float midPointPosition = hash_float_to_float(cellPosition) * randomness;
	mul		___508_midPointPosition $tmp65 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{178} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:179
#   float leftPointPosition = -1.0 + hash_float_to_float(cellPosition - 1.0) * randomness;
	sub		$tmp67 ___508_cellPosition $const2 	%line{179} %argrw{"wrr"}
	functioncall	$const13 179 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:11
#   return hashnoise(k);
	hashnoise	$tmp66 $tmp67 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{11} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:179
#   float leftPointPosition = -1.0 + hash_float_to_float(cellPosition - 1.0) * randomness;
	mul		$tmp68 $tmp66 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{179} %argrw{"wrr"}
	add		___508_leftPointPosition $const27 $tmp68 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:180
#   float rightPointPosition = 1.0 + hash_float_to_float(cellPosition + 1.0) * randomness;
	add		$tmp70 ___508_cellPosition $const2 	%line{180} %argrw{"wrr"}
	functioncall	$const13 184 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:11
#   return hashnoise(k);
	hashnoise	$tmp69 $tmp70 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{11} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:180
#   float rightPointPosition = 1.0 + hash_float_to_float(cellPosition + 1.0) * randomness;
	mul		$tmp71 $tmp69 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{180} %argrw{"wrr"}
	add		___508_rightPointPosition $const2 $tmp71 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:181
#   float distanceToMidLeft = distance((midPointPosition + leftPointPosition) / 2.0, localPosition);
	add		$tmp72 ___508_midPointPosition ___508_leftPointPosition 	%line{181} %argrw{"wrr"}
	div		$tmp73 $tmp72 $const4 	%argrw{"wrr"}
	functioncall	$const28 191 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:28
#   return abs(a - b);
	sub		$tmp74 $tmp73 ___508_localPosition 	%line{28} %argrw{"wrr"}
	abs		___508_distanceToMidLeft $tmp74 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:182
#   float distanceToMidRight = distance((midPointPosition + rightPointPosition) / 2.0,
	add		$tmp75 ___508_midPointPosition ___508_rightPointPosition 	%line{182} %argrw{"wrr"}
	div		$tmp76 $tmp75 $const4 	%argrw{"wrr"}
	functioncall	$const28 196 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:28
#   return abs(a - b);
	sub		$tmp77 $tmp76 ___508_localPosition 	%line{28} %argrw{"wrr"}
	abs		___508_distanceToMidRight $tmp77 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:185
#   outDistance = min(distanceToMidLeft, distanceToMidRight);
	min		Distance ___508_distanceToMidLeft ___508_distanceToMidRight 	%line{185} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:943
#     else if (feature == "n_sphere_radius") {
	eq		$tmp78 feature $const29 	%line{943} %argrw{"wrr"}
	if		$tmp78 253 254 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:944
#       voronoi_n_sphere_radius_1d(w, randomness, Radius);
	functioncall	$const30 253 	%line{944} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:190
#   float cellPosition = floor(w);
	floor		___509_cellPosition w 	%line{190} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:191
#   float localPosition = w - cellPosition;
	sub		___509_localPosition w ___509_cellPosition 	%line{191} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:195
#   float minDistance = 8.0;
	assign		___509_minDistance $const9 	%line{195} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:196
#   for (int i = -1; i <= 1; i++) {
	for		$tmp80 205 207 222 224 	%line{196} %argrw{"r"}
	assign		___510_i $const10 	%argrw{"wr"}
	le		$tmp79 ___510_i $const11 	%argrw{"wrr"}
	neq		$tmp80 $tmp79 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:197
#     float cellOffset = float(i);
	assign		$tmp81 ___510_i 	%line{197} %argrw{"wr"}
	assign		___511_cellOffset $tmp81 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:198
#     float pointPosition = cellOffset + hash_float_to_float(cellPosition + cellOffset) * randomness;
	add		$tmp83 ___509_cellPosition ___511_cellOffset 	%line{198} %argrw{"wrr"}
	functioncall	$const13 212 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:11
#   return hashnoise(k);
	hashnoise	$tmp82 $tmp83 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{11} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:198
#     float pointPosition = cellOffset + hash_float_to_float(cellPosition + cellOffset) * randomness;
	mul		$tmp84 $tmp82 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{198} %argrw{"wrr"}
	add		___511_pointPosition ___511_cellOffset $tmp84 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:199
#     float distanceToPoint = distance(pointPosition, localPosition);
	functioncall	$const28 217 	%line{199} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:28
#   return abs(a - b);
	sub		$tmp85 ___511_pointPosition ___509_localPosition 	%line{28} %argrw{"wrr"}
	abs		___511_distanceToPoint $tmp85 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:200
#     if (distanceToPoint < minDistance) {
	lt		$tmp86 ___511_distanceToPoint ___509_minDistance 	%line{200} %argrw{"wrr"}
	if		$tmp86 222 222 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:201
#       minDistance = distanceToPoint;
	assign		___509_minDistance ___511_distanceToPoint 	%line{201} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:202
#       closestPoint = pointPosition;
	assign		___509_closestPoint ___511_pointPosition 	%line{202} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:203
#       closestPointOffset = cellOffset;
	assign		___509_closestPointOffset ___511_cellOffset 	%line{203} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:196
#   for (int i = -1; i <= 1; i++) {
	assign		$tmp87 ___510_i 	%line{196} %argrw{"wr"}
	add		___510_i ___510_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:207
#   minDistance = 8.0;
	assign		___509_minDistance $const9 	%line{207} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:209
#   for (int i = -1; i <= 1; i++) {
	for		$tmp89 227 229 247 249 	%line{209} %argrw{"r"}
	assign		___513_i $const10 	%argrw{"wr"}
	le		$tmp88 ___513_i $const11 	%argrw{"wrr"}
	neq		$tmp89 $tmp88 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:210
#     if (i == 0) {
	eq		$tmp90 ___513_i $const12 	%line{210} %argrw{"wrr"}
	if		$tmp90 232 232 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:211
#       continue;
	continue	%line{211}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:213
#     float cellOffset = float(i) + closestPointOffset;
	assign		$tmp92 ___513_i 	%line{213} %argrw{"wr"}
	assign		$tmp91 $tmp92 	%argrw{"wr"}
	add		___514_cellOffset $tmp91 ___509_closestPointOffset 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:214
#     float pointPosition = cellOffset + hash_float_to_float(cellPosition + cellOffset) * randomness;
	add		$tmp94 ___509_cellPosition ___514_cellOffset 	%line{214} %argrw{"wrr"}
	functioncall	$const13 238 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:11
#   return hashnoise(k);
	hashnoise	$tmp93 $tmp94 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{11} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:214
#     float pointPosition = cellOffset + hash_float_to_float(cellPosition + cellOffset) * randomness;
	mul		$tmp95 $tmp93 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{214} %argrw{"wrr"}
	add		___514_pointPosition ___514_cellOffset $tmp95 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:215
#     float distanceToPoint = distance(closestPoint, pointPosition);
	functioncall	$const28 243 	%line{215} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:28
#   return abs(a - b);
	sub		$tmp96 ___509_closestPoint ___514_pointPosition 	%line{28} %argrw{"wrr"}
	abs		___514_distanceToPoint $tmp96 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:216
#     if (distanceToPoint < minDistance) {
	lt		$tmp97 ___514_distanceToPoint ___509_minDistance 	%line{216} %argrw{"wrr"}
	if		$tmp97 247 247 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:217
#       minDistance = distanceToPoint;
	assign		___509_minDistance ___514_distanceToPoint 	%line{217} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:218
#       closestPointToClosestPoint = pointPosition;
	assign		___509_closestPointToClosestPoint ___514_pointPosition 	%line{218} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:209
#   for (int i = -1; i <= 1; i++) {
	assign		$tmp98 ___513_i 	%line{209} %argrw{"wr"}
	add		___513_i ___513_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:221
#   outRadius = distance(closestPointToClosestPoint, closestPoint) / 2.0;
	functioncall	$const28 252 	%line{221} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:28
#   return abs(a - b);
	sub		$tmp100 ___509_closestPointToClosestPoint ___509_closestPoint 	%line{28} %argrw{"wrr"}
	abs		$tmp99 $tmp100 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:221
#   outRadius = distance(closestPointToClosestPoint, closestPoint) / 2.0;
	div		Radius $tmp99 $const4 	%line{221} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:947
#       error("Unknown feature!");
	error		$const31 	%line{947} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:949
#     WOut = (Scale != 0.0) ? WOut / Scale : 0.0;
	neq		$tmp101 Scale $const1 	%line{949} %argrw{"wrr"}
	if		$tmp101 257 258 	%argrw{"r"}
	div		WOut WOut Scale 	%argrw{"wrr"}
	assign		WOut $const1 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:951
#   else if (dimensions == "2D") {
	eq		$tmp102 dimensions $const32 	%line{951} %argrw{"wrr"}
	if		$tmp102 900 2746 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:952
#     vector2 coord2D = vector2(coord[0], coord[1]);
	compref		___707_coord2D.x coord $const12 	%line{952} %argrw{"wrr"}
	compref		___707_coord2D.y coord $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:954
#     if (feature == "f1") {
	eq		$tmp103 feature $const7 	%line{954} %argrw{"wrr"}
	if		$tmp103 372 889 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:955
#       voronoi_f1_2d(coord2D, Exponent, randomness, metric, Distance, Color, outPosition2D);
	functioncall	$const33 372 	%line{955} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:253
#   vector2 cellPosition = floor(coord);
	functioncall	$const34 268 	%line{253} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:157
#     return vector2 (floor(a.x), floor(a.y));
	floor		___523_cellPosition.x ___707_coord2D.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{157} %argrw{"wr"}
	floor		___523_cellPosition.y ___707_coord2D.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 271 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___523_localPosition.x ___707_coord2D.x ___523_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		___523_localPosition.y ___707_coord2D.y ___523_cellPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:256
#   float minDistance = 8.0;
	assign		___523_minDistance $const9 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{256} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:258
#   for (int j = -1; j <= 1; j++) {
	for		$tmp105 274 276 353 355 	%line{258} %argrw{"r"}
	assign		___524_j $const10 	%argrw{"wr"}
	le		$tmp104 ___524_j $const11 	%argrw{"wrr"}
	neq		$tmp105 $tmp104 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:259
#     for (int i = -1; i <= 1; i++) {
	for		$tmp107 278 280 351 353 	%line{259} %argrw{"r"}
	assign		___526_i $const10 	%argrw{"wr"}
	le		$tmp106 ___526_i $const11 	%argrw{"wrr"}
	neq		$tmp107 $tmp106 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:260
#       vector2 cellOffset = vector2(i, j);
	assign		___527_cellOffset.x ___526_i 	%line{260} %argrw{"wr"}
	assign		___527_cellOffset.y ___524_j 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 285 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp110.x ___523_cellPosition.x ___527_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp110.y ___523_cellPosition.y ___527_cellOffset.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:262
#                               hash_vector2_to_vector2(cellPosition + cellOffset) * randomness;
	functioncall	$const37 291 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{262} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const16 288 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp109.x $tmp110.x $tmp110.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp111 $tmp110.x $tmp110.y $const2 	%line{33} %argrw{"wrrr"}
	functioncall	$const38 291 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp109.y $tmp111 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 297 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp112.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp112.y randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 297 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp108.x $tmp109.x $tmp112.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp108.y $tmp109.y $tmp112.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 300 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___527_pointPosition.x ___527_cellOffset.x $tmp108.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		___527_pointPosition.y ___527_cellOffset.y $tmp108.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:263
#       float distanceToPoint = voronoi_distance(pointPosition, localPosition, metric, exponent);
	functioncall	$const14 344 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{263} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:228
#   if (metric == "euclidean") {
	eq		$tmp113 metric $const40 	%line{228} %argrw{"wrr"}
	if		$tmp113 314 344 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:229
#     return distance(a, b);
	functioncall	$const28 313 	%line{229} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 307 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp114.x ___527_pointPosition.x ___523_localPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp114.y ___527_pointPosition.y ___523_localPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:33
#   return length(a - b);
	functioncall	$const41 313 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const42 313 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{192} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp115 $tmp114.x $tmp114.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp116 $tmp114.y $tmp114.y 	%argrw{"wrr"}
	add		$tmp117 $tmp115 $tmp116 	%argrw{"wrr"}
	sqrt		___527_distanceToPoint $tmp117 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:229
#     return distance(a, b);
	return	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{229}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:231
#   else if (metric == "manhattan") {
	eq		$tmp118 metric $const43 	%line{231} %argrw{"wrr"}
	if		$tmp118 322 344 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:232
#     return abs(a.x - b.x) + abs(a.y - b.y);
	sub		$tmp120 ___527_pointPosition.x ___523_localPosition.x 	%line{232} %argrw{"wrr"}
	abs		$tmp119 $tmp120 	%argrw{"wr"}
	sub		$tmp122 ___527_pointPosition.y ___523_localPosition.y 	%argrw{"wrr"}
	abs		$tmp121 $tmp122 	%argrw{"wr"}
	add		___527_distanceToPoint $tmp119 $tmp121 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:234
#   else if (metric == "chebychev") {
	eq		$tmp123 metric $const44 	%line{234} %argrw{"wrr"}
	if		$tmp123 330 344 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:235
#     return max(abs(a.x - b.x), abs(a.y - b.y));
	sub		$tmp125 ___527_pointPosition.x ___523_localPosition.x 	%line{235} %argrw{"wrr"}
	abs		$tmp124 $tmp125 	%argrw{"wr"}
	sub		$tmp127 ___527_pointPosition.y ___523_localPosition.y 	%argrw{"wrr"}
	abs		$tmp126 $tmp127 	%argrw{"wr"}
	max		___527_distanceToPoint $tmp124 $tmp126 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:237
#   else if (metric == "minkowski") {
	eq		$tmp128 metric $const45 	%line{237} %argrw{"wrr"}
	if		$tmp128 342 344 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:238
#     return pow(pow(abs(a.x - b.x), exponent) + pow(abs(a.y - b.y), exponent), 1.0 / exponent);
	sub		$tmp131 ___527_pointPosition.x ___523_localPosition.x 	%line{238} %argrw{"wrr"}
	abs		$tmp130 $tmp131 	%argrw{"wr"}
	pow		$tmp129 $tmp130 Exponent 	%argrw{"wrr"}
	sub		$tmp134 ___527_pointPosition.y ___523_localPosition.y 	%argrw{"wrr"}
	abs		$tmp133 $tmp134 	%argrw{"wr"}
	pow		$tmp132 $tmp133 Exponent 	%argrw{"wrr"}
	add		$tmp135 $tmp129 $tmp132 	%argrw{"wrr"}
	div		$tmp136 $const2 Exponent 	%argrw{"wrr"}
	pow		___527_distanceToPoint $tmp135 $tmp136 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:241
#     return 0.0;
	assign		___527_distanceToPoint $const1 	%line{241} %argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:264
#       if (distanceToPoint < minDistance) {
	lt		$tmp137 ___527_distanceToPoint ___523_minDistance 	%line{264} %argrw{"wrr"}
	if		$tmp137 351 351 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:265
#         targetOffset = cellOffset;
	assign		___523_targetOffset.x ___527_cellOffset.x 	%line{265} %argrw{"wr"}
	assign		___523_targetOffset.y ___527_cellOffset.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:266
#         minDistance = distanceToPoint;
	assign		___523_minDistance ___527_distanceToPoint 	%line{266} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:267
#         targetPosition = pointPosition;
	assign		___523_targetPosition.x ___527_pointPosition.x 	%line{267} %argrw{"wr"}
	assign		___523_targetPosition.y ___527_pointPosition.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:259
#     for (int i = -1; i <= 1; i++) {
	assign		$tmp138 ___526_i 	%line{259} %argrw{"wr"}
	add		___526_i ___526_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:258
#   for (int j = -1; j <= 1; j++) {
	assign		$tmp139 ___524_j 	%line{258} %argrw{"wr"}
	add		___524_j ___524_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:271
#   outDistance = minDistance;
	assign		Distance ___523_minDistance 	%line{271} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 359 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp140.x ___523_cellPosition.x ___523_targetOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp140.y ___523_cellPosition.y ___523_targetOffset.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:272
#   outColor = hash_vector2_to_color(cellPosition + targetOffset);
	functioncall	$const46 369 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{272} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:62
#   return color(hash_vector2_to_float(k),
	functioncall	$const16 362 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{62} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp141 $tmp140.x $tmp140.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:63
#                hash_vector3_to_float(vector3(k.x, k.y, 1.0)),
	point		$tmp143 $tmp140.x $tmp140.y $const2 	%line{63} %argrw{"wrrr"}
	functioncall	$const38 365 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp142 $tmp143 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:64
#                hash_vector3_to_float(vector3(k.x, k.y, 2.0)));
	point		$tmp145 $tmp140.x $tmp140.y $const4 	%line{64} %argrw{"wrrr"}
	functioncall	$const38 368 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp144 $tmp145 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:62
#   return color(hash_vector2_to_float(k),
	color		Color $tmp141 $tmp142 $tmp144 	%line{62} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 372 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___707_outPosition2D.x ___523_targetPosition.x ___523_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		___707_outPosition2D.y ___523_targetPosition.y ___523_cellPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:957
#     else if (feature == "smooth_f1") {
	eq		$tmp146 feature $const17 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{957} %argrw{"wrr"}
	if		$tmp146 503 889 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:958
#       voronoi_smooth_f1_2d(
	functioncall	$const47 503 	%line{958} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:285
#   vector2 cellPosition = floor(coord);
	functioncall	$const34 378 	%line{285} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:157
#     return vector2 (floor(a.x), floor(a.y));
	floor		___529_cellPosition.x ___707_coord2D.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{157} %argrw{"wr"}
	floor		___529_cellPosition.y ___707_coord2D.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 381 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___529_localPosition.x ___707_coord2D.x ___529_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		___529_localPosition.y ___707_coord2D.y ___529_cellPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:288
#   float smoothDistance = 8.0;
	assign		___529_smoothDistance $const9 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{288} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:289
#   color smoothColor = color(0.0);
	assign		___529_smoothColor $const19 	%line{289} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:290
#   vector2 smoothPosition = vector2(0.0, 0.0);
	assign		___529_smoothPosition.x $const1 	%line{290} %argrw{"wr"}
	assign		___529_smoothPosition.y $const1 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:291
#   for (int j = -2; j <= 2; j++) {
	for		$tmp148 387 389 496 498 	%line{291} %argrw{"r"}
	assign		___530_j $const20 	%argrw{"wr"}
	le		$tmp147 ___530_j $const21 	%argrw{"wrr"}
	neq		$tmp148 $tmp147 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:292
#     for (int i = -2; i <= 2; i++) {
	for		$tmp150 391 393 494 496 	%line{292} %argrw{"r"}
	assign		___532_i $const20 	%argrw{"wr"}
	le		$tmp149 ___532_i $const21 	%argrw{"wrr"}
	neq		$tmp150 $tmp149 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:293
#       vector2 cellOffset = vector2(i, j);
	assign		___533_cellOffset.x ___532_i 	%line{293} %argrw{"wr"}
	assign		___533_cellOffset.y ___530_j 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 398 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp153.x ___529_cellPosition.x ___533_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp153.y ___529_cellPosition.y ___533_cellOffset.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:295
#                               hash_vector2_to_vector2(cellPosition + cellOffset) * randomness;
	functioncall	$const37 404 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{295} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const16 401 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp152.x $tmp153.x $tmp153.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp154 $tmp153.x $tmp153.y $const2 	%line{33} %argrw{"wrrr"}
	functioncall	$const38 404 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp152.y $tmp154 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 410 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp155.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp155.y randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 410 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp151.x $tmp152.x $tmp155.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp151.y $tmp152.y $tmp155.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 413 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___533_pointPosition.x ___533_cellOffset.x $tmp151.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		___533_pointPosition.y ___533_cellOffset.y $tmp151.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:296
#       float distanceToPoint = voronoi_distance(pointPosition, localPosition, metric, exponent);
	functioncall	$const14 457 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{296} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:228
#   if (metric == "euclidean") {
	eq		$tmp156 metric $const40 	%line{228} %argrw{"wrr"}
	if		$tmp156 427 457 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:229
#     return distance(a, b);
	functioncall	$const28 426 	%line{229} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 420 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp157.x ___533_pointPosition.x ___529_localPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp157.y ___533_pointPosition.y ___529_localPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:33
#   return length(a - b);
	functioncall	$const41 426 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const42 426 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{192} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp158 $tmp157.x $tmp157.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp159 $tmp157.y $tmp157.y 	%argrw{"wrr"}
	add		$tmp160 $tmp158 $tmp159 	%argrw{"wrr"}
	sqrt		___533_distanceToPoint $tmp160 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:229
#     return distance(a, b);
	return	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{229}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:231
#   else if (metric == "manhattan") {
	eq		$tmp161 metric $const43 	%line{231} %argrw{"wrr"}
	if		$tmp161 435 457 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:232
#     return abs(a.x - b.x) + abs(a.y - b.y);
	sub		$tmp163 ___533_pointPosition.x ___529_localPosition.x 	%line{232} %argrw{"wrr"}
	abs		$tmp162 $tmp163 	%argrw{"wr"}
	sub		$tmp165 ___533_pointPosition.y ___529_localPosition.y 	%argrw{"wrr"}
	abs		$tmp164 $tmp165 	%argrw{"wr"}
	add		___533_distanceToPoint $tmp162 $tmp164 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:234
#   else if (metric == "chebychev") {
	eq		$tmp166 metric $const44 	%line{234} %argrw{"wrr"}
	if		$tmp166 443 457 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:235
#     return max(abs(a.x - b.x), abs(a.y - b.y));
	sub		$tmp168 ___533_pointPosition.x ___529_localPosition.x 	%line{235} %argrw{"wrr"}
	abs		$tmp167 $tmp168 	%argrw{"wr"}
	sub		$tmp170 ___533_pointPosition.y ___529_localPosition.y 	%argrw{"wrr"}
	abs		$tmp169 $tmp170 	%argrw{"wr"}
	max		___533_distanceToPoint $tmp167 $tmp169 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:237
#   else if (metric == "minkowski") {
	eq		$tmp171 metric $const45 	%line{237} %argrw{"wrr"}
	if		$tmp171 455 457 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:238
#     return pow(pow(abs(a.x - b.x), exponent) + pow(abs(a.y - b.y), exponent), 1.0 / exponent);
	sub		$tmp174 ___533_pointPosition.x ___529_localPosition.x 	%line{238} %argrw{"wrr"}
	abs		$tmp173 $tmp174 	%argrw{"wr"}
	pow		$tmp172 $tmp173 Exponent 	%argrw{"wrr"}
	sub		$tmp177 ___533_pointPosition.y ___529_localPosition.y 	%argrw{"wrr"}
	abs		$tmp176 $tmp177 	%argrw{"wr"}
	pow		$tmp175 $tmp176 Exponent 	%argrw{"wrr"}
	add		$tmp178 $tmp172 $tmp175 	%argrw{"wrr"}
	div		$tmp179 $const2 Exponent 	%argrw{"wrr"}
	pow		___533_distanceToPoint $tmp178 $tmp179 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:241
#     return 0.0;
	assign		___533_distanceToPoint $const1 	%line{241} %argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:297
#       float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (smoothDistance - distanceToPoint) / smoothness);
	sub		$tmp180 ___529_smoothDistance ___533_distanceToPoint 	%line{297} %argrw{"wrr"}
	mul		$tmp181 $const5 $tmp180 	%argrw{"wrr"}
	div		$tmp182 $tmp181 smoothness 	%argrw{"wrr"}
	add		$tmp183 $const5 $tmp182 	%argrw{"wrr"}
	smoothstep	___533_h $const1 $const2 $tmp183 	%argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:298
#       float correctionFactor = smoothness * h * (1.0 - h);
	mul		$tmp184 smoothness ___533_h 	%line{298} %argrw{"wrr"}
	sub		$tmp185 $const2 ___533_h 	%argrw{"wrr"}
	mul		___533_correctionFactor $tmp184 $tmp185 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:299
#       smoothDistance = mix(smoothDistance, distanceToPoint, h) - correctionFactor;
	mix		$tmp186 ___529_smoothDistance ___533_distanceToPoint ___533_h 	%line{299} %argrw{"wrrr"}
	sub		___529_smoothDistance $tmp186 ___533_correctionFactor 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:300
#       correctionFactor /= 1.0 + 3.0 * smoothness;
	mul		$tmp187 $const22 smoothness 	%line{300} %argrw{"wrr"}
	add		$tmp188 $const2 $tmp187 	%argrw{"wrr"}
	div		___533_correctionFactor ___533_correctionFactor $tmp188 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 473 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp189.x ___529_cellPosition.x ___533_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp189.y ___529_cellPosition.y ___533_cellOffset.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:301
#       color cellColor = hash_vector2_to_color(cellPosition + cellOffset);
	functioncall	$const46 483 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{301} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:62
#   return color(hash_vector2_to_float(k),
	functioncall	$const16 476 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{62} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp190 $tmp189.x $tmp189.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:63
#                hash_vector3_to_float(vector3(k.x, k.y, 1.0)),
	point		$tmp192 $tmp189.x $tmp189.y $const2 	%line{63} %argrw{"wrrr"}
	functioncall	$const38 479 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp191 $tmp192 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:64
#                hash_vector3_to_float(vector3(k.x, k.y, 2.0)));
	point		$tmp194 $tmp189.x $tmp189.y $const4 	%line{64} %argrw{"wrrr"}
	functioncall	$const38 482 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp193 $tmp194 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:62
#   return color(hash_vector2_to_float(k),
	color		___533_cellColor $tmp190 $tmp191 $tmp193 	%line{62} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:302
#       smoothColor = mix(smoothColor, cellColor, h) - correctionFactor;
	mix		$tmp195 ___529_smoothColor ___533_cellColor ___533_h 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{302} %argrw{"wrrr"}
	sub		___529_smoothColor $tmp195 ___533_correctionFactor 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:303
#       smoothPosition = mix(smoothPosition, pointPosition, h) - correctionFactor;
	functioncall	$const48 488 	%line{303} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:182
#     return vector2 (mix(a.x, b.x, x), mix(a.y, b.y, x));
	mix		$tmp196.x ___529_smoothPosition.x ___533_pointPosition.x ___533_h 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{182} %argrw{"wrrr"}
	mix		$tmp196.y ___529_smoothPosition.y ___533_pointPosition.y ___533_h 	%argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 494 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:63
#     return a - vector2(b, b);
	assign		$tmp197.x ___533_correctionFactor 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{63} %argrw{"wr"}
	assign		$tmp197.y ___533_correctionFactor 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 494 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___529_smoothPosition.x $tmp196.x $tmp197.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		___529_smoothPosition.y $tmp196.y $tmp197.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:292
#     for (int i = -2; i <= 2; i++) {
	assign		$tmp198 ___532_i 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{292} %argrw{"wr"}
	add		___532_i ___532_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:291
#   for (int j = -2; j <= 2; j++) {
	assign		$tmp199 ___530_j 	%line{291} %argrw{"wr"}
	add		___530_j ___530_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:306
#   outDistance = smoothDistance;
	assign		Distance ___529_smoothDistance 	%line{306} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:307
#   outColor = smoothColor;
	assign		Color ___529_smoothColor 	%line{307} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 503 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___707_outPosition2D.x ___529_cellPosition.x ___529_smoothPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		___707_outPosition2D.y ___529_cellPosition.y ___529_smoothPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:961
#     else if (feature == "f2") {
	eq		$tmp200 feature $const23 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{961} %argrw{"wrr"}
	if		$tmp200 630 889 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:962
#       voronoi_f2_2d(coord2D, Exponent, randomness, metric, Distance, Color, outPosition2D);
	functioncall	$const49 630 	%line{962} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:319
#   vector2 cellPosition = floor(coord);
	functioncall	$const34 509 	%line{319} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:157
#     return vector2 (floor(a.x), floor(a.y));
	floor		___534_cellPosition.x ___707_coord2D.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{157} %argrw{"wr"}
	floor		___534_cellPosition.y ___707_coord2D.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 512 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___534_localPosition.x ___707_coord2D.x ___534_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		___534_localPosition.y ___707_coord2D.y ___534_cellPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:322
#   float distanceF1 = 8.0;
	assign		___534_distanceF1 $const9 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{322} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:323
#   float distanceF2 = 8.0;
	assign		___534_distanceF2 $const9 	%line{323} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:324
#   vector2 offsetF1 = vector2(0.0, 0.0);
	assign		___534_offsetF1.x $const1 	%line{324} %argrw{"wr"}
	assign		___534_offsetF1.y $const1 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:325
#   vector2 positionF1 = vector2(0.0, 0.0);
	assign		___534_positionF1.x $const1 	%line{325} %argrw{"wr"}
	assign		___534_positionF1.y $const1 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:327
#   for (int j = -1; j <= 1; j++) {
	for		$tmp202 520 522 611 613 	%line{327} %argrw{"r"}
	assign		___535_j $const10 	%argrw{"wr"}
	le		$tmp201 ___535_j $const11 	%argrw{"wrr"}
	neq		$tmp202 $tmp201 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:328
#     for (int i = -1; i <= 1; i++) {
	for		$tmp204 524 526 609 611 	%line{328} %argrw{"r"}
	assign		___537_i $const10 	%argrw{"wr"}
	le		$tmp203 ___537_i $const11 	%argrw{"wrr"}
	neq		$tmp204 $tmp203 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:329
#       vector2 cellOffset = vector2(i, j);
	assign		___538_cellOffset.x ___537_i 	%line{329} %argrw{"wr"}
	assign		___538_cellOffset.y ___535_j 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 531 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp207.x ___534_cellPosition.x ___538_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp207.y ___534_cellPosition.y ___538_cellOffset.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:331
#                               hash_vector2_to_vector2(cellPosition + cellOffset) * randomness;
	functioncall	$const37 537 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{331} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const16 534 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp206.x $tmp207.x $tmp207.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp208 $tmp207.x $tmp207.y $const2 	%line{33} %argrw{"wrrr"}
	functioncall	$const38 537 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp206.y $tmp208 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 543 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp209.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp209.y randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 543 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp205.x $tmp206.x $tmp209.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp205.y $tmp206.y $tmp209.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 546 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___538_pointPosition.x ___538_cellOffset.x $tmp205.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		___538_pointPosition.y ___538_cellOffset.y $tmp205.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:332
#       float distanceToPoint = voronoi_distance(pointPosition, localPosition, metric, exponent);
	functioncall	$const14 590 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{332} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:228
#   if (metric == "euclidean") {
	eq		$tmp210 metric $const40 	%line{228} %argrw{"wrr"}
	if		$tmp210 560 590 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:229
#     return distance(a, b);
	functioncall	$const28 559 	%line{229} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 553 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp211.x ___538_pointPosition.x ___534_localPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp211.y ___538_pointPosition.y ___534_localPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:33
#   return length(a - b);
	functioncall	$const41 559 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const42 559 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{192} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp212 $tmp211.x $tmp211.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp213 $tmp211.y $tmp211.y 	%argrw{"wrr"}
	add		$tmp214 $tmp212 $tmp213 	%argrw{"wrr"}
	sqrt		___538_distanceToPoint $tmp214 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:229
#     return distance(a, b);
	return	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{229}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:231
#   else if (metric == "manhattan") {
	eq		$tmp215 metric $const43 	%line{231} %argrw{"wrr"}
	if		$tmp215 568 590 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:232
#     return abs(a.x - b.x) + abs(a.y - b.y);
	sub		$tmp217 ___538_pointPosition.x ___534_localPosition.x 	%line{232} %argrw{"wrr"}
	abs		$tmp216 $tmp217 	%argrw{"wr"}
	sub		$tmp219 ___538_pointPosition.y ___534_localPosition.y 	%argrw{"wrr"}
	abs		$tmp218 $tmp219 	%argrw{"wr"}
	add		___538_distanceToPoint $tmp216 $tmp218 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:234
#   else if (metric == "chebychev") {
	eq		$tmp220 metric $const44 	%line{234} %argrw{"wrr"}
	if		$tmp220 576 590 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:235
#     return max(abs(a.x - b.x), abs(a.y - b.y));
	sub		$tmp222 ___538_pointPosition.x ___534_localPosition.x 	%line{235} %argrw{"wrr"}
	abs		$tmp221 $tmp222 	%argrw{"wr"}
	sub		$tmp224 ___538_pointPosition.y ___534_localPosition.y 	%argrw{"wrr"}
	abs		$tmp223 $tmp224 	%argrw{"wr"}
	max		___538_distanceToPoint $tmp221 $tmp223 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:237
#   else if (metric == "minkowski") {
	eq		$tmp225 metric $const45 	%line{237} %argrw{"wrr"}
	if		$tmp225 588 590 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:238
#     return pow(pow(abs(a.x - b.x), exponent) + pow(abs(a.y - b.y), exponent), 1.0 / exponent);
	sub		$tmp228 ___538_pointPosition.x ___534_localPosition.x 	%line{238} %argrw{"wrr"}
	abs		$tmp227 $tmp228 	%argrw{"wr"}
	pow		$tmp226 $tmp227 Exponent 	%argrw{"wrr"}
	sub		$tmp231 ___538_pointPosition.y ___534_localPosition.y 	%argrw{"wrr"}
	abs		$tmp230 $tmp231 	%argrw{"wr"}
	pow		$tmp229 $tmp230 Exponent 	%argrw{"wrr"}
	add		$tmp232 $tmp226 $tmp229 	%argrw{"wrr"}
	div		$tmp233 $const2 Exponent 	%argrw{"wrr"}
	pow		___538_distanceToPoint $tmp232 $tmp233 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:241
#     return 0.0;
	assign		___538_distanceToPoint $const1 	%line{241} %argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:333
#       if (distanceToPoint < distanceF1) {
	lt		$tmp234 ___538_distanceToPoint ___534_distanceF1 	%line{333} %argrw{"wrr"}
	if		$tmp234 602 609 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:334
#         distanceF2 = distanceF1;
	assign		___534_distanceF2 ___534_distanceF1 	%line{334} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:335
#         distanceF1 = distanceToPoint;
	assign		___534_distanceF1 ___538_distanceToPoint 	%line{335} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:336
#         offsetF2 = offsetF1;
	assign		___534_offsetF2.x ___534_offsetF1.x 	%line{336} %argrw{"wr"}
	assign		___534_offsetF2.y ___534_offsetF1.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:337
#         offsetF1 = cellOffset;
	assign		___534_offsetF1.x ___538_cellOffset.x 	%line{337} %argrw{"wr"}
	assign		___534_offsetF1.y ___538_cellOffset.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:338
#         positionF2 = positionF1;
	assign		___534_positionF2.x ___534_positionF1.x 	%line{338} %argrw{"wr"}
	assign		___534_positionF2.y ___534_positionF1.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:339
#         positionF1 = pointPosition;
	assign		___534_positionF1.x ___538_pointPosition.x 	%line{339} %argrw{"wr"}
	assign		___534_positionF1.y ___538_pointPosition.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:341
#       else if (distanceToPoint < distanceF2) {
	lt		$tmp235 ___538_distanceToPoint ___534_distanceF2 	%line{341} %argrw{"wrr"}
	if		$tmp235 609 609 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:342
#         distanceF2 = distanceToPoint;
	assign		___534_distanceF2 ___538_distanceToPoint 	%line{342} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:343
#         offsetF2 = cellOffset;
	assign		___534_offsetF2.x ___538_cellOffset.x 	%line{343} %argrw{"wr"}
	assign		___534_offsetF2.y ___538_cellOffset.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:344
#         positionF2 = pointPosition;
	assign		___534_positionF2.x ___538_pointPosition.x 	%line{344} %argrw{"wr"}
	assign		___534_positionF2.y ___538_pointPosition.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:328
#     for (int i = -1; i <= 1; i++) {
	assign		$tmp236 ___537_i 	%line{328} %argrw{"wr"}
	add		___537_i ___537_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:327
#   for (int j = -1; j <= 1; j++) {
	assign		$tmp237 ___535_j 	%line{327} %argrw{"wr"}
	add		___535_j ___535_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:348
#   outDistance = distanceF2;
	assign		Distance ___534_distanceF2 	%line{348} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 617 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp238.x ___534_cellPosition.x ___534_offsetF2.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp238.y ___534_cellPosition.y ___534_offsetF2.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:349
#   outColor = hash_vector2_to_color(cellPosition + offsetF2);
	functioncall	$const46 627 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{349} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:62
#   return color(hash_vector2_to_float(k),
	functioncall	$const16 620 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{62} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp239 $tmp238.x $tmp238.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:63
#                hash_vector3_to_float(vector3(k.x, k.y, 1.0)),
	point		$tmp241 $tmp238.x $tmp238.y $const2 	%line{63} %argrw{"wrrr"}
	functioncall	$const38 623 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp240 $tmp241 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:64
#                hash_vector3_to_float(vector3(k.x, k.y, 2.0)));
	point		$tmp243 $tmp238.x $tmp238.y $const4 	%line{64} %argrw{"wrrr"}
	functioncall	$const38 626 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp242 $tmp243 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:62
#   return color(hash_vector2_to_float(k),
	color		Color $tmp239 $tmp240 $tmp242 	%line{62} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 630 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___707_outPosition2D.x ___534_positionF2.x ___534_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		___707_outPosition2D.y ___534_positionF2.y ___534_cellPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:964
#     else if (feature == "distance_to_edge") {
	eq		$tmp244 feature $const25 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{964} %argrw{"wrr"}
	if		$tmp244 759 889 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:965
#       voronoi_distance_to_edge_2d(coord2D, randomness, Distance);
	functioncall	$const50 759 	%line{965} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:355
#   vector2 cellPosition = floor(coord);
	functioncall	$const34 636 	%line{355} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:157
#     return vector2 (floor(a.x), floor(a.y));
	floor		___541_cellPosition.x ___707_coord2D.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{157} %argrw{"wr"}
	floor		___541_cellPosition.y ___707_coord2D.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 639 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___541_localPosition.x ___707_coord2D.x ___541_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		___541_localPosition.y ___707_coord2D.y ___541_cellPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:359
#   float minDistance = 8.0;
	assign		___541_minDistance $const9 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{359} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:360
#   for (int j = -1; j <= 1; j++) {
	for		$tmp246 642 644 682 684 	%line{360} %argrw{"r"}
	assign		___542_j $const10 	%argrw{"wr"}
	le		$tmp245 ___542_j $const11 	%argrw{"wrr"}
	neq		$tmp246 $tmp245 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:361
#     for (int i = -1; i <= 1; i++) {
	for		$tmp248 646 648 680 682 	%line{361} %argrw{"r"}
	assign		___544_i $const10 	%argrw{"wr"}
	le		$tmp247 ___544_i $const11 	%argrw{"wrr"}
	neq		$tmp248 $tmp247 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:362
#       vector2 cellOffset = vector2(i, j);
	assign		___545_cellOffset.x ___544_i 	%line{362} %argrw{"wr"}
	assign		___545_cellOffset.y ___542_j 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 653 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp252.x ___541_cellPosition.x ___545_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp252.y ___541_cellPosition.y ___545_cellOffset.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:364
#                               hash_vector2_to_vector2(cellPosition + cellOffset) * randomness -
	functioncall	$const37 659 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{364} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const16 656 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp251.x $tmp252.x $tmp252.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp253 $tmp252.x $tmp252.y $const2 	%line{33} %argrw{"wrrr"}
	functioncall	$const38 659 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp251.y $tmp253 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 665 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp254.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp254.y randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 665 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp250.x $tmp251.x $tmp254.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp250.y $tmp251.y $tmp254.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 668 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp249.x ___545_cellOffset.x $tmp250.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp249.y ___545_cellOffset.y $tmp250.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 671 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___545_vectorToPoint.x $tmp249.x ___541_localPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		___545_vectorToPoint.y $tmp249.y ___541_localPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:366
#       float distanceToPoint = dot(vectorToPoint, vectorToPoint);
	functioncall	$const51 675 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{366} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:187
#     return (a.x * b.x + a.y * b.y);
	mul		$tmp255 ___545_vectorToPoint.x ___545_vectorToPoint.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{187} %argrw{"wrr"}
	mul		$tmp256 ___545_vectorToPoint.y ___545_vectorToPoint.y 	%argrw{"wrr"}
	add		___545_distanceToPoint $tmp255 $tmp256 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:367
#       if (distanceToPoint < minDistance) {
	lt		$tmp257 ___545_distanceToPoint ___541_minDistance 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{367} %argrw{"wrr"}
	if		$tmp257 680 680 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:368
#         minDistance = distanceToPoint;
	assign		___541_minDistance ___545_distanceToPoint 	%line{368} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:369
#         vectorToClosest = vectorToPoint;
	assign		___541_vectorToClosest.x ___545_vectorToPoint.x 	%line{369} %argrw{"wr"}
	assign		___541_vectorToClosest.y ___545_vectorToPoint.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:361
#     for (int i = -1; i <= 1; i++) {
	assign		$tmp258 ___544_i 	%line{361} %argrw{"wr"}
	add		___544_i ___544_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:360
#   for (int j = -1; j <= 1; j++) {
	assign		$tmp259 ___542_j 	%line{360} %argrw{"wr"}
	add		___542_j ___542_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:374
#   minDistance = 8.0;
	assign		___541_minDistance $const9 	%line{374} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:375
#   for (int j = -1; j <= 1; j++) {
	for		$tmp261 687 689 756 758 	%line{375} %argrw{"r"}
	assign		___547_j $const10 	%argrw{"wr"}
	le		$tmp260 ___547_j $const11 	%argrw{"wrr"}
	neq		$tmp261 $tmp260 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:376
#     for (int i = -1; i <= 1; i++) {
	for		$tmp263 691 693 754 756 	%line{376} %argrw{"r"}
	assign		___549_i $const10 	%argrw{"wr"}
	le		$tmp262 ___549_i $const11 	%argrw{"wrr"}
	neq		$tmp263 $tmp262 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:377
#       vector2 cellOffset = vector2(i, j);
	assign		___550_cellOffset.x ___549_i 	%line{377} %argrw{"wr"}
	assign		___550_cellOffset.y ___547_j 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 698 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp267.x ___541_cellPosition.x ___550_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp267.y ___541_cellPosition.y ___550_cellOffset.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:379
#                               hash_vector2_to_vector2(cellPosition + cellOffset) * randomness -
	functioncall	$const37 704 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{379} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const16 701 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp266.x $tmp267.x $tmp267.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp268 $tmp267.x $tmp267.y $const2 	%line{33} %argrw{"wrrr"}
	functioncall	$const38 704 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp266.y $tmp268 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 710 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp269.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp269.y randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 710 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp265.x $tmp266.x $tmp269.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp265.y $tmp266.y $tmp269.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 713 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp264.x ___550_cellOffset.x $tmp265.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp264.y ___550_cellOffset.y $tmp265.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 716 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___550_vectorToPoint.x $tmp264.x ___541_localPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		___550_vectorToPoint.y $tmp264.y ___541_localPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 719 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___550_perpendicularToEdge.x ___550_vectorToPoint.x ___541_vectorToClosest.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		___550_perpendicularToEdge.y ___550_vectorToPoint.y ___541_vectorToClosest.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:382
#       if (dot(perpendicularToEdge, perpendicularToEdge) > 0.0001) {
	functioncall	$const51 723 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{382} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:187
#     return (a.x * b.x + a.y * b.y);
	mul		$tmp271 ___550_perpendicularToEdge.x ___550_perpendicularToEdge.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{187} %argrw{"wrr"}
	mul		$tmp272 ___550_perpendicularToEdge.y ___550_perpendicularToEdge.y 	%argrw{"wrr"}
	add		$tmp270 $tmp271 $tmp272 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:382
#       if (dot(perpendicularToEdge, perpendicularToEdge) > 0.0001) {
	gt		$tmp273 $tmp270 $const52 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{382} %argrw{"wrr"}
	if		$tmp273 754 754 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 728 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp275.x ___541_vectorToClosest.x ___550_vectorToPoint.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp275.y ___541_vectorToClosest.y ___550_vectorToPoint.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const53 735 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:114
#     float b_inv = 1/b;
	div		___386_b_inv $const2 $const4 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{114} %argrw{"wrr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:115
#     return a * vector2(b_inv, b_inv);
	assign		$tmp276.x ___386_b_inv 	%line{115} %argrw{"wr"}
	assign		$tmp276.y ___386_b_inv 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 735 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp274.x $tmp275.x $tmp276.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp274.y $tmp275.y $tmp276.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:384
#                                    normalize(perpendicularToEdge));
	functioncall	$const54 749 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{384} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:231
#     return a / length(a);
	functioncall	$const41 742 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{231} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const42 742 	%line{192} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp279 ___550_perpendicularToEdge.x ___550_perpendicularToEdge.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp280 ___550_perpendicularToEdge.y ___550_perpendicularToEdge.y 	%argrw{"wrr"}
	add		$tmp281 $tmp279 $tmp280 	%argrw{"wrr"}
	sqrt		$tmp278 $tmp281 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const53 749 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:114
#     float b_inv = 1/b;
	div		___386_b_inv $const2 $tmp278 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{114} %argrw{"wrr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:115
#     return a * vector2(b_inv, b_inv);
	assign		$tmp282.x ___386_b_inv 	%line{115} %argrw{"wr"}
	assign		$tmp282.y ___386_b_inv 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 749 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp277.x ___550_perpendicularToEdge.x $tmp282.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp277.y ___550_perpendicularToEdge.y $tmp282.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:383
#         float distanceToEdge = dot((vectorToClosest + vectorToPoint) / 2.0,
	functioncall	$const51 753 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{383} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:187
#     return (a.x * b.x + a.y * b.y);
	mul		$tmp283 $tmp274.x $tmp277.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{187} %argrw{"wrr"}
	mul		$tmp284 $tmp274.y $tmp277.y 	%argrw{"wrr"}
	add		___551_distanceToEdge $tmp283 $tmp284 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:385
#         minDistance = min(minDistance, distanceToEdge);
	min		___541_minDistance ___541_minDistance ___551_distanceToEdge 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{385} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:376
#     for (int i = -1; i <= 1; i++) {
	assign		$tmp285 ___549_i 	%line{376} %argrw{"wr"}
	add		___549_i ___549_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:375
#   for (int j = -1; j <= 1; j++) {
	assign		$tmp286 ___547_j 	%line{375} %argrw{"wr"}
	add		___547_j ___547_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:389
#   outDistance = minDistance;
	assign		Distance ___541_minDistance 	%line{389} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:967
#     else if (feature == "n_sphere_radius") {
	eq		$tmp287 feature $const29 	%line{967} %argrw{"wrr"}
	if		$tmp287 888 889 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:968
#       voronoi_n_sphere_radius_2d(coord2D, randomness, Radius);
	functioncall	$const55 888 	%line{968} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:394
#   vector2 cellPosition = floor(coord);
	functioncall	$const34 765 	%line{394} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:157
#     return vector2 (floor(a.x), floor(a.y));
	floor		___552_cellPosition.x ___707_coord2D.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{157} %argrw{"wr"}
	floor		___552_cellPosition.y ___707_coord2D.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 768 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___552_localPosition.x ___707_coord2D.x ___552_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		___552_localPosition.y ___707_coord2D.y ___552_cellPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:399
#   float minDistance = 8.0;
	assign		___552_minDistance $const9 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{399} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:400
#   for (int j = -1; j <= 1; j++) {
	for		$tmp289 771 773 816 818 	%line{400} %argrw{"r"}
	assign		___553_j $const10 	%argrw{"wr"}
	le		$tmp288 ___553_j $const11 	%argrw{"wrr"}
	neq		$tmp289 $tmp288 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:401
#     for (int i = -1; i <= 1; i++) {
	for		$tmp291 775 777 814 816 	%line{401} %argrw{"r"}
	assign		___555_i $const10 	%argrw{"wr"}
	le		$tmp290 ___555_i $const11 	%argrw{"wrr"}
	neq		$tmp291 $tmp290 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:402
#       vector2 cellOffset = vector2(i, j);
	assign		___556_cellOffset.x ___555_i 	%line{402} %argrw{"wr"}
	assign		___556_cellOffset.y ___553_j 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 782 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp294.x ___552_cellPosition.x ___556_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp294.y ___552_cellPosition.y ___556_cellOffset.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:404
#                               hash_vector2_to_vector2(cellPosition + cellOffset) * randomness;
	functioncall	$const37 788 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{404} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const16 785 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp293.x $tmp294.x $tmp294.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp295 $tmp294.x $tmp294.y $const2 	%line{33} %argrw{"wrrr"}
	functioncall	$const38 788 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp293.y $tmp295 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 794 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp296.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp296.y randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 794 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp292.x $tmp293.x $tmp296.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp292.y $tmp293.y $tmp296.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 797 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___556_pointPosition.x ___556_cellOffset.x $tmp292.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		___556_pointPosition.y ___556_cellOffset.y $tmp292.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:405
#       float distanceToPoint = distance(pointPosition, localPosition);
	functioncall	$const28 807 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{405} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 801 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp297.x ___556_pointPosition.x ___552_localPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp297.y ___556_pointPosition.y ___552_localPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:33
#   return length(a - b);
	functioncall	$const41 807 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const42 807 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{192} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp298 $tmp297.x $tmp297.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp299 $tmp297.y $tmp297.y 	%argrw{"wrr"}
	add		$tmp300 $tmp298 $tmp299 	%argrw{"wrr"}
	sqrt		___556_distanceToPoint $tmp300 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:406
#       if (distanceToPoint < minDistance) {
	lt		$tmp301 ___556_distanceToPoint ___552_minDistance 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{406} %argrw{"wrr"}
	if		$tmp301 814 814 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:407
#         minDistance = distanceToPoint;
	assign		___552_minDistance ___556_distanceToPoint 	%line{407} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:408
#         closestPoint = pointPosition;
	assign		___552_closestPoint.x ___556_pointPosition.x 	%line{408} %argrw{"wr"}
	assign		___552_closestPoint.y ___556_pointPosition.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:409
#         closestPointOffset = cellOffset;
	assign		___552_closestPointOffset.x ___556_cellOffset.x 	%line{409} %argrw{"wr"}
	assign		___552_closestPointOffset.y ___556_cellOffset.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:401
#     for (int i = -1; i <= 1; i++) {
	assign		$tmp302 ___555_i 	%line{401} %argrw{"wr"}
	add		___555_i ___555_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:400
#   for (int j = -1; j <= 1; j++) {
	assign		$tmp303 ___553_j 	%line{400} %argrw{"wr"}
	add		___553_j ___553_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:414
#   minDistance = 8.0;
	assign		___552_minDistance $const9 	%line{414} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:416
#   for (int j = -1; j <= 1; j++) {
	for		$tmp305 821 823 875 877 	%line{416} %argrw{"r"}
	assign		___558_j $const10 	%argrw{"wr"}
	le		$tmp304 ___558_j $const11 	%argrw{"wrr"}
	neq		$tmp305 $tmp304 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:417
#     for (int i = -1; i <= 1; i++) {
	for		$tmp307 825 827 873 875 	%line{417} %argrw{"r"}
	assign		___560_i $const10 	%argrw{"wr"}
	le		$tmp306 ___560_i $const11 	%argrw{"wrr"}
	neq		$tmp307 $tmp306 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:418
#       if (i == 0 && j == 0) {
	eq		$tmp308 ___560_i $const12 	%line{418} %argrw{"wrr"}
	neq		$tmp309 $tmp308 $const12 	%argrw{"wrr"}
	if		$tmp309 833 833 	%argrw{"r"}
	eq		$tmp310 ___558_j $const12 	%argrw{"wrr"}
	neq		$tmp311 $tmp310 $const12 	%argrw{"wrr"}
	assign		$tmp309 $tmp311 	%argrw{"wr"}
	if		$tmp309 835 835 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:419
#         continue;
	continue	%line{419}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:421
#       vector2 cellOffset = vector2(i, j) + closestPointOffset;
	assign		$tmp312.x ___560_i 	%line{421} %argrw{"wr"}
	assign		$tmp312.y ___558_j 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 840 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___561_cellOffset.x $tmp312.x ___552_closestPointOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		___561_cellOffset.y $tmp312.y ___552_closestPointOffset.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 843 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp315.x ___552_cellPosition.x ___561_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp315.y ___552_cellPosition.y ___561_cellOffset.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:423
#                               hash_vector2_to_vector2(cellPosition + cellOffset) * randomness;
	functioncall	$const37 849 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{423} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const16 846 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:16
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp314.x $tmp315.x $tmp315.y 	%line{16} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:33
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp316 $tmp315.x $tmp315.y $const2 	%line{33} %argrw{"wrrr"}
	functioncall	$const38 849 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp314.y $tmp316 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 855 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp317.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp317.y randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 855 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp313.x $tmp314.x $tmp317.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp313.y $tmp314.y $tmp317.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 858 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___561_pointPosition.x ___561_cellOffset.x $tmp313.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		___561_pointPosition.y ___561_cellOffset.y $tmp313.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:424
#       float distanceToPoint = distance(closestPoint, pointPosition);
	functioncall	$const28 868 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{424} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 862 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp318.x ___552_closestPoint.x ___561_pointPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp318.y ___552_closestPoint.y ___561_pointPosition.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:33
#   return length(a - b);
	functioncall	$const41 868 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const42 868 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{192} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp319 $tmp318.x $tmp318.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp320 $tmp318.y $tmp318.y 	%argrw{"wrr"}
	add		$tmp321 $tmp319 $tmp320 	%argrw{"wrr"}
	sqrt		___561_distanceToPoint $tmp321 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:425
#       if (distanceToPoint < minDistance) {
	lt		$tmp322 ___561_distanceToPoint ___552_minDistance 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{425} %argrw{"wrr"}
	if		$tmp322 873 873 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:426
#         minDistance = distanceToPoint;
	assign		___552_minDistance ___561_distanceToPoint 	%line{426} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:427
#         closestPointToClosestPoint = pointPosition;
	assign		___552_closestPointToClosestPoint.x ___561_pointPosition.x 	%line{427} %argrw{"wr"}
	assign		___552_closestPointToClosestPoint.y ___561_pointPosition.y 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:417
#     for (int i = -1; i <= 1; i++) {
	assign		$tmp323 ___560_i 	%line{417} %argrw{"wr"}
	add		___560_i ___560_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:416
#   for (int j = -1; j <= 1; j++) {
	assign		$tmp324 ___558_j 	%line{416} %argrw{"wr"}
	add		___558_j ___558_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:431
#   outRadius = distance(closestPointToClosestPoint, closestPoint) / 2.0;
	functioncall	$const28 887 	%line{431} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 881 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp326.x ___552_closestPointToClosestPoint.x ___552_closestPoint.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp326.y ___552_closestPointToClosestPoint.y ___552_closestPoint.y 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:33
#   return length(a - b);
	functioncall	$const41 887 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{33} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const42 887 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector2.h"} %line{192} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp327 $tmp326.x $tmp326.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp328 $tmp326.y $tmp326.y 	%argrw{"wrr"}
	add		$tmp329 $tmp327 $tmp328 	%argrw{"wrr"}
	sqrt		$tmp325 $tmp329 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:431
#   outRadius = distance(closestPointToClosestPoint, closestPoint) / 2.0;
	div		Radius $tmp325 $const4 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{431} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:971
#       error("Unknown feature!");
	error		$const31 	%line{971} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:973
#     outPosition2D = safe_divide(outPosition2D, Scale);
	functioncall	$const56 899 	%line{973} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:45
#   return vector2((b != 0.0) ? a.x / b : 0.0, (b != 0.0) ? a.y / b : 0.0);
	neq		$tmp330 Scale $const1 	%line{45} %argrw{"wrr"}
	if		$tmp330 893 894 	%argrw{"r"}
	div		___707_outPosition2D.x ___707_outPosition2D.x Scale 	%argrw{"wrr"}
	assign		___707_outPosition2D.x $const1 	%argrw{"wr"}
	neq		$tmp331 Scale $const1 	%argrw{"wrr"}
	if		$tmp331 897 898 	%argrw{"r"}
	div		___707_outPosition2D.y ___707_outPosition2D.y Scale 	%argrw{"wrr"}
	assign		___707_outPosition2D.y $const1 	%argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:974
#     Position = vector3(outPosition2D.x, outPosition2D.y, 0.0);
	point		Position ___707_outPosition2D.x ___707_outPosition2D.y $const1 	%line{974} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:976
#   else if (dimensions == "3D") {
	eq		$tmp332 dimensions $const57 	%line{976} %argrw{"wrr"}
	if		$tmp332 1577 2746 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:977
#     if (feature == "f1") {
	eq		$tmp333 feature $const7 	%line{977} %argrw{"wrr"}
	if		$tmp333 1040 1573 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:978
#       voronoi_f1_3d(coord, Exponent, randomness, metric, Distance, Color, Position);
	functioncall	$const58 1040 	%line{978} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:465
#   vector3 cellPosition = floor(coord);
	floor		___570_cellPosition coord 	%line{465} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:466
#   vector3 localPosition = coord - cellPosition;
	sub		___570_localPosition coord ___570_cellPosition 	%line{466} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:468
#   float minDistance = 8.0;
	assign		___570_minDistance $const9 	%line{468} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:470
#   for (int k = -1; k <= 1; k++) {
	for		$tmp335 910 912 1017 1019 	%line{470} %argrw{"r"}
	assign		___571_k $const10 	%argrw{"wr"}
	le		$tmp334 ___571_k $const11 	%argrw{"wrr"}
	neq		$tmp335 $tmp334 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:471
#     for (int j = -1; j <= 1; j++) {
	for		$tmp337 914 916 1015 1017 	%line{471} %argrw{"r"}
	assign		___573_j $const10 	%argrw{"wr"}
	le		$tmp336 ___573_j $const11 	%argrw{"wrr"}
	neq		$tmp337 $tmp336 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:472
#       for (int i = -1; i <= 1; i++) {
	for		$tmp339 918 920 1013 1015 	%line{472} %argrw{"r"}
	assign		___575_i $const10 	%argrw{"wr"}
	le		$tmp338 ___575_i $const11 	%argrw{"wrr"}
	neq		$tmp339 $tmp338 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:473
#         vector3 cellOffset = vector3(i, j, k);
	assign		$tmp340 ___575_i 	%line{473} %argrw{"wr"}
	assign		$tmp341 ___573_j 	%argrw{"wr"}
	assign		$tmp342 ___571_k 	%argrw{"wr"}
	point		___576_cellOffset $tmp340 $tmp341 $tmp342 	%argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:475
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness;
	add		$tmp344 ___570_cellPosition ___576_cellOffset 	%line{475} %argrw{"wrr"}
	functioncall	$const59 943 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const38 928 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp345 $tmp344 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:39
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp347.x $tmp344 $const12 	%line{39} %argrw{"wrr"}
	compref		$tmp347.y $tmp344 $const11 	%argrw{"wrr"}
	compref		$tmp347.z $tmp344 $const21 	%argrw{"wrr"}
	assign		$tmp347.w $const2 	%argrw{"wr"}
	functioncall	$const60 935 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp348 $tmp347.x $tmp347.y $tmp347.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp346 $tmp348 $tmp347.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:40
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp350.x $tmp344 $const12 	%line{40} %argrw{"wrr"}
	compref		$tmp350.y $tmp344 $const11 	%argrw{"wrr"}
	compref		$tmp350.z $tmp344 $const21 	%argrw{"wrr"}
	assign		$tmp350.w $const4 	%argrw{"wr"}
	functioncall	$const60 942 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp351 $tmp350.x $tmp350.y $tmp350.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp349 $tmp351 $tmp350.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	point		$tmp343 $tmp345 $tmp346 $tmp349 	%line{38} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:475
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness;
	mul		$tmp352 $tmp343 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{475} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:474
#         vector3 pointPosition = cellOffset +
	add		___576_pointPosition ___576_cellOffset $tmp352 	%line{474} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:476
#         float distanceToPoint = voronoi_distance(pointPosition, localPosition, metric, exponent);
	functioncall	$const14 1008 	%line{476} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:438
#   if (metric == "euclidean") {
	eq		$tmp353 metric $const40 	%line{438} %argrw{"wrr"}
	if		$tmp353 950 1008 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:439
#     return distance(a, b);
	distance	___576_distanceToPoint ___576_pointPosition ___570_localPosition 	%line{439} %argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:441
#   else if (metric == "manhattan") {
	eq		$tmp354 metric $const43 	%line{441} %argrw{"wrr"}
	if		$tmp354 967 1008 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:442
#     return abs(a[0] - b[0]) + abs(a[1] - b[1]) + abs(a[2] - b[2]);
	compref		$tmp356 ___576_pointPosition $const12 	%line{442} %argrw{"wrr"}
	compref		$tmp357 ___570_localPosition $const12 	%argrw{"wrr"}
	sub		$tmp358 $tmp356 $tmp357 	%argrw{"wrr"}
	abs		$tmp355 $tmp358 	%argrw{"wr"}
	compref		$tmp360 ___576_pointPosition $const11 	%argrw{"wrr"}
	compref		$tmp361 ___570_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp362 $tmp360 $tmp361 	%argrw{"wrr"}
	abs		$tmp359 $tmp362 	%argrw{"wr"}
	add		$tmp363 $tmp355 $tmp359 	%argrw{"wrr"}
	compref		$tmp365 ___576_pointPosition $const21 	%argrw{"wrr"}
	compref		$tmp366 ___570_localPosition $const21 	%argrw{"wrr"}
	sub		$tmp367 $tmp365 $tmp366 	%argrw{"wrr"}
	abs		$tmp364 $tmp367 	%argrw{"wr"}
	add		___576_distanceToPoint $tmp363 $tmp364 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:444
#   else if (metric == "chebychev") {
	eq		$tmp368 metric $const44 	%line{444} %argrw{"wrr"}
	if		$tmp368 984 1008 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:445
#     return max(abs(a[0] - b[0]), max(abs(a[1] - b[1]), abs(a[2] - b[2])));
	compref		$tmp370 ___576_pointPosition $const12 	%line{445} %argrw{"wrr"}
	compref		$tmp371 ___570_localPosition $const12 	%argrw{"wrr"}
	sub		$tmp372 $tmp370 $tmp371 	%argrw{"wrr"}
	abs		$tmp369 $tmp372 	%argrw{"wr"}
	compref		$tmp375 ___576_pointPosition $const11 	%argrw{"wrr"}
	compref		$tmp376 ___570_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp377 $tmp375 $tmp376 	%argrw{"wrr"}
	abs		$tmp374 $tmp377 	%argrw{"wr"}
	compref		$tmp379 ___576_pointPosition $const21 	%argrw{"wrr"}
	compref		$tmp380 ___570_localPosition $const21 	%argrw{"wrr"}
	sub		$tmp381 $tmp379 $tmp380 	%argrw{"wrr"}
	abs		$tmp378 $tmp381 	%argrw{"wr"}
	max		$tmp373 $tmp374 $tmp378 	%argrw{"wrr"}
	max		___576_distanceToPoint $tmp369 $tmp373 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:447
#   else if (metric == "minkowski") {
	eq		$tmp382 metric $const45 	%line{447} %argrw{"wrr"}
	if		$tmp382 1006 1008 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:448
#     return pow(pow(abs(a[0] - b[0]), exponent) + pow(abs(a[1] - b[1]), exponent) +
	compref		$tmp385 ___576_pointPosition $const12 	%line{448} %argrw{"wrr"}
	compref		$tmp386 ___570_localPosition $const12 	%argrw{"wrr"}
	sub		$tmp387 $tmp385 $tmp386 	%argrw{"wrr"}
	abs		$tmp384 $tmp387 	%argrw{"wr"}
	pow		$tmp383 $tmp384 Exponent 	%argrw{"wrr"}
	compref		$tmp390 ___576_pointPosition $const11 	%argrw{"wrr"}
	compref		$tmp391 ___570_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp392 $tmp390 $tmp391 	%argrw{"wrr"}
	abs		$tmp389 $tmp392 	%argrw{"wr"}
	pow		$tmp388 $tmp389 Exponent 	%argrw{"wrr"}
	add		$tmp393 $tmp383 $tmp388 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:449
#                    pow(abs(a[2] - b[2]), exponent),
	compref		$tmp396 ___576_pointPosition $const21 	%line{449} %argrw{"wrr"}
	compref		$tmp397 ___570_localPosition $const21 	%argrw{"wrr"}
	sub		$tmp398 $tmp396 $tmp397 	%argrw{"wrr"}
	abs		$tmp395 $tmp398 	%argrw{"wr"}
	pow		$tmp394 $tmp395 Exponent 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:448
#     return pow(pow(abs(a[0] - b[0]), exponent) + pow(abs(a[1] - b[1]), exponent) +
	add		$tmp399 $tmp393 $tmp394 	%line{448} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:450
#                1.0 / exponent);
	div		$tmp400 $const2 Exponent 	%line{450} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:448
#     return pow(pow(abs(a[0] - b[0]), exponent) + pow(abs(a[1] - b[1]), exponent) +
	pow		___576_distanceToPoint $tmp399 $tmp400 	%line{448} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:450
#                1.0 / exponent);
	return	%line{450}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:453
#     return 0.0;
	assign		___576_distanceToPoint $const1 	%line{453} %argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:477
#         if (distanceToPoint < minDistance) {
	lt		$tmp401 ___576_distanceToPoint ___570_minDistance 	%line{477} %argrw{"wrr"}
	if		$tmp401 1013 1013 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:478
#           targetOffset = cellOffset;
	assign		___570_targetOffset ___576_cellOffset 	%line{478} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:479
#           minDistance = distanceToPoint;
	assign		___570_minDistance ___576_distanceToPoint 	%line{479} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:480
#           targetPosition = pointPosition;
	assign		___570_targetPosition ___576_pointPosition 	%line{480} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:472
#       for (int i = -1; i <= 1; i++) {
	assign		$tmp402 ___575_i 	%line{472} %argrw{"wr"}
	add		___575_i ___575_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:471
#     for (int j = -1; j <= 1; j++) {
	assign		$tmp403 ___573_j 	%line{471} %argrw{"wr"}
	add		___573_j ___573_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:470
#   for (int k = -1; k <= 1; k++) {
	assign		$tmp404 ___571_k 	%line{470} %argrw{"wr"}
	add		___571_k ___571_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:485
#   outDistance = minDistance;
	assign		Distance ___570_minDistance 	%line{485} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:486
#   outColor = hash_vector3_to_color(cellPosition + targetOffset);
	add		$tmp405 ___570_cellPosition ___570_targetOffset 	%line{486} %argrw{"wrr"}
	functioncall	$const61 1039 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:69
#   return color(hash_vector3_to_float(k),
	functioncall	$const38 1024 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{69} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp406 $tmp405 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:70
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp408.x $tmp405 $const12 	%line{70} %argrw{"wrr"}
	compref		$tmp408.y $tmp405 $const11 	%argrw{"wrr"}
	compref		$tmp408.z $tmp405 $const21 	%argrw{"wrr"}
	assign		$tmp408.w $const2 	%argrw{"wr"}
	functioncall	$const60 1031 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp409 $tmp408.x $tmp408.y $tmp408.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp407 $tmp409 $tmp408.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:71
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp411.x $tmp405 $const12 	%line{71} %argrw{"wrr"}
	compref		$tmp411.y $tmp405 $const11 	%argrw{"wrr"}
	compref		$tmp411.z $tmp405 $const21 	%argrw{"wrr"}
	assign		$tmp411.w $const4 	%argrw{"wr"}
	functioncall	$const60 1038 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp412 $tmp411.x $tmp411.y $tmp411.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp410 $tmp412 $tmp411.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:69
#   return color(hash_vector3_to_float(k),
	color		Color $tmp406 $tmp407 $tmp410 	%line{69} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:487
#   outPosition = targetPosition + cellPosition;
	add		Position ___570_targetPosition ___570_cellPosition 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{487} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:980
#     else if (feature == "smooth_f1") {
	eq		$tmp413 feature $const17 	%line{980} %argrw{"wrr"}
	if		$tmp413 1193 1573 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:981
#       voronoi_smooth_f1_3d(
	functioncall	$const62 1193 	%line{981} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:499
#   vector3 cellPosition = floor(coord);
	floor		___578_cellPosition coord 	%line{499} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:500
#   vector3 localPosition = coord - cellPosition;
	sub		___578_localPosition coord ___578_cellPosition 	%line{500} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:502
#   float smoothDistance = 8.0;
	assign		___578_smoothDistance $const9 	%line{502} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:503
#   color smoothColor = color(0.0);
	assign		___578_smoothColor $const19 	%line{503} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:504
#   vector3 smoothPosition = vector3(0.0);
	assign		___578_smoothPosition $const63 	%line{504} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:505
#   for (int k = -2; k <= 2; k++) {
	for		$tmp415 1050 1052 1188 1190 	%line{505} %argrw{"r"}
	assign		___579_k $const20 	%argrw{"wr"}
	le		$tmp414 ___579_k $const21 	%argrw{"wrr"}
	neq		$tmp415 $tmp414 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:506
#     for (int j = -2; j <= 2; j++) {
	for		$tmp417 1054 1056 1186 1188 	%line{506} %argrw{"r"}
	assign		___581_j $const20 	%argrw{"wr"}
	le		$tmp416 ___581_j $const21 	%argrw{"wrr"}
	neq		$tmp417 $tmp416 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:507
#       for (int i = -2; i <= 2; i++) {
	for		$tmp419 1058 1060 1184 1186 	%line{507} %argrw{"r"}
	assign		___583_i $const20 	%argrw{"wr"}
	le		$tmp418 ___583_i $const21 	%argrw{"wrr"}
	neq		$tmp419 $tmp418 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:508
#         vector3 cellOffset = vector3(i, j, k);
	assign		$tmp420 ___583_i 	%line{508} %argrw{"wr"}
	assign		$tmp421 ___581_j 	%argrw{"wr"}
	assign		$tmp422 ___579_k 	%argrw{"wr"}
	point		___584_cellOffset $tmp420 $tmp421 $tmp422 	%argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:510
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness;
	add		$tmp424 ___578_cellPosition ___584_cellOffset 	%line{510} %argrw{"wrr"}
	functioncall	$const59 1083 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const38 1068 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp425 $tmp424 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:39
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp427.x $tmp424 $const12 	%line{39} %argrw{"wrr"}
	compref		$tmp427.y $tmp424 $const11 	%argrw{"wrr"}
	compref		$tmp427.z $tmp424 $const21 	%argrw{"wrr"}
	assign		$tmp427.w $const2 	%argrw{"wr"}
	functioncall	$const60 1075 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp428 $tmp427.x $tmp427.y $tmp427.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp426 $tmp428 $tmp427.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:40
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp430.x $tmp424 $const12 	%line{40} %argrw{"wrr"}
	compref		$tmp430.y $tmp424 $const11 	%argrw{"wrr"}
	compref		$tmp430.z $tmp424 $const21 	%argrw{"wrr"}
	assign		$tmp430.w $const4 	%argrw{"wr"}
	functioncall	$const60 1082 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp431 $tmp430.x $tmp430.y $tmp430.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp429 $tmp431 $tmp430.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	point		$tmp423 $tmp425 $tmp426 $tmp429 	%line{38} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:510
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness;
	mul		$tmp432 $tmp423 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{510} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:509
#         vector3 pointPosition = cellOffset +
	add		___584_pointPosition ___584_cellOffset $tmp432 	%line{509} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:511
#         float distanceToPoint = voronoi_distance(pointPosition, localPosition, metric, exponent);
	functioncall	$const14 1148 	%line{511} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:438
#   if (metric == "euclidean") {
	eq		$tmp433 metric $const40 	%line{438} %argrw{"wrr"}
	if		$tmp433 1090 1148 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:439
#     return distance(a, b);
	distance	___584_distanceToPoint ___584_pointPosition ___578_localPosition 	%line{439} %argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:441
#   else if (metric == "manhattan") {
	eq		$tmp434 metric $const43 	%line{441} %argrw{"wrr"}
	if		$tmp434 1107 1148 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:442
#     return abs(a[0] - b[0]) + abs(a[1] - b[1]) + abs(a[2] - b[2]);
	compref		$tmp436 ___584_pointPosition $const12 	%line{442} %argrw{"wrr"}
	compref		$tmp437 ___578_localPosition $const12 	%argrw{"wrr"}
	sub		$tmp438 $tmp436 $tmp437 	%argrw{"wrr"}
	abs		$tmp435 $tmp438 	%argrw{"wr"}
	compref		$tmp440 ___584_pointPosition $const11 	%argrw{"wrr"}
	compref		$tmp441 ___578_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp442 $tmp440 $tmp441 	%argrw{"wrr"}
	abs		$tmp439 $tmp442 	%argrw{"wr"}
	add		$tmp443 $tmp435 $tmp439 	%argrw{"wrr"}
	compref		$tmp445 ___584_pointPosition $const21 	%argrw{"wrr"}
	compref		$tmp446 ___578_localPosition $const21 	%argrw{"wrr"}
	sub		$tmp447 $tmp445 $tmp446 	%argrw{"wrr"}
	abs		$tmp444 $tmp447 	%argrw{"wr"}
	add		___584_distanceToPoint $tmp443 $tmp444 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:444
#   else if (metric == "chebychev") {
	eq		$tmp448 metric $const44 	%line{444} %argrw{"wrr"}
	if		$tmp448 1124 1148 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:445
#     return max(abs(a[0] - b[0]), max(abs(a[1] - b[1]), abs(a[2] - b[2])));
	compref		$tmp450 ___584_pointPosition $const12 	%line{445} %argrw{"wrr"}
	compref		$tmp451 ___578_localPosition $const12 	%argrw{"wrr"}
	sub		$tmp452 $tmp450 $tmp451 	%argrw{"wrr"}
	abs		$tmp449 $tmp452 	%argrw{"wr"}
	compref		$tmp455 ___584_pointPosition $const11 	%argrw{"wrr"}
	compref		$tmp456 ___578_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp457 $tmp455 $tmp456 	%argrw{"wrr"}
	abs		$tmp454 $tmp457 	%argrw{"wr"}
	compref		$tmp459 ___584_pointPosition $const21 	%argrw{"wrr"}
	compref		$tmp460 ___578_localPosition $const21 	%argrw{"wrr"}
	sub		$tmp461 $tmp459 $tmp460 	%argrw{"wrr"}
	abs		$tmp458 $tmp461 	%argrw{"wr"}
	max		$tmp453 $tmp454 $tmp458 	%argrw{"wrr"}
	max		___584_distanceToPoint $tmp449 $tmp453 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:447
#   else if (metric == "minkowski") {
	eq		$tmp462 metric $const45 	%line{447} %argrw{"wrr"}
	if		$tmp462 1146 1148 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:448
#     return pow(pow(abs(a[0] - b[0]), exponent) + pow(abs(a[1] - b[1]), exponent) +
	compref		$tmp465 ___584_pointPosition $const12 	%line{448} %argrw{"wrr"}
	compref		$tmp466 ___578_localPosition $const12 	%argrw{"wrr"}
	sub		$tmp467 $tmp465 $tmp466 	%argrw{"wrr"}
	abs		$tmp464 $tmp467 	%argrw{"wr"}
	pow		$tmp463 $tmp464 Exponent 	%argrw{"wrr"}
	compref		$tmp470 ___584_pointPosition $const11 	%argrw{"wrr"}
	compref		$tmp471 ___578_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp472 $tmp470 $tmp471 	%argrw{"wrr"}
	abs		$tmp469 $tmp472 	%argrw{"wr"}
	pow		$tmp468 $tmp469 Exponent 	%argrw{"wrr"}
	add		$tmp473 $tmp463 $tmp468 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:449
#                    pow(abs(a[2] - b[2]), exponent),
	compref		$tmp476 ___584_pointPosition $const21 	%line{449} %argrw{"wrr"}
	compref		$tmp477 ___578_localPosition $const21 	%argrw{"wrr"}
	sub		$tmp478 $tmp476 $tmp477 	%argrw{"wrr"}
	abs		$tmp475 $tmp478 	%argrw{"wr"}
	pow		$tmp474 $tmp475 Exponent 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:448
#     return pow(pow(abs(a[0] - b[0]), exponent) + pow(abs(a[1] - b[1]), exponent) +
	add		$tmp479 $tmp473 $tmp474 	%line{448} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:450
#                1.0 / exponent);
	div		$tmp480 $const2 Exponent 	%line{450} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:448
#     return pow(pow(abs(a[0] - b[0]), exponent) + pow(abs(a[1] - b[1]), exponent) +
	pow		___584_distanceToPoint $tmp479 $tmp480 	%line{448} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:450
#                1.0 / exponent);
	return	%line{450}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:453
#     return 0.0;
	assign		___584_distanceToPoint $const1 	%line{453} %argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:513
#             0.0, 1.0, 0.5 + 0.5 * (smoothDistance - distanceToPoint) / smoothness);
	sub		$tmp481 ___578_smoothDistance ___584_distanceToPoint 	%line{513} %argrw{"wrr"}
	mul		$tmp482 $const5 $tmp481 	%argrw{"wrr"}
	div		$tmp483 $tmp482 smoothness 	%argrw{"wrr"}
	add		$tmp484 $const5 $tmp483 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:512
#         float h = smoothstep(
	smoothstep	___584_h $const1 $const2 $tmp484 	%line{512} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:514
#         float correctionFactor = smoothness * h * (1.0 - h);
	mul		$tmp485 smoothness ___584_h 	%line{514} %argrw{"wrr"}
	sub		$tmp486 $const2 ___584_h 	%argrw{"wrr"}
	mul		___584_correctionFactor $tmp485 $tmp486 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:515
#         smoothDistance = mix(smoothDistance, distanceToPoint, h) - correctionFactor;
	mix		$tmp487 ___578_smoothDistance ___584_distanceToPoint ___584_h 	%line{515} %argrw{"wrrr"}
	sub		___578_smoothDistance $tmp487 ___584_correctionFactor 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:516
#         correctionFactor /= 1.0 + 3.0 * smoothness;
	mul		$tmp488 $const22 smoothness 	%line{516} %argrw{"wrr"}
	add		$tmp489 $const2 $tmp488 	%argrw{"wrr"}
	div		___584_correctionFactor ___584_correctionFactor $tmp489 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:517
#         color cellColor = hash_vector3_to_color(cellPosition + cellOffset);
	add		$tmp490 ___578_cellPosition ___584_cellOffset 	%line{517} %argrw{"wrr"}
	functioncall	$const61 1180 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:69
#   return color(hash_vector3_to_float(k),
	functioncall	$const38 1165 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{69} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp491 $tmp490 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:70
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp493.x $tmp490 $const12 	%line{70} %argrw{"wrr"}
	compref		$tmp493.y $tmp490 $const11 	%argrw{"wrr"}
	compref		$tmp493.z $tmp490 $const21 	%argrw{"wrr"}
	assign		$tmp493.w $const2 	%argrw{"wr"}
	functioncall	$const60 1172 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp494 $tmp493.x $tmp493.y $tmp493.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp492 $tmp494 $tmp493.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:71
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp496.x $tmp490 $const12 	%line{71} %argrw{"wrr"}
	compref		$tmp496.y $tmp490 $const11 	%argrw{"wrr"}
	compref		$tmp496.z $tmp490 $const21 	%argrw{"wrr"}
	assign		$tmp496.w $const4 	%argrw{"wr"}
	functioncall	$const60 1179 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp497 $tmp496.x $tmp496.y $tmp496.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp495 $tmp497 $tmp496.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:69
#   return color(hash_vector3_to_float(k),
	color		___584_cellColor $tmp491 $tmp492 $tmp495 	%line{69} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:518
#         smoothColor = mix(smoothColor, cellColor, h) - correctionFactor;
	mix		$tmp498 ___578_smoothColor ___584_cellColor ___584_h 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{518} %argrw{"wrrr"}
	sub		___578_smoothColor $tmp498 ___584_correctionFactor 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:519
#         smoothPosition = mix(smoothPosition, pointPosition, h) - correctionFactor;
	mix		$tmp499 ___578_smoothPosition ___584_pointPosition ___584_h 	%line{519} %argrw{"wrrr"}
	sub		___578_smoothPosition $tmp499 ___584_correctionFactor 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:507
#       for (int i = -2; i <= 2; i++) {
	assign		$tmp500 ___583_i 	%line{507} %argrw{"wr"}
	add		___583_i ___583_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:506
#     for (int j = -2; j <= 2; j++) {
	assign		$tmp501 ___581_j 	%line{506} %argrw{"wr"}
	add		___581_j ___581_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:505
#   for (int k = -2; k <= 2; k++) {
	assign		$tmp502 ___579_k 	%line{505} %argrw{"wr"}
	add		___579_k ___579_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:523
#   outDistance = smoothDistance;
	assign		Distance ___578_smoothDistance 	%line{523} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:524
#   outColor = smoothColor;
	assign		Color ___578_smoothColor 	%line{524} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:525
#   outPosition = cellPosition + smoothPosition;
	add		Position ___578_cellPosition ___578_smoothPosition 	%line{525} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:984
#     else if (feature == "f2") {
	eq		$tmp503 feature $const23 	%line{984} %argrw{"wrr"}
	if		$tmp503 1342 1573 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:985
#       voronoi_f2_3d(coord, Exponent, randomness, metric, Distance, Color, Position);
	functioncall	$const64 1342 	%line{985} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:536
#   vector3 cellPosition = floor(coord);
	floor		___585_cellPosition coord 	%line{536} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:537
#   vector3 localPosition = coord - cellPosition;
	sub		___585_localPosition coord ___585_cellPosition 	%line{537} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:539
#   float distanceF1 = 8.0;
	assign		___585_distanceF1 $const9 	%line{539} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:540
#   float distanceF2 = 8.0;
	assign		___585_distanceF2 $const9 	%line{540} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:541
#   vector3 offsetF1 = vector3(0.0);
	assign		___585_offsetF1 $const63 	%line{541} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:542
#   vector3 positionF1 = vector3(0.0);
	assign		___585_positionF1 $const63 	%line{542} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:544
#   for (int k = -1; k <= 1; k++) {
	for		$tmp505 1204 1206 1319 1321 	%line{544} %argrw{"r"}
	assign		___586_k $const10 	%argrw{"wr"}
	le		$tmp504 ___586_k $const11 	%argrw{"wrr"}
	neq		$tmp505 $tmp504 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:545
#     for (int j = -1; j <= 1; j++) {
	for		$tmp507 1208 1210 1317 1319 	%line{545} %argrw{"r"}
	assign		___588_j $const10 	%argrw{"wr"}
	le		$tmp506 ___588_j $const11 	%argrw{"wrr"}
	neq		$tmp507 $tmp506 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:546
#       for (int i = -1; i <= 1; i++) {
	for		$tmp509 1212 1214 1315 1317 	%line{546} %argrw{"r"}
	assign		___590_i $const10 	%argrw{"wr"}
	le		$tmp508 ___590_i $const11 	%argrw{"wrr"}
	neq		$tmp509 $tmp508 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:547
#         vector3 cellOffset = vector3(i, j, k);
	assign		$tmp510 ___590_i 	%line{547} %argrw{"wr"}
	assign		$tmp511 ___588_j 	%argrw{"wr"}
	assign		$tmp512 ___586_k 	%argrw{"wr"}
	point		___591_cellOffset $tmp510 $tmp511 $tmp512 	%argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:549
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness;
	add		$tmp514 ___585_cellPosition ___591_cellOffset 	%line{549} %argrw{"wrr"}
	functioncall	$const59 1237 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const38 1222 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp515 $tmp514 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:39
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp517.x $tmp514 $const12 	%line{39} %argrw{"wrr"}
	compref		$tmp517.y $tmp514 $const11 	%argrw{"wrr"}
	compref		$tmp517.z $tmp514 $const21 	%argrw{"wrr"}
	assign		$tmp517.w $const2 	%argrw{"wr"}
	functioncall	$const60 1229 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp518 $tmp517.x $tmp517.y $tmp517.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp516 $tmp518 $tmp517.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:40
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp520.x $tmp514 $const12 	%line{40} %argrw{"wrr"}
	compref		$tmp520.y $tmp514 $const11 	%argrw{"wrr"}
	compref		$tmp520.z $tmp514 $const21 	%argrw{"wrr"}
	assign		$tmp520.w $const4 	%argrw{"wr"}
	functioncall	$const60 1236 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp521 $tmp520.x $tmp520.y $tmp520.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp519 $tmp521 $tmp520.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	point		$tmp513 $tmp515 $tmp516 $tmp519 	%line{38} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:549
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness;
	mul		$tmp522 $tmp513 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{549} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:548
#         vector3 pointPosition = cellOffset +
	add		___591_pointPosition ___591_cellOffset $tmp522 	%line{548} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:550
#         float distanceToPoint = voronoi_distance(pointPosition, localPosition, metric, exponent);
	functioncall	$const14 1302 	%line{550} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:438
#   if (metric == "euclidean") {
	eq		$tmp523 metric $const40 	%line{438} %argrw{"wrr"}
	if		$tmp523 1244 1302 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:439
#     return distance(a, b);
	distance	___591_distanceToPoint ___591_pointPosition ___585_localPosition 	%line{439} %argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:441
#   else if (metric == "manhattan") {
	eq		$tmp524 metric $const43 	%line{441} %argrw{"wrr"}
	if		$tmp524 1261 1302 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:442
#     return abs(a[0] - b[0]) + abs(a[1] - b[1]) + abs(a[2] - b[2]);
	compref		$tmp526 ___591_pointPosition $const12 	%line{442} %argrw{"wrr"}
	compref		$tmp527 ___585_localPosition $const12 	%argrw{"wrr"}
	sub		$tmp528 $tmp526 $tmp527 	%argrw{"wrr"}
	abs		$tmp525 $tmp528 	%argrw{"wr"}
	compref		$tmp530 ___591_pointPosition $const11 	%argrw{"wrr"}
	compref		$tmp531 ___585_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp532 $tmp530 $tmp531 	%argrw{"wrr"}
	abs		$tmp529 $tmp532 	%argrw{"wr"}
	add		$tmp533 $tmp525 $tmp529 	%argrw{"wrr"}
	compref		$tmp535 ___591_pointPosition $const21 	%argrw{"wrr"}
	compref		$tmp536 ___585_localPosition $const21 	%argrw{"wrr"}
	sub		$tmp537 $tmp535 $tmp536 	%argrw{"wrr"}
	abs		$tmp534 $tmp537 	%argrw{"wr"}
	add		___591_distanceToPoint $tmp533 $tmp534 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:444
#   else if (metric == "chebychev") {
	eq		$tmp538 metric $const44 	%line{444} %argrw{"wrr"}
	if		$tmp538 1278 1302 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:445
#     return max(abs(a[0] - b[0]), max(abs(a[1] - b[1]), abs(a[2] - b[2])));
	compref		$tmp540 ___591_pointPosition $const12 	%line{445} %argrw{"wrr"}
	compref		$tmp541 ___585_localPosition $const12 	%argrw{"wrr"}
	sub		$tmp542 $tmp540 $tmp541 	%argrw{"wrr"}
	abs		$tmp539 $tmp542 	%argrw{"wr"}
	compref		$tmp545 ___591_pointPosition $const11 	%argrw{"wrr"}
	compref		$tmp546 ___585_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp547 $tmp545 $tmp546 	%argrw{"wrr"}
	abs		$tmp544 $tmp547 	%argrw{"wr"}
	compref		$tmp549 ___591_pointPosition $const21 	%argrw{"wrr"}
	compref		$tmp550 ___585_localPosition $const21 	%argrw{"wrr"}
	sub		$tmp551 $tmp549 $tmp550 	%argrw{"wrr"}
	abs		$tmp548 $tmp551 	%argrw{"wr"}
	max		$tmp543 $tmp544 $tmp548 	%argrw{"wrr"}
	max		___591_distanceToPoint $tmp539 $tmp543 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:447
#   else if (metric == "minkowski") {
	eq		$tmp552 metric $const45 	%line{447} %argrw{"wrr"}
	if		$tmp552 1300 1302 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:448
#     return pow(pow(abs(a[0] - b[0]), exponent) + pow(abs(a[1] - b[1]), exponent) +
	compref		$tmp555 ___591_pointPosition $const12 	%line{448} %argrw{"wrr"}
	compref		$tmp556 ___585_localPosition $const12 	%argrw{"wrr"}
	sub		$tmp557 $tmp555 $tmp556 	%argrw{"wrr"}
	abs		$tmp554 $tmp557 	%argrw{"wr"}
	pow		$tmp553 $tmp554 Exponent 	%argrw{"wrr"}
	compref		$tmp560 ___591_pointPosition $const11 	%argrw{"wrr"}
	compref		$tmp561 ___585_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp562 $tmp560 $tmp561 	%argrw{"wrr"}
	abs		$tmp559 $tmp562 	%argrw{"wr"}
	pow		$tmp558 $tmp559 Exponent 	%argrw{"wrr"}
	add		$tmp563 $tmp553 $tmp558 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:449
#                    pow(abs(a[2] - b[2]), exponent),
	compref		$tmp566 ___591_pointPosition $const21 	%line{449} %argrw{"wrr"}
	compref		$tmp567 ___585_localPosition $const21 	%argrw{"wrr"}
	sub		$tmp568 $tmp566 $tmp567 	%argrw{"wrr"}
	abs		$tmp565 $tmp568 	%argrw{"wr"}
	pow		$tmp564 $tmp565 Exponent 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:448
#     return pow(pow(abs(a[0] - b[0]), exponent) + pow(abs(a[1] - b[1]), exponent) +
	add		$tmp569 $tmp563 $tmp564 	%line{448} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:450
#                1.0 / exponent);
	div		$tmp570 $const2 Exponent 	%line{450} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:448
#     return pow(pow(abs(a[0] - b[0]), exponent) + pow(abs(a[1] - b[1]), exponent) +
	pow		___591_distanceToPoint $tmp569 $tmp570 	%line{448} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:450
#                1.0 / exponent);
	return	%line{450}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:453
#     return 0.0;
	assign		___591_distanceToPoint $const1 	%line{453} %argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:551
#         if (distanceToPoint < distanceF1) {
	lt		$tmp571 ___591_distanceToPoint ___585_distanceF1 	%line{551} %argrw{"wrr"}
	if		$tmp571 1310 1315 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:552
#           distanceF2 = distanceF1;
	assign		___585_distanceF2 ___585_distanceF1 	%line{552} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:553
#           distanceF1 = distanceToPoint;
	assign		___585_distanceF1 ___591_distanceToPoint 	%line{553} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:554
#           offsetF2 = offsetF1;
	assign		___585_offsetF2 ___585_offsetF1 	%line{554} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:555
#           offsetF1 = cellOffset;
	assign		___585_offsetF1 ___591_cellOffset 	%line{555} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:556
#           positionF2 = positionF1;
	assign		___585_positionF2 ___585_positionF1 	%line{556} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:557
#           positionF1 = pointPosition;
	assign		___585_positionF1 ___591_pointPosition 	%line{557} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:559
#         else if (distanceToPoint < distanceF2) {
	lt		$tmp572 ___591_distanceToPoint ___585_distanceF2 	%line{559} %argrw{"wrr"}
	if		$tmp572 1315 1315 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:560
#           distanceF2 = distanceToPoint;
	assign		___585_distanceF2 ___591_distanceToPoint 	%line{560} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:561
#           offsetF2 = cellOffset;
	assign		___585_offsetF2 ___591_cellOffset 	%line{561} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:562
#           positionF2 = pointPosition;
	assign		___585_positionF2 ___591_pointPosition 	%line{562} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:546
#       for (int i = -1; i <= 1; i++) {
	assign		$tmp573 ___590_i 	%line{546} %argrw{"wr"}
	add		___590_i ___590_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:545
#     for (int j = -1; j <= 1; j++) {
	assign		$tmp574 ___588_j 	%line{545} %argrw{"wr"}
	add		___588_j ___588_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:544
#   for (int k = -1; k <= 1; k++) {
	assign		$tmp575 ___586_k 	%line{544} %argrw{"wr"}
	add		___586_k ___586_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:567
#   outDistance = distanceF2;
	assign		Distance ___585_distanceF2 	%line{567} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:568
#   outColor = hash_vector3_to_color(cellPosition + offsetF2);
	add		$tmp576 ___585_cellPosition ___585_offsetF2 	%line{568} %argrw{"wrr"}
	functioncall	$const61 1341 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:69
#   return color(hash_vector3_to_float(k),
	functioncall	$const38 1326 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{69} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp577 $tmp576 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:70
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp579.x $tmp576 $const12 	%line{70} %argrw{"wrr"}
	compref		$tmp579.y $tmp576 $const11 	%argrw{"wrr"}
	compref		$tmp579.z $tmp576 $const21 	%argrw{"wrr"}
	assign		$tmp579.w $const2 	%argrw{"wr"}
	functioncall	$const60 1333 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp580 $tmp579.x $tmp579.y $tmp579.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp578 $tmp580 $tmp579.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:71
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp582.x $tmp576 $const12 	%line{71} %argrw{"wrr"}
	compref		$tmp582.y $tmp576 $const11 	%argrw{"wrr"}
	compref		$tmp582.z $tmp576 $const21 	%argrw{"wrr"}
	assign		$tmp582.w $const4 	%argrw{"wr"}
	functioncall	$const60 1340 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp583 $tmp582.x $tmp582.y $tmp582.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp581 $tmp583 $tmp582.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:69
#   return color(hash_vector3_to_float(k),
	color		Color $tmp577 $tmp578 $tmp581 	%line{69} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:569
#   outPosition = positionF2 + cellPosition;
	add		Position ___585_positionF2 ___585_cellPosition 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{569} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:987
#     else if (feature == "distance_to_edge") {
	eq		$tmp584 feature $const25 	%line{987} %argrw{"wrr"}
	if		$tmp584 1452 1573 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:988
#       voronoi_distance_to_edge_3d(coord, randomness, Distance);
	functioncall	$const65 1452 	%line{988} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:574
#   vector3 cellPosition = floor(coord);
	floor		___594_cellPosition coord 	%line{574} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:575
#   vector3 localPosition = coord - cellPosition;
	sub		___594_localPosition coord ___594_cellPosition 	%line{575} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:578
#   float minDistance = 8.0;
	assign		___594_minDistance $const9 	%line{578} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:579
#   for (int k = -1; k <= 1; k++) {
	for		$tmp586 1350 1352 1395 1397 	%line{579} %argrw{"r"}
	assign		___595_k $const10 	%argrw{"wr"}
	le		$tmp585 ___595_k $const11 	%argrw{"wrr"}
	neq		$tmp586 $tmp585 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:580
#     for (int j = -1; j <= 1; j++) {
	for		$tmp588 1354 1356 1393 1395 	%line{580} %argrw{"r"}
	assign		___597_j $const10 	%argrw{"wr"}
	le		$tmp587 ___597_j $const11 	%argrw{"wrr"}
	neq		$tmp588 $tmp587 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:581
#       for (int i = -1; i <= 1; i++) {
	for		$tmp590 1358 1360 1391 1393 	%line{581} %argrw{"r"}
	assign		___599_i $const10 	%argrw{"wr"}
	le		$tmp589 ___599_i $const11 	%argrw{"wrr"}
	neq		$tmp590 $tmp589 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:582
#         vector3 cellOffset = vector3(i, j, k);
	assign		$tmp591 ___599_i 	%line{582} %argrw{"wr"}
	assign		$tmp592 ___597_j 	%argrw{"wr"}
	assign		$tmp593 ___595_k 	%argrw{"wr"}
	point		___600_cellOffset $tmp591 $tmp592 $tmp593 	%argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:584
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness -
	add		$tmp595 ___594_cellPosition ___600_cellOffset 	%line{584} %argrw{"wrr"}
	functioncall	$const59 1383 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const38 1368 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp596 $tmp595 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:39
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp598.x $tmp595 $const12 	%line{39} %argrw{"wrr"}
	compref		$tmp598.y $tmp595 $const11 	%argrw{"wrr"}
	compref		$tmp598.z $tmp595 $const21 	%argrw{"wrr"}
	assign		$tmp598.w $const2 	%argrw{"wr"}
	functioncall	$const60 1375 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp599 $tmp598.x $tmp598.y $tmp598.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp597 $tmp599 $tmp598.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:40
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp601.x $tmp595 $const12 	%line{40} %argrw{"wrr"}
	compref		$tmp601.y $tmp595 $const11 	%argrw{"wrr"}
	compref		$tmp601.z $tmp595 $const21 	%argrw{"wrr"}
	assign		$tmp601.w $const4 	%argrw{"wr"}
	functioncall	$const60 1382 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp602 $tmp601.x $tmp601.y $tmp601.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp600 $tmp602 $tmp601.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	point		$tmp594 $tmp596 $tmp597 $tmp600 	%line{38} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:584
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness -
	mul		$tmp603 $tmp594 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{584} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:583
#         vector3 vectorToPoint = cellOffset +
	add		$tmp604 ___600_cellOffset $tmp603 	%line{583} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:584
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness -
	sub		___600_vectorToPoint $tmp604 ___594_localPosition 	%line{584} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:586
#         float distanceToPoint = dot(vectorToPoint, vectorToPoint);
	dot		___600_distanceToPoint ___600_vectorToPoint ___600_vectorToPoint 	%line{586} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:587
#         if (distanceToPoint < minDistance) {
	lt		$tmp605 ___600_distanceToPoint ___594_minDistance 	%line{587} %argrw{"wrr"}
	if		$tmp605 1391 1391 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:588
#           minDistance = distanceToPoint;
	assign		___594_minDistance ___600_distanceToPoint 	%line{588} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:589
#           vectorToClosest = vectorToPoint;
	assign		___594_vectorToClosest ___600_vectorToPoint 	%line{589} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:581
#       for (int i = -1; i <= 1; i++) {
	assign		$tmp606 ___599_i 	%line{581} %argrw{"wr"}
	add		___599_i ___599_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:580
#     for (int j = -1; j <= 1; j++) {
	assign		$tmp607 ___597_j 	%line{580} %argrw{"wr"}
	add		___597_j ___597_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:579
#   for (int k = -1; k <= 1; k++) {
	assign		$tmp608 ___595_k 	%line{579} %argrw{"wr"}
	add		___595_k ___595_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:595
#   minDistance = 8.0;
	assign		___594_minDistance $const9 	%line{595} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:596
#   for (int k = -1; k <= 1; k++) {
	for		$tmp610 1400 1402 1449 1451 	%line{596} %argrw{"r"}
	assign		___602_k $const10 	%argrw{"wr"}
	le		$tmp609 ___602_k $const11 	%argrw{"wrr"}
	neq		$tmp610 $tmp609 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:597
#     for (int j = -1; j <= 1; j++) {
	for		$tmp612 1404 1406 1447 1449 	%line{597} %argrw{"r"}
	assign		___604_j $const10 	%argrw{"wr"}
	le		$tmp611 ___604_j $const11 	%argrw{"wrr"}
	neq		$tmp612 $tmp611 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:598
#       for (int i = -1; i <= 1; i++) {
	for		$tmp614 1408 1410 1445 1447 	%line{598} %argrw{"r"}
	assign		___606_i $const10 	%argrw{"wr"}
	le		$tmp613 ___606_i $const11 	%argrw{"wrr"}
	neq		$tmp614 $tmp613 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:599
#         vector3 cellOffset = vector3(i, j, k);
	assign		$tmp615 ___606_i 	%line{599} %argrw{"wr"}
	assign		$tmp616 ___604_j 	%argrw{"wr"}
	assign		$tmp617 ___602_k 	%argrw{"wr"}
	point		___607_cellOffset $tmp615 $tmp616 $tmp617 	%argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:601
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness -
	add		$tmp619 ___594_cellPosition ___607_cellOffset 	%line{601} %argrw{"wrr"}
	functioncall	$const59 1433 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const38 1418 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp620 $tmp619 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:39
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp622.x $tmp619 $const12 	%line{39} %argrw{"wrr"}
	compref		$tmp622.y $tmp619 $const11 	%argrw{"wrr"}
	compref		$tmp622.z $tmp619 $const21 	%argrw{"wrr"}
	assign		$tmp622.w $const2 	%argrw{"wr"}
	functioncall	$const60 1425 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp623 $tmp622.x $tmp622.y $tmp622.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp621 $tmp623 $tmp622.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:40
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp625.x $tmp619 $const12 	%line{40} %argrw{"wrr"}
	compref		$tmp625.y $tmp619 $const11 	%argrw{"wrr"}
	compref		$tmp625.z $tmp619 $const21 	%argrw{"wrr"}
	assign		$tmp625.w $const4 	%argrw{"wr"}
	functioncall	$const60 1432 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp626 $tmp625.x $tmp625.y $tmp625.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp624 $tmp626 $tmp625.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	point		$tmp618 $tmp620 $tmp621 $tmp624 	%line{38} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:601
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness -
	mul		$tmp627 $tmp618 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{601} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:600
#         vector3 vectorToPoint = cellOffset +
	add		$tmp628 ___607_cellOffset $tmp627 	%line{600} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:601
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness -
	sub		___607_vectorToPoint $tmp628 ___594_localPosition 	%line{601} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:603
#         vector3 perpendicularToEdge = vectorToPoint - vectorToClosest;
	sub		___607_perpendicularToEdge ___607_vectorToPoint ___594_vectorToClosest 	%line{603} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:604
#         if (dot(perpendicularToEdge, perpendicularToEdge) > 0.0001) {
	dot		$tmp629 ___607_perpendicularToEdge ___607_perpendicularToEdge 	%line{604} %argrw{"wrr"}
	gt		$tmp630 $tmp629 $const52 	%argrw{"wrr"}
	if		$tmp630 1445 1445 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:605
#           float distanceToEdge = dot((vectorToClosest + vectorToPoint) / 2.0,
	add		$tmp631 ___594_vectorToClosest ___607_vectorToPoint 	%line{605} %argrw{"wrr"}
	div		$tmp632 $tmp631 $const4 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:606
#                                      normalize((vector)perpendicularToEdge));
	normalize	$tmp633 ___607_perpendicularToEdge 	%line{606} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:605
#           float distanceToEdge = dot((vectorToClosest + vectorToPoint) / 2.0,
	dot		___608_distanceToEdge $tmp632 $tmp633 	%line{605} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:607
#           minDistance = min(minDistance, distanceToEdge);
	min		___594_minDistance ___594_minDistance ___608_distanceToEdge 	%line{607} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:598
#       for (int i = -1; i <= 1; i++) {
	assign		$tmp634 ___606_i 	%line{598} %argrw{"wr"}
	add		___606_i ___606_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:597
#     for (int j = -1; j <= 1; j++) {
	assign		$tmp635 ___604_j 	%line{597} %argrw{"wr"}
	add		___604_j ___604_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:596
#   for (int k = -1; k <= 1; k++) {
	assign		$tmp636 ___602_k 	%line{596} %argrw{"wr"}
	add		___602_k ___602_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:612
#   outDistance = minDistance;
	assign		Distance ___594_minDistance 	%line{612} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:990
#     else if (feature == "n_sphere_radius") {
	eq		$tmp637 feature $const29 	%line{990} %argrw{"wrr"}
	if		$tmp637 1572 1573 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:991
#       voronoi_n_sphere_radius_3d(coord, randomness, Radius);
	functioncall	$const66 1572 	%line{991} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:617
#   vector3 cellPosition = floor(coord);
	floor		___609_cellPosition coord 	%line{617} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:618
#   vector3 localPosition = coord - cellPosition;
	sub		___609_localPosition coord ___609_cellPosition 	%line{618} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:622
#   float minDistance = 8.0;
	assign		___609_minDistance $const9 	%line{622} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:623
#   for (int k = -1; k <= 1; k++) {
	for		$tmp639 1460 1462 1505 1507 	%line{623} %argrw{"r"}
	assign		___610_k $const10 	%argrw{"wr"}
	le		$tmp638 ___610_k $const11 	%argrw{"wrr"}
	neq		$tmp639 $tmp638 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:624
#     for (int j = -1; j <= 1; j++) {
	for		$tmp641 1464 1466 1503 1505 	%line{624} %argrw{"r"}
	assign		___612_j $const10 	%argrw{"wr"}
	le		$tmp640 ___612_j $const11 	%argrw{"wrr"}
	neq		$tmp641 $tmp640 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:625
#       for (int i = -1; i <= 1; i++) {
	for		$tmp643 1468 1470 1501 1503 	%line{625} %argrw{"r"}
	assign		___614_i $const10 	%argrw{"wr"}
	le		$tmp642 ___614_i $const11 	%argrw{"wrr"}
	neq		$tmp643 $tmp642 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:626
#         vector3 cellOffset = vector3(i, j, k);
	assign		$tmp644 ___614_i 	%line{626} %argrw{"wr"}
	assign		$tmp645 ___612_j 	%argrw{"wr"}
	assign		$tmp646 ___610_k 	%argrw{"wr"}
	point		___615_cellOffset $tmp644 $tmp645 $tmp646 	%argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:628
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness;
	add		$tmp648 ___609_cellPosition ___615_cellOffset 	%line{628} %argrw{"wrr"}
	functioncall	$const59 1493 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const38 1478 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp649 $tmp648 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:39
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp651.x $tmp648 $const12 	%line{39} %argrw{"wrr"}
	compref		$tmp651.y $tmp648 $const11 	%argrw{"wrr"}
	compref		$tmp651.z $tmp648 $const21 	%argrw{"wrr"}
	assign		$tmp651.w $const2 	%argrw{"wr"}
	functioncall	$const60 1485 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp652 $tmp651.x $tmp651.y $tmp651.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp650 $tmp652 $tmp651.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:40
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp654.x $tmp648 $const12 	%line{40} %argrw{"wrr"}
	compref		$tmp654.y $tmp648 $const11 	%argrw{"wrr"}
	compref		$tmp654.z $tmp648 $const21 	%argrw{"wrr"}
	assign		$tmp654.w $const4 	%argrw{"wr"}
	functioncall	$const60 1492 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp655 $tmp654.x $tmp654.y $tmp654.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp653 $tmp655 $tmp654.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	point		$tmp647 $tmp649 $tmp650 $tmp653 	%line{38} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:628
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness;
	mul		$tmp656 $tmp647 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{628} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:627
#         vector3 pointPosition = cellOffset +
	add		___615_pointPosition ___615_cellOffset $tmp656 	%line{627} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:629
#         float distanceToPoint = distance(pointPosition, localPosition);
	distance	___615_distanceToPoint ___615_pointPosition ___609_localPosition 	%line{629} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:630
#         if (distanceToPoint < minDistance) {
	lt		$tmp657 ___615_distanceToPoint ___609_minDistance 	%line{630} %argrw{"wrr"}
	if		$tmp657 1501 1501 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:631
#           minDistance = distanceToPoint;
	assign		___609_minDistance ___615_distanceToPoint 	%line{631} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:632
#           closestPoint = pointPosition;
	assign		___609_closestPoint ___615_pointPosition 	%line{632} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:633
#           closestPointOffset = cellOffset;
	assign		___609_closestPointOffset ___615_cellOffset 	%line{633} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:625
#       for (int i = -1; i <= 1; i++) {
	assign		$tmp658 ___614_i 	%line{625} %argrw{"wr"}
	add		___614_i ___614_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:624
#     for (int j = -1; j <= 1; j++) {
	assign		$tmp659 ___612_j 	%line{624} %argrw{"wr"}
	add		___612_j ___612_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:623
#   for (int k = -1; k <= 1; k++) {
	assign		$tmp660 ___610_k 	%line{623} %argrw{"wr"}
	add		___610_k ___610_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:639
#   minDistance = 8.0;
	assign		___609_minDistance $const9 	%line{639} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:641
#   for (int k = -1; k <= 1; k++) {
	for		$tmp662 1510 1512 1568 1570 	%line{641} %argrw{"r"}
	assign		___617_k $const10 	%argrw{"wr"}
	le		$tmp661 ___617_k $const11 	%argrw{"wrr"}
	neq		$tmp662 $tmp661 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:642
#     for (int j = -1; j <= 1; j++) {
	for		$tmp664 1514 1516 1566 1568 	%line{642} %argrw{"r"}
	assign		___619_j $const10 	%argrw{"wr"}
	le		$tmp663 ___619_j $const11 	%argrw{"wrr"}
	neq		$tmp664 $tmp663 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:643
#       for (int i = -1; i <= 1; i++) {
	for		$tmp666 1518 1520 1564 1566 	%line{643} %argrw{"r"}
	assign		___621_i $const10 	%argrw{"wr"}
	le		$tmp665 ___621_i $const11 	%argrw{"wrr"}
	neq		$tmp666 $tmp665 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:644
#         if (i == 0 && j == 0 && k == 0) {
	eq		$tmp667 ___621_i $const12 	%line{644} %argrw{"wrr"}
	neq		$tmp668 $tmp667 $const12 	%argrw{"wrr"}
	if		$tmp668 1526 1526 	%argrw{"r"}
	eq		$tmp669 ___619_j $const12 	%argrw{"wrr"}
	neq		$tmp670 $tmp669 $const12 	%argrw{"wrr"}
	assign		$tmp668 $tmp670 	%argrw{"wr"}
	neq		$tmp671 $tmp668 $const12 	%argrw{"wrr"}
	if		$tmp671 1531 1531 	%argrw{"r"}
	eq		$tmp672 ___617_k $const12 	%argrw{"wrr"}
	neq		$tmp673 $tmp672 $const12 	%argrw{"wrr"}
	assign		$tmp671 $tmp673 	%argrw{"wr"}
	if		$tmp671 1533 1533 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:645
#           continue;
	continue	%line{645}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:647
#         vector3 cellOffset = vector3(i, j, k) + closestPointOffset;
	assign		$tmp675 ___621_i 	%line{647} %argrw{"wr"}
	assign		$tmp676 ___619_j 	%argrw{"wr"}
	assign		$tmp677 ___617_k 	%argrw{"wr"}
	point		$tmp674 $tmp675 $tmp676 $tmp677 	%argrw{"wrrr"}
	add		___622_cellOffset $tmp674 ___609_closestPointOffset 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:649
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness;
	add		$tmp679 ___609_cellPosition ___622_cellOffset 	%line{649} %argrw{"wrr"}
	functioncall	$const59 1557 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const38 1542 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:21
#   return hashnoise(k);
	hashnoise	$tmp680 $tmp679 	%line{21} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:39
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp682.x $tmp679 $const12 	%line{39} %argrw{"wrr"}
	compref		$tmp682.y $tmp679 $const11 	%argrw{"wrr"}
	compref		$tmp682.z $tmp679 $const21 	%argrw{"wrr"}
	assign		$tmp682.w $const2 	%argrw{"wr"}
	functioncall	$const60 1549 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp683 $tmp682.x $tmp682.y $tmp682.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp681 $tmp683 $tmp682.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:40
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp685.x $tmp679 $const12 	%line{40} %argrw{"wrr"}
	compref		$tmp685.y $tmp679 $const11 	%argrw{"wrr"}
	compref		$tmp685.z $tmp679 $const21 	%argrw{"wrr"}
	assign		$tmp685.w $const4 	%argrw{"wr"}
	functioncall	$const60 1556 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp686 $tmp685.x $tmp685.y $tmp685.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp684 $tmp686 $tmp685.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:38
#   return vector3(hash_vector3_to_float(k),
	point		$tmp678 $tmp680 $tmp681 $tmp684 	%line{38} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:649
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) * randomness;
	mul		$tmp687 $tmp678 randomness 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{649} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:648
#         vector3 pointPosition = cellOffset +
	add		___622_pointPosition ___622_cellOffset $tmp687 	%line{648} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:650
#         float distanceToPoint = distance(closestPoint, pointPosition);
	distance	___622_distanceToPoint ___609_closestPoint ___622_pointPosition 	%line{650} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:651
#         if (distanceToPoint < minDistance) {
	lt		$tmp688 ___622_distanceToPoint ___609_minDistance 	%line{651} %argrw{"wrr"}
	if		$tmp688 1564 1564 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:652
#           minDistance = distanceToPoint;
	assign		___609_minDistance ___622_distanceToPoint 	%line{652} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:653
#           closestPointToClosestPoint = pointPosition;
	assign		___609_closestPointToClosestPoint ___622_pointPosition 	%line{653} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:643
#       for (int i = -1; i <= 1; i++) {
	assign		$tmp689 ___621_i 	%line{643} %argrw{"wr"}
	add		___621_i ___621_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:642
#     for (int j = -1; j <= 1; j++) {
	assign		$tmp690 ___619_j 	%line{642} %argrw{"wr"}
	add		___619_j ___619_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:641
#   for (int k = -1; k <= 1; k++) {
	assign		$tmp691 ___617_k 	%line{641} %argrw{"wr"}
	add		___617_k ___617_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:658
#   outRadius = distance(closestPointToClosestPoint, closestPoint) / 2.0;
	distance	$tmp692 ___609_closestPointToClosestPoint ___609_closestPoint 	%line{658} %argrw{"wrr"}
	div		Radius $tmp692 $const4 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:994
#       error("Unknown feature!");
	error		$const31 	%line{994} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:996
#     Position = (Scale != 0.0) ? Position / Scale : vector3(0.0);
	neq		$tmp693 Scale $const1 	%line{996} %argrw{"wrr"}
	if		$tmp693 1576 1577 	%argrw{"r"}
	div		Position Position Scale 	%argrw{"wrr"}
	assign		Position $const63 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:998
#   else if (dimensions == "4D") {
	eq		$tmp694 dimensions $const67 	%line{998} %argrw{"wrr"}
	if		$tmp694 2745 2746 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:999
#     vector4 coord4D = vector4(coord[0], coord[1], coord[2], w);
	compref		___721_coord4D.x coord $const12 	%line{999} %argrw{"wrr"}
	compref		___721_coord4D.y coord $const11 	%argrw{"wrr"}
	compref		___721_coord4D.z coord $const21 	%argrw{"wrr"}
	assign		___721_coord4D.w w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1001
#     if (feature == "f1") {
	eq		$tmp695 feature $const7 	%line{1001} %argrw{"wrr"}
	if		$tmp695 1780 2725 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1002
#       voronoi_f1_4d(coord4D, Exponent, randomness, metric, Distance, Color, outPosition4D);
	functioncall	$const68 1780 	%line{1002} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:692
#   vector4 cellPosition = floor(coord);
	functioncall	$const34 1591 	%line{692} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:166
#     return vector4 (floor(in.x),
	floor		___631_cellPosition.x ___721_coord4D.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{166} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:167
#                     floor(in.y),
	floor		___631_cellPosition.y ___721_coord4D.y 	%line{167} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:168
#                     floor(in.z),
	floor		___631_cellPosition.z ___721_coord4D.z 	%line{168} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:169
#                     floor(in.w));
	floor		___631_cellPosition.w ___721_coord4D.w 	%line{169} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 1596 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___631_localPosition.x ___721_coord4D.x ___631_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		___631_localPosition.y ___721_coord4D.y ___631_cellPosition.y 	%argrw{"wrr"}
	sub		___631_localPosition.z ___721_coord4D.z ___631_cellPosition.z 	%argrw{"wrr"}
	sub		___631_localPosition.w ___721_coord4D.w ___631_cellPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:695
#   float minDistance = 8.0;
	assign		___631_minDistance $const9 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{695} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:697
#   for (int u = -1; u <= 1; u++) {
	for		$tmp697 1599 1601 1748 1750 	%line{697} %argrw{"r"}
	assign		___632_u $const10 	%argrw{"wr"}
	le		$tmp696 ___632_u $const11 	%argrw{"wrr"}
	neq		$tmp697 $tmp696 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:698
#     for (int k = -1; k <= 1; k++) {
	for		$tmp699 1603 1605 1746 1748 	%line{698} %argrw{"r"}
	assign		___634_k $const10 	%argrw{"wr"}
	le		$tmp698 ___634_k $const11 	%argrw{"wrr"}
	neq		$tmp699 $tmp698 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:699
#       for (int j = -1; j <= 1; j++) {
	for		$tmp701 1607 1609 1744 1746 	%line{699} %argrw{"r"}
	assign		___636_j $const10 	%argrw{"wr"}
	le		$tmp700 ___636_j $const11 	%argrw{"wrr"}
	neq		$tmp701 $tmp700 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:700
#         for (int i = -1; i <= 1; i++) {
	for		$tmp703 1611 1613 1742 1744 	%line{700} %argrw{"r"}
	assign		___638_i $const10 	%argrw{"wr"}
	le		$tmp702 ___638_i $const11 	%argrw{"wrr"}
	neq		$tmp703 $tmp702 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:701
#           vector4 cellOffset = vector4(i, j, k, u);
	assign		___639_cellOffset.x ___638_i 	%line{701} %argrw{"wr"}
	assign		___639_cellOffset.y ___636_j 	%argrw{"wr"}
	assign		___639_cellOffset.z ___634_k 	%argrw{"wr"}
	assign		___639_cellOffset.w ___632_u 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 1622 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp706.x ___631_cellPosition.x ___639_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp706.y ___631_cellPosition.y ___639_cellOffset.y 	%argrw{"wrr"}
	add		$tmp706.z ___631_cellPosition.z ___639_cellOffset.z 	%argrw{"wrr"}
	add		$tmp706.w ___631_cellPosition.w ___639_cellOffset.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:703
#                                   hash_vector4_to_vector4(cellPosition + cellOffset) * randomness;
	functioncall	$const69 1647 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{703} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:45
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const60 1626 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{45} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp707 $tmp706.x $tmp706.y $tmp706.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp705.x $tmp707 $tmp706.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:46
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp708.x $tmp706.w 	%line{46} %argrw{"wr"}
	assign		$tmp708.y $tmp706.x 	%argrw{"wr"}
	assign		$tmp708.z $tmp706.y 	%argrw{"wr"}
	assign		$tmp708.w $tmp706.z 	%argrw{"wr"}
	functioncall	$const60 1633 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp709 $tmp708.x $tmp708.y $tmp708.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp705.y $tmp709 $tmp708.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:47
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp710.x $tmp706.z 	%line{47} %argrw{"wr"}
	assign		$tmp710.y $tmp706.w 	%argrw{"wr"}
	assign		$tmp710.z $tmp706.x 	%argrw{"wr"}
	assign		$tmp710.w $tmp706.y 	%argrw{"wr"}
	functioncall	$const60 1640 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp711 $tmp710.x $tmp710.y $tmp710.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp705.z $tmp711 $tmp710.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:48
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp712.x $tmp706.y 	%line{48} %argrw{"wr"}
	assign		$tmp712.y $tmp706.z 	%argrw{"wr"}
	assign		$tmp712.z $tmp706.w 	%argrw{"wr"}
	assign		$tmp712.w $tmp706.x 	%argrw{"wr"}
	functioncall	$const60 1647 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp713 $tmp712.x $tmp712.y $tmp712.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp705.w $tmp713 $tmp712.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 1657 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp714.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp714.y randomness 	%argrw{"wr"}
	assign		$tmp714.z randomness 	%argrw{"wr"}
	assign		$tmp714.w randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 1657 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp704.x $tmp705.x $tmp714.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp704.y $tmp705.y $tmp714.y 	%argrw{"wrr"}
	mul		$tmp704.z $tmp705.z $tmp714.z 	%argrw{"wrr"}
	mul		$tmp704.w $tmp705.w $tmp714.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 1662 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___639_pointPosition.x ___639_cellOffset.x $tmp704.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		___639_pointPosition.y ___639_cellOffset.y $tmp704.y 	%argrw{"wrr"}
	add		___639_pointPosition.z ___639_cellOffset.z $tmp704.z 	%argrw{"wrr"}
	add		___639_pointPosition.w ___639_cellOffset.w $tmp704.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:704
#           float distanceToPoint = voronoi_distance(pointPosition, localPosition, metric, exponent);
	functioncall	$const14 1731 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{704} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:665
#   if (metric == "euclidean") {
	eq		$tmp715 metric $const40 	%line{665} %argrw{"wrr"}
	if		$tmp715 1681 1731 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:666
#     return distance(a, b);
	functioncall	$const28 1680 	%line{666} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 1671 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp716.x ___639_pointPosition.x ___631_localPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp716.y ___639_pointPosition.y ___631_localPosition.y 	%argrw{"wrr"}
	sub		$tmp716.z ___639_pointPosition.z ___631_localPosition.z 	%argrw{"wrr"}
	sub		$tmp716.w ___639_pointPosition.w ___631_localPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:38
#   return length(a - b);
	functioncall	$const41 1680 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp717 $tmp716.x $tmp716.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp718 $tmp716.y $tmp716.y 	%argrw{"wrr"}
	add		$tmp719 $tmp717 $tmp718 	%argrw{"wrr"}
	mul		$tmp720 $tmp716.z $tmp716.z 	%argrw{"wrr"}
	add		$tmp721 $tmp719 $tmp720 	%argrw{"wrr"}
	mul		$tmp722 $tmp716.w $tmp716.w 	%argrw{"wrr"}
	add		$tmp723 $tmp721 $tmp722 	%argrw{"wrr"}
	sqrt		___639_distanceToPoint $tmp723 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:666
#     return distance(a, b);
	return	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{666}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:668
#   else if (metric == "manhattan") {
	eq		$tmp724 metric $const43 	%line{668} %argrw{"wrr"}
	if		$tmp724 1695 1731 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:669
#     return abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z) + abs(a.w - b.w);
	sub		$tmp726 ___639_pointPosition.x ___631_localPosition.x 	%line{669} %argrw{"wrr"}
	abs		$tmp725 $tmp726 	%argrw{"wr"}
	sub		$tmp728 ___639_pointPosition.y ___631_localPosition.y 	%argrw{"wrr"}
	abs		$tmp727 $tmp728 	%argrw{"wr"}
	add		$tmp729 $tmp725 $tmp727 	%argrw{"wrr"}
	sub		$tmp731 ___639_pointPosition.z ___631_localPosition.z 	%argrw{"wrr"}
	abs		$tmp730 $tmp731 	%argrw{"wr"}
	add		$tmp732 $tmp729 $tmp730 	%argrw{"wrr"}
	sub		$tmp734 ___639_pointPosition.w ___631_localPosition.w 	%argrw{"wrr"}
	abs		$tmp733 $tmp734 	%argrw{"wr"}
	add		___639_distanceToPoint $tmp732 $tmp733 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:671
#   else if (metric == "chebychev") {
	eq		$tmp735 metric $const44 	%line{671} %argrw{"wrr"}
	if		$tmp735 1709 1731 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:672
#     return max(abs(a.x - b.x), max(abs(a.y - b.y), max(abs(a.z - b.z), abs(a.w - b.w))));
	sub		$tmp737 ___639_pointPosition.x ___631_localPosition.x 	%line{672} %argrw{"wrr"}
	abs		$tmp736 $tmp737 	%argrw{"wr"}
	sub		$tmp740 ___639_pointPosition.y ___631_localPosition.y 	%argrw{"wrr"}
	abs		$tmp739 $tmp740 	%argrw{"wr"}
	sub		$tmp743 ___639_pointPosition.z ___631_localPosition.z 	%argrw{"wrr"}
	abs		$tmp742 $tmp743 	%argrw{"wr"}
	sub		$tmp745 ___639_pointPosition.w ___631_localPosition.w 	%argrw{"wrr"}
	abs		$tmp744 $tmp745 	%argrw{"wr"}
	max		$tmp741 $tmp742 $tmp744 	%argrw{"wrr"}
	max		$tmp738 $tmp739 $tmp741 	%argrw{"wrr"}
	max		___639_distanceToPoint $tmp736 $tmp738 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:674
#   else if (metric == "minkowski") {
	eq		$tmp746 metric $const45 	%line{674} %argrw{"wrr"}
	if		$tmp746 1729 1731 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:675
#     return pow(pow(abs(a.x - b.x), exponent) + pow(abs(a.y - b.y), exponent) +
	sub		$tmp749 ___639_pointPosition.x ___631_localPosition.x 	%line{675} %argrw{"wrr"}
	abs		$tmp748 $tmp749 	%argrw{"wr"}
	pow		$tmp747 $tmp748 Exponent 	%argrw{"wrr"}
	sub		$tmp752 ___639_pointPosition.y ___631_localPosition.y 	%argrw{"wrr"}
	abs		$tmp751 $tmp752 	%argrw{"wr"}
	pow		$tmp750 $tmp751 Exponent 	%argrw{"wrr"}
	add		$tmp753 $tmp747 $tmp750 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:676
#                    pow(abs(a.z - b.z), exponent) + pow(abs(a.w - b.w), exponent),
	sub		$tmp756 ___639_pointPosition.z ___631_localPosition.z 	%line{676} %argrw{"wrr"}
	abs		$tmp755 $tmp756 	%argrw{"wr"}
	pow		$tmp754 $tmp755 Exponent 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:675
#     return pow(pow(abs(a.x - b.x), exponent) + pow(abs(a.y - b.y), exponent) +
	add		$tmp757 $tmp753 $tmp754 	%line{675} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:676
#                    pow(abs(a.z - b.z), exponent) + pow(abs(a.w - b.w), exponent),
	sub		$tmp760 ___639_pointPosition.w ___631_localPosition.w 	%line{676} %argrw{"wrr"}
	abs		$tmp759 $tmp760 	%argrw{"wr"}
	pow		$tmp758 $tmp759 Exponent 	%argrw{"wrr"}
	add		$tmp761 $tmp757 $tmp758 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:677
#                1.0 / exponent);
	div		$tmp762 $const2 Exponent 	%line{677} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:675
#     return pow(pow(abs(a.x - b.x), exponent) + pow(abs(a.y - b.y), exponent) +
	pow		___639_distanceToPoint $tmp761 $tmp762 	%line{675} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:677
#                1.0 / exponent);
	return	%line{677}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:680
#     return 0.0;
	assign		___639_distanceToPoint $const1 	%line{680} %argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:705
#           if (distanceToPoint < minDistance) {
	lt		$tmp763 ___639_distanceToPoint ___631_minDistance 	%line{705} %argrw{"wrr"}
	if		$tmp763 1742 1742 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:706
#             targetOffset = cellOffset;
	assign		___631_targetOffset.x ___639_cellOffset.x 	%line{706} %argrw{"wr"}
	assign		___631_targetOffset.y ___639_cellOffset.y 	%argrw{"wr"}
	assign		___631_targetOffset.z ___639_cellOffset.z 	%argrw{"wr"}
	assign		___631_targetOffset.w ___639_cellOffset.w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:707
#             minDistance = distanceToPoint;
	assign		___631_minDistance ___639_distanceToPoint 	%line{707} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:708
#             targetPosition = pointPosition;
	assign		___631_targetPosition.x ___639_pointPosition.x 	%line{708} %argrw{"wr"}
	assign		___631_targetPosition.y ___639_pointPosition.y 	%argrw{"wr"}
	assign		___631_targetPosition.z ___639_pointPosition.z 	%argrw{"wr"}
	assign		___631_targetPosition.w ___639_pointPosition.w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:700
#         for (int i = -1; i <= 1; i++) {
	assign		$tmp764 ___638_i 	%line{700} %argrw{"wr"}
	add		___638_i ___638_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:699
#       for (int j = -1; j <= 1; j++) {
	assign		$tmp765 ___636_j 	%line{699} %argrw{"wr"}
	add		___636_j ___636_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:698
#     for (int k = -1; k <= 1; k++) {
	assign		$tmp766 ___634_k 	%line{698} %argrw{"wr"}
	add		___634_k ___634_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:697
#   for (int u = -1; u <= 1; u++) {
	assign		$tmp767 ___632_u 	%line{697} %argrw{"wr"}
	add		___632_u ___632_u $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:714
#   outDistance = minDistance;
	assign		Distance ___631_minDistance 	%line{714} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 1756 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp768.x ___631_cellPosition.x ___631_targetOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp768.y ___631_cellPosition.y ___631_targetOffset.y 	%argrw{"wrr"}
	add		$tmp768.z ___631_cellPosition.z ___631_targetOffset.z 	%argrw{"wrr"}
	add		$tmp768.w ___631_cellPosition.w ___631_targetOffset.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:715
#   outColor = hash_vector4_to_color(cellPosition + targetOffset);
	functioncall	$const70 1775 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{715} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:76
#   return color(hash_vector4_to_float(k),
	functioncall	$const60 1760 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{76} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp770 $tmp768.x $tmp768.y $tmp768.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp769 $tmp770 $tmp768.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:77
#                hash_vector4_to_float(vector4(k.z, k.x, k.w, k.y)),
	assign		$tmp772.x $tmp768.z 	%line{77} %argrw{"wr"}
	assign		$tmp772.y $tmp768.x 	%argrw{"wr"}
	assign		$tmp772.z $tmp768.w 	%argrw{"wr"}
	assign		$tmp772.w $tmp768.y 	%argrw{"wr"}
	functioncall	$const60 1767 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp773 $tmp772.x $tmp772.y $tmp772.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp771 $tmp773 $tmp772.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:78
#                hash_vector4_to_float(vector4(k.w, k.z, k.y, k.x)));
	assign		$tmp775.x $tmp768.w 	%line{78} %argrw{"wr"}
	assign		$tmp775.y $tmp768.z 	%argrw{"wr"}
	assign		$tmp775.z $tmp768.y 	%argrw{"wr"}
	assign		$tmp775.w $tmp768.x 	%argrw{"wr"}
	functioncall	$const60 1774 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp776 $tmp775.x $tmp775.y $tmp775.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp774 $tmp776 $tmp775.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:76
#   return color(hash_vector4_to_float(k),
	color		Color $tmp769 $tmp771 $tmp774 	%line{76} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 1780 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___721_outPosition4D.x ___631_targetPosition.x ___631_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		___721_outPosition4D.y ___631_targetPosition.y ___631_cellPosition.y 	%argrw{"wrr"}
	add		___721_outPosition4D.z ___631_targetPosition.z ___631_cellPosition.z 	%argrw{"wrr"}
	add		___721_outPosition4D.w ___631_targetPosition.w ___631_cellPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1004
#     else if (feature == "smooth_f1") {
	eq		$tmp777 feature $const17 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1004} %argrw{"wrr"}
	if		$tmp777 2002 2725 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1005
#       voronoi_smooth_f1_4d(
	functioncall	$const71 2002 	%line{1005} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:728
#   vector4 cellPosition = floor(coord);
	functioncall	$const34 1788 	%line{728} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:166
#     return vector4 (floor(in.x),
	floor		___641_cellPosition.x ___721_coord4D.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{166} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:167
#                     floor(in.y),
	floor		___641_cellPosition.y ___721_coord4D.y 	%line{167} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:168
#                     floor(in.z),
	floor		___641_cellPosition.z ___721_coord4D.z 	%line{168} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:169
#                     floor(in.w));
	floor		___641_cellPosition.w ___721_coord4D.w 	%line{169} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 1793 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___641_localPosition.x ___721_coord4D.x ___641_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		___641_localPosition.y ___721_coord4D.y ___641_cellPosition.y 	%argrw{"wrr"}
	sub		___641_localPosition.z ___721_coord4D.z ___641_cellPosition.z 	%argrw{"wrr"}
	sub		___641_localPosition.w ___721_coord4D.w ___641_cellPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:731
#   float smoothDistance = 8.0;
	assign		___641_smoothDistance $const9 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{731} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:732
#   color smoothColor = color(0.0);
	assign		___641_smoothColor $const19 	%line{732} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:733
#   vector4 smoothPosition = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___641_smoothPosition.x $const1 	%line{733} %argrw{"wr"}
	assign		___641_smoothPosition.y $const1 	%argrw{"wr"}
	assign		___641_smoothPosition.z $const1 	%argrw{"wr"}
	assign		___641_smoothPosition.w $const1 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:734
#   for (int u = -2; u <= 2; u++) {
	for		$tmp779 1801 1803 1993 1995 	%line{734} %argrw{"r"}
	assign		___642_u $const20 	%argrw{"wr"}
	le		$tmp778 ___642_u $const21 	%argrw{"wrr"}
	neq		$tmp779 $tmp778 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:735
#     for (int k = -2; k <= 2; k++) {
	for		$tmp781 1805 1807 1991 1993 	%line{735} %argrw{"r"}
	assign		___644_k $const20 	%argrw{"wr"}
	le		$tmp780 ___644_k $const21 	%argrw{"wrr"}
	neq		$tmp781 $tmp780 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:736
#       for (int j = -2; j <= 2; j++) {
	for		$tmp783 1809 1811 1989 1991 	%line{736} %argrw{"r"}
	assign		___646_j $const20 	%argrw{"wr"}
	le		$tmp782 ___646_j $const21 	%argrw{"wrr"}
	neq		$tmp783 $tmp782 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:737
#         for (int i = -2; i <= 2; i++) {
	for		$tmp785 1813 1815 1987 1989 	%line{737} %argrw{"r"}
	assign		___648_i $const20 	%argrw{"wr"}
	le		$tmp784 ___648_i $const21 	%argrw{"wrr"}
	neq		$tmp785 $tmp784 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:738
#           vector4 cellOffset = vector4(i, j, k, u);
	assign		___649_cellOffset.x ___648_i 	%line{738} %argrw{"wr"}
	assign		___649_cellOffset.y ___646_j 	%argrw{"wr"}
	assign		___649_cellOffset.z ___644_k 	%argrw{"wr"}
	assign		___649_cellOffset.w ___642_u 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 1824 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp788.x ___641_cellPosition.x ___649_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp788.y ___641_cellPosition.y ___649_cellOffset.y 	%argrw{"wrr"}
	add		$tmp788.z ___641_cellPosition.z ___649_cellOffset.z 	%argrw{"wrr"}
	add		$tmp788.w ___641_cellPosition.w ___649_cellOffset.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:740
#                                   hash_vector4_to_vector4(cellPosition + cellOffset) * randomness;
	functioncall	$const69 1849 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{740} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:45
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const60 1828 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{45} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp789 $tmp788.x $tmp788.y $tmp788.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp787.x $tmp789 $tmp788.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:46
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp790.x $tmp788.w 	%line{46} %argrw{"wr"}
	assign		$tmp790.y $tmp788.x 	%argrw{"wr"}
	assign		$tmp790.z $tmp788.y 	%argrw{"wr"}
	assign		$tmp790.w $tmp788.z 	%argrw{"wr"}
	functioncall	$const60 1835 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp791 $tmp790.x $tmp790.y $tmp790.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp787.y $tmp791 $tmp790.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:47
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp792.x $tmp788.z 	%line{47} %argrw{"wr"}
	assign		$tmp792.y $tmp788.w 	%argrw{"wr"}
	assign		$tmp792.z $tmp788.x 	%argrw{"wr"}
	assign		$tmp792.w $tmp788.y 	%argrw{"wr"}
	functioncall	$const60 1842 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp793 $tmp792.x $tmp792.y $tmp792.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp787.z $tmp793 $tmp792.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:48
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp794.x $tmp788.y 	%line{48} %argrw{"wr"}
	assign		$tmp794.y $tmp788.z 	%argrw{"wr"}
	assign		$tmp794.z $tmp788.w 	%argrw{"wr"}
	assign		$tmp794.w $tmp788.x 	%argrw{"wr"}
	functioncall	$const60 1849 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp795 $tmp794.x $tmp794.y $tmp794.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp787.w $tmp795 $tmp794.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 1859 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp796.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp796.y randomness 	%argrw{"wr"}
	assign		$tmp796.z randomness 	%argrw{"wr"}
	assign		$tmp796.w randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 1859 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp786.x $tmp787.x $tmp796.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp786.y $tmp787.y $tmp796.y 	%argrw{"wrr"}
	mul		$tmp786.z $tmp787.z $tmp796.z 	%argrw{"wrr"}
	mul		$tmp786.w $tmp787.w $tmp796.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 1864 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___649_pointPosition.x ___649_cellOffset.x $tmp786.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		___649_pointPosition.y ___649_cellOffset.y $tmp786.y 	%argrw{"wrr"}
	add		___649_pointPosition.z ___649_cellOffset.z $tmp786.z 	%argrw{"wrr"}
	add		___649_pointPosition.w ___649_cellOffset.w $tmp786.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:741
#           float distanceToPoint = voronoi_distance(pointPosition, localPosition, metric, exponent);
	functioncall	$const14 1933 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{741} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:665
#   if (metric == "euclidean") {
	eq		$tmp797 metric $const40 	%line{665} %argrw{"wrr"}
	if		$tmp797 1883 1933 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:666
#     return distance(a, b);
	functioncall	$const28 1882 	%line{666} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 1873 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp798.x ___649_pointPosition.x ___641_localPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp798.y ___649_pointPosition.y ___641_localPosition.y 	%argrw{"wrr"}
	sub		$tmp798.z ___649_pointPosition.z ___641_localPosition.z 	%argrw{"wrr"}
	sub		$tmp798.w ___649_pointPosition.w ___641_localPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:38
#   return length(a - b);
	functioncall	$const41 1882 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp799 $tmp798.x $tmp798.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp800 $tmp798.y $tmp798.y 	%argrw{"wrr"}
	add		$tmp801 $tmp799 $tmp800 	%argrw{"wrr"}
	mul		$tmp802 $tmp798.z $tmp798.z 	%argrw{"wrr"}
	add		$tmp803 $tmp801 $tmp802 	%argrw{"wrr"}
	mul		$tmp804 $tmp798.w $tmp798.w 	%argrw{"wrr"}
	add		$tmp805 $tmp803 $tmp804 	%argrw{"wrr"}
	sqrt		___649_distanceToPoint $tmp805 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:666
#     return distance(a, b);
	return	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{666}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:668
#   else if (metric == "manhattan") {
	eq		$tmp806 metric $const43 	%line{668} %argrw{"wrr"}
	if		$tmp806 1897 1933 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:669
#     return abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z) + abs(a.w - b.w);
	sub		$tmp808 ___649_pointPosition.x ___641_localPosition.x 	%line{669} %argrw{"wrr"}
	abs		$tmp807 $tmp808 	%argrw{"wr"}
	sub		$tmp810 ___649_pointPosition.y ___641_localPosition.y 	%argrw{"wrr"}
	abs		$tmp809 $tmp810 	%argrw{"wr"}
	add		$tmp811 $tmp807 $tmp809 	%argrw{"wrr"}
	sub		$tmp813 ___649_pointPosition.z ___641_localPosition.z 	%argrw{"wrr"}
	abs		$tmp812 $tmp813 	%argrw{"wr"}
	add		$tmp814 $tmp811 $tmp812 	%argrw{"wrr"}
	sub		$tmp816 ___649_pointPosition.w ___641_localPosition.w 	%argrw{"wrr"}
	abs		$tmp815 $tmp816 	%argrw{"wr"}
	add		___649_distanceToPoint $tmp814 $tmp815 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:671
#   else if (metric == "chebychev") {
	eq		$tmp817 metric $const44 	%line{671} %argrw{"wrr"}
	if		$tmp817 1911 1933 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:672
#     return max(abs(a.x - b.x), max(abs(a.y - b.y), max(abs(a.z - b.z), abs(a.w - b.w))));
	sub		$tmp819 ___649_pointPosition.x ___641_localPosition.x 	%line{672} %argrw{"wrr"}
	abs		$tmp818 $tmp819 	%argrw{"wr"}
	sub		$tmp822 ___649_pointPosition.y ___641_localPosition.y 	%argrw{"wrr"}
	abs		$tmp821 $tmp822 	%argrw{"wr"}
	sub		$tmp825 ___649_pointPosition.z ___641_localPosition.z 	%argrw{"wrr"}
	abs		$tmp824 $tmp825 	%argrw{"wr"}
	sub		$tmp827 ___649_pointPosition.w ___641_localPosition.w 	%argrw{"wrr"}
	abs		$tmp826 $tmp827 	%argrw{"wr"}
	max		$tmp823 $tmp824 $tmp826 	%argrw{"wrr"}
	max		$tmp820 $tmp821 $tmp823 	%argrw{"wrr"}
	max		___649_distanceToPoint $tmp818 $tmp820 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:674
#   else if (metric == "minkowski") {
	eq		$tmp828 metric $const45 	%line{674} %argrw{"wrr"}
	if		$tmp828 1931 1933 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:675
#     return pow(pow(abs(a.x - b.x), exponent) + pow(abs(a.y - b.y), exponent) +
	sub		$tmp831 ___649_pointPosition.x ___641_localPosition.x 	%line{675} %argrw{"wrr"}
	abs		$tmp830 $tmp831 	%argrw{"wr"}
	pow		$tmp829 $tmp830 Exponent 	%argrw{"wrr"}
	sub		$tmp834 ___649_pointPosition.y ___641_localPosition.y 	%argrw{"wrr"}
	abs		$tmp833 $tmp834 	%argrw{"wr"}
	pow		$tmp832 $tmp833 Exponent 	%argrw{"wrr"}
	add		$tmp835 $tmp829 $tmp832 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:676
#                    pow(abs(a.z - b.z), exponent) + pow(abs(a.w - b.w), exponent),
	sub		$tmp838 ___649_pointPosition.z ___641_localPosition.z 	%line{676} %argrw{"wrr"}
	abs		$tmp837 $tmp838 	%argrw{"wr"}
	pow		$tmp836 $tmp837 Exponent 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:675
#     return pow(pow(abs(a.x - b.x), exponent) + pow(abs(a.y - b.y), exponent) +
	add		$tmp839 $tmp835 $tmp836 	%line{675} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:676
#                    pow(abs(a.z - b.z), exponent) + pow(abs(a.w - b.w), exponent),
	sub		$tmp842 ___649_pointPosition.w ___641_localPosition.w 	%line{676} %argrw{"wrr"}
	abs		$tmp841 $tmp842 	%argrw{"wr"}
	pow		$tmp840 $tmp841 Exponent 	%argrw{"wrr"}
	add		$tmp843 $tmp839 $tmp840 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:677
#                1.0 / exponent);
	div		$tmp844 $const2 Exponent 	%line{677} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:675
#     return pow(pow(abs(a.x - b.x), exponent) + pow(abs(a.y - b.y), exponent) +
	pow		___649_distanceToPoint $tmp843 $tmp844 	%line{675} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:677
#                1.0 / exponent);
	return	%line{677}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:680
#     return 0.0;
	assign		___649_distanceToPoint $const1 	%line{680} %argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:743
#               0.0, 1.0, 0.5 + 0.5 * (smoothDistance - distanceToPoint) / smoothness);
	sub		$tmp845 ___641_smoothDistance ___649_distanceToPoint 	%line{743} %argrw{"wrr"}
	mul		$tmp846 $const5 $tmp845 	%argrw{"wrr"}
	div		$tmp847 $tmp846 smoothness 	%argrw{"wrr"}
	add		$tmp848 $const5 $tmp847 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:742
#           float h = smoothstep(
	smoothstep	___649_h $const1 $const2 $tmp848 	%line{742} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:744
#           float correctionFactor = smoothness * h * (1.0 - h);
	mul		$tmp849 smoothness ___649_h 	%line{744} %argrw{"wrr"}
	sub		$tmp850 $const2 ___649_h 	%argrw{"wrr"}
	mul		___649_correctionFactor $tmp849 $tmp850 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:745
#           smoothDistance = mix(smoothDistance, distanceToPoint, h) - correctionFactor;
	mix		$tmp851 ___641_smoothDistance ___649_distanceToPoint ___649_h 	%line{745} %argrw{"wrrr"}
	sub		___641_smoothDistance $tmp851 ___649_correctionFactor 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:746
#           correctionFactor /= 1.0 + 3.0 * smoothness;
	mul		$tmp852 $const22 smoothness 	%line{746} %argrw{"wrr"}
	add		$tmp853 $const2 $tmp852 	%argrw{"wrr"}
	div		___649_correctionFactor ___649_correctionFactor $tmp853 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 1951 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp854.x ___641_cellPosition.x ___649_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp854.y ___641_cellPosition.y ___649_cellOffset.y 	%argrw{"wrr"}
	add		$tmp854.z ___641_cellPosition.z ___649_cellOffset.z 	%argrw{"wrr"}
	add		$tmp854.w ___641_cellPosition.w ___649_cellOffset.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:747
#           color cellColor = hash_vector4_to_color(cellPosition + cellOffset);
	functioncall	$const70 1970 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{747} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:76
#   return color(hash_vector4_to_float(k),
	functioncall	$const60 1955 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{76} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp856 $tmp854.x $tmp854.y $tmp854.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp855 $tmp856 $tmp854.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:77
#                hash_vector4_to_float(vector4(k.z, k.x, k.w, k.y)),
	assign		$tmp858.x $tmp854.z 	%line{77} %argrw{"wr"}
	assign		$tmp858.y $tmp854.x 	%argrw{"wr"}
	assign		$tmp858.z $tmp854.w 	%argrw{"wr"}
	assign		$tmp858.w $tmp854.y 	%argrw{"wr"}
	functioncall	$const60 1962 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp859 $tmp858.x $tmp858.y $tmp858.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp857 $tmp859 $tmp858.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:78
#                hash_vector4_to_float(vector4(k.w, k.z, k.y, k.x)));
	assign		$tmp861.x $tmp854.w 	%line{78} %argrw{"wr"}
	assign		$tmp861.y $tmp854.z 	%argrw{"wr"}
	assign		$tmp861.z $tmp854.y 	%argrw{"wr"}
	assign		$tmp861.w $tmp854.x 	%argrw{"wr"}
	functioncall	$const60 1969 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp862 $tmp861.x $tmp861.y $tmp861.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp860 $tmp862 $tmp861.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:76
#   return color(hash_vector4_to_float(k),
	color		___649_cellColor $tmp855 $tmp857 $tmp860 	%line{76} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:748
#           smoothColor = mix(smoothColor, cellColor, h) - correctionFactor;
	mix		$tmp863 ___641_smoothColor ___649_cellColor ___649_h 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{748} %argrw{"wrrr"}
	sub		___641_smoothColor $tmp863 ___649_correctionFactor 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:749
#           smoothPosition = mix(smoothPosition, pointPosition, h) - correctionFactor;
	functioncall	$const48 1977 	%line{749} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		$tmp864.x ___641_smoothPosition.x ___649_pointPosition.x ___649_h 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{206} %argrw{"wrrr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		$tmp864.y ___641_smoothPosition.y ___649_pointPosition.y ___649_h 	%line{207} %argrw{"wrrr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		$tmp864.z ___641_smoothPosition.z ___649_pointPosition.z ___649_h 	%line{208} %argrw{"wrrr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		$tmp864.w ___641_smoothPosition.w ___649_pointPosition.w ___649_h 	%line{209} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 1987 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:66
#     return a - vector4(b, b, b, b);
	assign		$tmp865.x ___649_correctionFactor 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{66} %argrw{"wr"}
	assign		$tmp865.y ___649_correctionFactor 	%argrw{"wr"}
	assign		$tmp865.z ___649_correctionFactor 	%argrw{"wr"}
	assign		$tmp865.w ___649_correctionFactor 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 1987 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___641_smoothPosition.x $tmp864.x $tmp865.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		___641_smoothPosition.y $tmp864.y $tmp865.y 	%argrw{"wrr"}
	sub		___641_smoothPosition.z $tmp864.z $tmp865.z 	%argrw{"wrr"}
	sub		___641_smoothPosition.w $tmp864.w $tmp865.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:737
#         for (int i = -2; i <= 2; i++) {
	assign		$tmp866 ___648_i 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{737} %argrw{"wr"}
	add		___648_i ___648_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:736
#       for (int j = -2; j <= 2; j++) {
	assign		$tmp867 ___646_j 	%line{736} %argrw{"wr"}
	add		___646_j ___646_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:735
#     for (int k = -2; k <= 2; k++) {
	assign		$tmp868 ___644_k 	%line{735} %argrw{"wr"}
	add		___644_k ___644_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:734
#   for (int u = -2; u <= 2; u++) {
	assign		$tmp869 ___642_u 	%line{734} %argrw{"wr"}
	add		___642_u ___642_u $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:754
#   outDistance = smoothDistance;
	assign		Distance ___641_smoothDistance 	%line{754} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:755
#   outColor = smoothColor;
	assign		Color ___641_smoothColor 	%line{755} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2002 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___721_outPosition4D.x ___641_cellPosition.x ___641_smoothPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		___721_outPosition4D.y ___641_cellPosition.y ___641_smoothPosition.y 	%argrw{"wrr"}
	add		___721_outPosition4D.z ___641_cellPosition.z ___641_smoothPosition.z 	%argrw{"wrr"}
	add		___721_outPosition4D.w ___641_cellPosition.w ___641_smoothPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1008
#     else if (feature == "f2") {
	eq		$tmp870 feature $const23 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1008} %argrw{"wrr"}
	if		$tmp870 2228 2725 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1009
#       voronoi_f2_4d(coord4D, Exponent, randomness, metric, Distance, Color, outPosition4D);
	functioncall	$const72 2228 	%line{1009} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:767
#   vector4 cellPosition = floor(coord);
	functioncall	$const34 2010 	%line{767} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:166
#     return vector4 (floor(in.x),
	floor		___650_cellPosition.x ___721_coord4D.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{166} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:167
#                     floor(in.y),
	floor		___650_cellPosition.y ___721_coord4D.y 	%line{167} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:168
#                     floor(in.z),
	floor		___650_cellPosition.z ___721_coord4D.z 	%line{168} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:169
#                     floor(in.w));
	floor		___650_cellPosition.w ___721_coord4D.w 	%line{169} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 2015 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___650_localPosition.x ___721_coord4D.x ___650_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		___650_localPosition.y ___721_coord4D.y ___650_cellPosition.y 	%argrw{"wrr"}
	sub		___650_localPosition.z ___721_coord4D.z ___650_cellPosition.z 	%argrw{"wrr"}
	sub		___650_localPosition.w ___721_coord4D.w ___650_cellPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:770
#   float distanceF1 = 8.0;
	assign		___650_distanceF1 $const9 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{770} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:771
#   float distanceF2 = 8.0;
	assign		___650_distanceF2 $const9 	%line{771} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:772
#   vector4 offsetF1 = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___650_offsetF1.x $const1 	%line{772} %argrw{"wr"}
	assign		___650_offsetF1.y $const1 	%argrw{"wr"}
	assign		___650_offsetF1.z $const1 	%argrw{"wr"}
	assign		___650_offsetF1.w $const1 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:773
#   vector4 positionF1 = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___650_positionF1.x $const1 	%line{773} %argrw{"wr"}
	assign		___650_positionF1.y $const1 	%argrw{"wr"}
	assign		___650_positionF1.z $const1 	%argrw{"wr"}
	assign		___650_positionF1.w $const1 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:775
#   for (int u = -1; u <= 1; u++) {
	for		$tmp872 2027 2029 2196 2198 	%line{775} %argrw{"r"}
	assign		___651_u $const10 	%argrw{"wr"}
	le		$tmp871 ___651_u $const11 	%argrw{"wrr"}
	neq		$tmp872 $tmp871 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:776
#     for (int k = -1; k <= 1; k++) {
	for		$tmp874 2031 2033 2194 2196 	%line{776} %argrw{"r"}
	assign		___653_k $const10 	%argrw{"wr"}
	le		$tmp873 ___653_k $const11 	%argrw{"wrr"}
	neq		$tmp874 $tmp873 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:777
#       for (int j = -1; j <= 1; j++) {
	for		$tmp876 2035 2037 2192 2194 	%line{777} %argrw{"r"}
	assign		___655_j $const10 	%argrw{"wr"}
	le		$tmp875 ___655_j $const11 	%argrw{"wrr"}
	neq		$tmp876 $tmp875 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:778
#         for (int i = -1; i <= 1; i++) {
	for		$tmp878 2039 2041 2190 2192 	%line{778} %argrw{"r"}
	assign		___657_i $const10 	%argrw{"wr"}
	le		$tmp877 ___657_i $const11 	%argrw{"wrr"}
	neq		$tmp878 $tmp877 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:779
#           vector4 cellOffset = vector4(i, j, k, u);
	assign		___658_cellOffset.x ___657_i 	%line{779} %argrw{"wr"}
	assign		___658_cellOffset.y ___655_j 	%argrw{"wr"}
	assign		___658_cellOffset.z ___653_k 	%argrw{"wr"}
	assign		___658_cellOffset.w ___651_u 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2050 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp881.x ___650_cellPosition.x ___658_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp881.y ___650_cellPosition.y ___658_cellOffset.y 	%argrw{"wrr"}
	add		$tmp881.z ___650_cellPosition.z ___658_cellOffset.z 	%argrw{"wrr"}
	add		$tmp881.w ___650_cellPosition.w ___658_cellOffset.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:781
#                                   hash_vector4_to_vector4(cellPosition + cellOffset) * randomness;
	functioncall	$const69 2075 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{781} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:45
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const60 2054 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{45} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp882 $tmp881.x $tmp881.y $tmp881.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp880.x $tmp882 $tmp881.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:46
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp883.x $tmp881.w 	%line{46} %argrw{"wr"}
	assign		$tmp883.y $tmp881.x 	%argrw{"wr"}
	assign		$tmp883.z $tmp881.y 	%argrw{"wr"}
	assign		$tmp883.w $tmp881.z 	%argrw{"wr"}
	functioncall	$const60 2061 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp884 $tmp883.x $tmp883.y $tmp883.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp880.y $tmp884 $tmp883.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:47
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp885.x $tmp881.z 	%line{47} %argrw{"wr"}
	assign		$tmp885.y $tmp881.w 	%argrw{"wr"}
	assign		$tmp885.z $tmp881.x 	%argrw{"wr"}
	assign		$tmp885.w $tmp881.y 	%argrw{"wr"}
	functioncall	$const60 2068 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp886 $tmp885.x $tmp885.y $tmp885.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp880.z $tmp886 $tmp885.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:48
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp887.x $tmp881.y 	%line{48} %argrw{"wr"}
	assign		$tmp887.y $tmp881.z 	%argrw{"wr"}
	assign		$tmp887.z $tmp881.w 	%argrw{"wr"}
	assign		$tmp887.w $tmp881.x 	%argrw{"wr"}
	functioncall	$const60 2075 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp888 $tmp887.x $tmp887.y $tmp887.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp880.w $tmp888 $tmp887.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 2085 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp889.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp889.y randomness 	%argrw{"wr"}
	assign		$tmp889.z randomness 	%argrw{"wr"}
	assign		$tmp889.w randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 2085 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp879.x $tmp880.x $tmp889.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp879.y $tmp880.y $tmp889.y 	%argrw{"wrr"}
	mul		$tmp879.z $tmp880.z $tmp889.z 	%argrw{"wrr"}
	mul		$tmp879.w $tmp880.w $tmp889.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2090 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___658_pointPosition.x ___658_cellOffset.x $tmp879.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		___658_pointPosition.y ___658_cellOffset.y $tmp879.y 	%argrw{"wrr"}
	add		___658_pointPosition.z ___658_cellOffset.z $tmp879.z 	%argrw{"wrr"}
	add		___658_pointPosition.w ___658_cellOffset.w $tmp879.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:782
#           float distanceToPoint = voronoi_distance(pointPosition, localPosition, metric, exponent);
	functioncall	$const14 2159 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{782} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:665
#   if (metric == "euclidean") {
	eq		$tmp890 metric $const40 	%line{665} %argrw{"wrr"}
	if		$tmp890 2109 2159 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:666
#     return distance(a, b);
	functioncall	$const28 2108 	%line{666} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 2099 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp891.x ___658_pointPosition.x ___650_localPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp891.y ___658_pointPosition.y ___650_localPosition.y 	%argrw{"wrr"}
	sub		$tmp891.z ___658_pointPosition.z ___650_localPosition.z 	%argrw{"wrr"}
	sub		$tmp891.w ___658_pointPosition.w ___650_localPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:38
#   return length(a - b);
	functioncall	$const41 2108 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp892 $tmp891.x $tmp891.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp893 $tmp891.y $tmp891.y 	%argrw{"wrr"}
	add		$tmp894 $tmp892 $tmp893 	%argrw{"wrr"}
	mul		$tmp895 $tmp891.z $tmp891.z 	%argrw{"wrr"}
	add		$tmp896 $tmp894 $tmp895 	%argrw{"wrr"}
	mul		$tmp897 $tmp891.w $tmp891.w 	%argrw{"wrr"}
	add		$tmp898 $tmp896 $tmp897 	%argrw{"wrr"}
	sqrt		___658_distanceToPoint $tmp898 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:666
#     return distance(a, b);
	return	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{666}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:668
#   else if (metric == "manhattan") {
	eq		$tmp899 metric $const43 	%line{668} %argrw{"wrr"}
	if		$tmp899 2123 2159 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:669
#     return abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z) + abs(a.w - b.w);
	sub		$tmp901 ___658_pointPosition.x ___650_localPosition.x 	%line{669} %argrw{"wrr"}
	abs		$tmp900 $tmp901 	%argrw{"wr"}
	sub		$tmp903 ___658_pointPosition.y ___650_localPosition.y 	%argrw{"wrr"}
	abs		$tmp902 $tmp903 	%argrw{"wr"}
	add		$tmp904 $tmp900 $tmp902 	%argrw{"wrr"}
	sub		$tmp906 ___658_pointPosition.z ___650_localPosition.z 	%argrw{"wrr"}
	abs		$tmp905 $tmp906 	%argrw{"wr"}
	add		$tmp907 $tmp904 $tmp905 	%argrw{"wrr"}
	sub		$tmp909 ___658_pointPosition.w ___650_localPosition.w 	%argrw{"wrr"}
	abs		$tmp908 $tmp909 	%argrw{"wr"}
	add		___658_distanceToPoint $tmp907 $tmp908 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:671
#   else if (metric == "chebychev") {
	eq		$tmp910 metric $const44 	%line{671} %argrw{"wrr"}
	if		$tmp910 2137 2159 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:672
#     return max(abs(a.x - b.x), max(abs(a.y - b.y), max(abs(a.z - b.z), abs(a.w - b.w))));
	sub		$tmp912 ___658_pointPosition.x ___650_localPosition.x 	%line{672} %argrw{"wrr"}
	abs		$tmp911 $tmp912 	%argrw{"wr"}
	sub		$tmp915 ___658_pointPosition.y ___650_localPosition.y 	%argrw{"wrr"}
	abs		$tmp914 $tmp915 	%argrw{"wr"}
	sub		$tmp918 ___658_pointPosition.z ___650_localPosition.z 	%argrw{"wrr"}
	abs		$tmp917 $tmp918 	%argrw{"wr"}
	sub		$tmp920 ___658_pointPosition.w ___650_localPosition.w 	%argrw{"wrr"}
	abs		$tmp919 $tmp920 	%argrw{"wr"}
	max		$tmp916 $tmp917 $tmp919 	%argrw{"wrr"}
	max		$tmp913 $tmp914 $tmp916 	%argrw{"wrr"}
	max		___658_distanceToPoint $tmp911 $tmp913 	%argrw{"wrr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:674
#   else if (metric == "minkowski") {
	eq		$tmp921 metric $const45 	%line{674} %argrw{"wrr"}
	if		$tmp921 2157 2159 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:675
#     return pow(pow(abs(a.x - b.x), exponent) + pow(abs(a.y - b.y), exponent) +
	sub		$tmp924 ___658_pointPosition.x ___650_localPosition.x 	%line{675} %argrw{"wrr"}
	abs		$tmp923 $tmp924 	%argrw{"wr"}
	pow		$tmp922 $tmp923 Exponent 	%argrw{"wrr"}
	sub		$tmp927 ___658_pointPosition.y ___650_localPosition.y 	%argrw{"wrr"}
	abs		$tmp926 $tmp927 	%argrw{"wr"}
	pow		$tmp925 $tmp926 Exponent 	%argrw{"wrr"}
	add		$tmp928 $tmp922 $tmp925 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:676
#                    pow(abs(a.z - b.z), exponent) + pow(abs(a.w - b.w), exponent),
	sub		$tmp931 ___658_pointPosition.z ___650_localPosition.z 	%line{676} %argrw{"wrr"}
	abs		$tmp930 $tmp931 	%argrw{"wr"}
	pow		$tmp929 $tmp930 Exponent 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:675
#     return pow(pow(abs(a.x - b.x), exponent) + pow(abs(a.y - b.y), exponent) +
	add		$tmp932 $tmp928 $tmp929 	%line{675} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:676
#                    pow(abs(a.z - b.z), exponent) + pow(abs(a.w - b.w), exponent),
	sub		$tmp935 ___658_pointPosition.w ___650_localPosition.w 	%line{676} %argrw{"wrr"}
	abs		$tmp934 $tmp935 	%argrw{"wr"}
	pow		$tmp933 $tmp934 Exponent 	%argrw{"wrr"}
	add		$tmp936 $tmp932 $tmp933 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:677
#                1.0 / exponent);
	div		$tmp937 $const2 Exponent 	%line{677} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:675
#     return pow(pow(abs(a.x - b.x), exponent) + pow(abs(a.y - b.y), exponent) +
	pow		___658_distanceToPoint $tmp936 $tmp937 	%line{675} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:677
#                1.0 / exponent);
	return	%line{677}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:680
#     return 0.0;
	assign		___658_distanceToPoint $const1 	%line{680} %argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:783
#           if (distanceToPoint < distanceF1) {
	lt		$tmp938 ___658_distanceToPoint ___650_distanceF1 	%line{783} %argrw{"wrr"}
	if		$tmp938 2179 2190 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:784
#             distanceF2 = distanceF1;
	assign		___650_distanceF2 ___650_distanceF1 	%line{784} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:785
#             distanceF1 = distanceToPoint;
	assign		___650_distanceF1 ___658_distanceToPoint 	%line{785} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:786
#             offsetF2 = offsetF1;
	assign		___650_offsetF2.x ___650_offsetF1.x 	%line{786} %argrw{"wr"}
	assign		___650_offsetF2.y ___650_offsetF1.y 	%argrw{"wr"}
	assign		___650_offsetF2.z ___650_offsetF1.z 	%argrw{"wr"}
	assign		___650_offsetF2.w ___650_offsetF1.w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:787
#             offsetF1 = cellOffset;
	assign		___650_offsetF1.x ___658_cellOffset.x 	%line{787} %argrw{"wr"}
	assign		___650_offsetF1.y ___658_cellOffset.y 	%argrw{"wr"}
	assign		___650_offsetF1.z ___658_cellOffset.z 	%argrw{"wr"}
	assign		___650_offsetF1.w ___658_cellOffset.w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:788
#             positionF2 = positionF1;
	assign		___650_positionF2.x ___650_positionF1.x 	%line{788} %argrw{"wr"}
	assign		___650_positionF2.y ___650_positionF1.y 	%argrw{"wr"}
	assign		___650_positionF2.z ___650_positionF1.z 	%argrw{"wr"}
	assign		___650_positionF2.w ___650_positionF1.w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:789
#             positionF1 = pointPosition;
	assign		___650_positionF1.x ___658_pointPosition.x 	%line{789} %argrw{"wr"}
	assign		___650_positionF1.y ___658_pointPosition.y 	%argrw{"wr"}
	assign		___650_positionF1.z ___658_pointPosition.z 	%argrw{"wr"}
	assign		___650_positionF1.w ___658_pointPosition.w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:791
#           else if (distanceToPoint < distanceF2) {
	lt		$tmp939 ___658_distanceToPoint ___650_distanceF2 	%line{791} %argrw{"wrr"}
	if		$tmp939 2190 2190 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:792
#             distanceF2 = distanceToPoint;
	assign		___650_distanceF2 ___658_distanceToPoint 	%line{792} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:793
#             offsetF2 = cellOffset;
	assign		___650_offsetF2.x ___658_cellOffset.x 	%line{793} %argrw{"wr"}
	assign		___650_offsetF2.y ___658_cellOffset.y 	%argrw{"wr"}
	assign		___650_offsetF2.z ___658_cellOffset.z 	%argrw{"wr"}
	assign		___650_offsetF2.w ___658_cellOffset.w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:794
#             positionF2 = pointPosition;
	assign		___650_positionF2.x ___658_pointPosition.x 	%line{794} %argrw{"wr"}
	assign		___650_positionF2.y ___658_pointPosition.y 	%argrw{"wr"}
	assign		___650_positionF2.z ___658_pointPosition.z 	%argrw{"wr"}
	assign		___650_positionF2.w ___658_pointPosition.w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:778
#         for (int i = -1; i <= 1; i++) {
	assign		$tmp940 ___657_i 	%line{778} %argrw{"wr"}
	add		___657_i ___657_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:777
#       for (int j = -1; j <= 1; j++) {
	assign		$tmp941 ___655_j 	%line{777} %argrw{"wr"}
	add		___655_j ___655_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:776
#     for (int k = -1; k <= 1; k++) {
	assign		$tmp942 ___653_k 	%line{776} %argrw{"wr"}
	add		___653_k ___653_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:775
#   for (int u = -1; u <= 1; u++) {
	assign		$tmp943 ___651_u 	%line{775} %argrw{"wr"}
	add		___651_u ___651_u $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:800
#   outDistance = distanceF2;
	assign		Distance ___650_distanceF2 	%line{800} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2204 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp944.x ___650_cellPosition.x ___650_offsetF2.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp944.y ___650_cellPosition.y ___650_offsetF2.y 	%argrw{"wrr"}
	add		$tmp944.z ___650_cellPosition.z ___650_offsetF2.z 	%argrw{"wrr"}
	add		$tmp944.w ___650_cellPosition.w ___650_offsetF2.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:801
#   outColor = hash_vector4_to_color(cellPosition + offsetF2);
	functioncall	$const70 2223 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{801} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:76
#   return color(hash_vector4_to_float(k),
	functioncall	$const60 2208 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{76} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp946 $tmp944.x $tmp944.y $tmp944.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp945 $tmp946 $tmp944.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:77
#                hash_vector4_to_float(vector4(k.z, k.x, k.w, k.y)),
	assign		$tmp948.x $tmp944.z 	%line{77} %argrw{"wr"}
	assign		$tmp948.y $tmp944.x 	%argrw{"wr"}
	assign		$tmp948.z $tmp944.w 	%argrw{"wr"}
	assign		$tmp948.w $tmp944.y 	%argrw{"wr"}
	functioncall	$const60 2215 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp949 $tmp948.x $tmp948.y $tmp948.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp947 $tmp949 $tmp948.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:78
#                hash_vector4_to_float(vector4(k.w, k.z, k.y, k.x)));
	assign		$tmp951.x $tmp944.w 	%line{78} %argrw{"wr"}
	assign		$tmp951.y $tmp944.z 	%argrw{"wr"}
	assign		$tmp951.z $tmp944.y 	%argrw{"wr"}
	assign		$tmp951.w $tmp944.x 	%argrw{"wr"}
	functioncall	$const60 2222 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp952 $tmp951.x $tmp951.y $tmp951.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp950 $tmp952 $tmp951.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:76
#   return color(hash_vector4_to_float(k),
	color		Color $tmp945 $tmp947 $tmp950 	%line{76} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2228 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___721_outPosition4D.x ___650_positionF2.x ___650_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		___721_outPosition4D.y ___650_positionF2.y ___650_cellPosition.y 	%argrw{"wrr"}
	add		___721_outPosition4D.z ___650_positionF2.z ___650_cellPosition.z 	%argrw{"wrr"}
	add		___721_outPosition4D.w ___650_positionF2.w ___650_cellPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1011
#     else if (feature == "distance_to_edge") {
	eq		$tmp953 feature $const25 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1011} %argrw{"wrr"}
	if		$tmp953 2476 2725 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1012
#       voronoi_distance_to_edge_4d(coord4D, randomness, Distance);
	functioncall	$const73 2476 	%line{1012} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:807
#   vector4 cellPosition = floor(coord);
	functioncall	$const34 2236 	%line{807} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:166
#     return vector4 (floor(in.x),
	floor		___661_cellPosition.x ___721_coord4D.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{166} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:167
#                     floor(in.y),
	floor		___661_cellPosition.y ___721_coord4D.y 	%line{167} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:168
#                     floor(in.z),
	floor		___661_cellPosition.z ___721_coord4D.z 	%line{168} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:169
#                     floor(in.w));
	floor		___661_cellPosition.w ___721_coord4D.w 	%line{169} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 2241 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___661_localPosition.x ___721_coord4D.x ___661_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		___661_localPosition.y ___721_coord4D.y ___661_cellPosition.y 	%argrw{"wrr"}
	sub		___661_localPosition.z ___721_coord4D.z ___661_cellPosition.z 	%argrw{"wrr"}
	sub		___661_localPosition.w ___721_coord4D.w ___661_cellPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:811
#   float minDistance = 8.0;
	assign		___661_minDistance $const9 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{811} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:812
#   for (int u = -1; u <= 1; u++) {
	for		$tmp955 2244 2246 2333 2335 	%line{812} %argrw{"r"}
	assign		___662_u $const10 	%argrw{"wr"}
	le		$tmp954 ___662_u $const11 	%argrw{"wrr"}
	neq		$tmp955 $tmp954 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:813
#     for (int k = -1; k <= 1; k++) {
	for		$tmp957 2248 2250 2331 2333 	%line{813} %argrw{"r"}
	assign		___664_k $const10 	%argrw{"wr"}
	le		$tmp956 ___664_k $const11 	%argrw{"wrr"}
	neq		$tmp957 $tmp956 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:814
#       for (int j = -1; j <= 1; j++) {
	for		$tmp959 2252 2254 2329 2331 	%line{814} %argrw{"r"}
	assign		___666_j $const10 	%argrw{"wr"}
	le		$tmp958 ___666_j $const11 	%argrw{"wrr"}
	neq		$tmp959 $tmp958 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:815
#         for (int i = -1; i <= 1; i++) {
	for		$tmp961 2256 2258 2327 2329 	%line{815} %argrw{"r"}
	assign		___668_i $const10 	%argrw{"wr"}
	le		$tmp960 ___668_i $const11 	%argrw{"wrr"}
	neq		$tmp961 $tmp960 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:816
#           vector4 cellOffset = vector4(i, j, k, u);
	assign		___669_cellOffset.x ___668_i 	%line{816} %argrw{"wr"}
	assign		___669_cellOffset.y ___666_j 	%argrw{"wr"}
	assign		___669_cellOffset.z ___664_k 	%argrw{"wr"}
	assign		___669_cellOffset.w ___662_u 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2267 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp965.x ___661_cellPosition.x ___669_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp965.y ___661_cellPosition.y ___669_cellOffset.y 	%argrw{"wrr"}
	add		$tmp965.z ___661_cellPosition.z ___669_cellOffset.z 	%argrw{"wrr"}
	add		$tmp965.w ___661_cellPosition.w ___669_cellOffset.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:818
#                                   hash_vector4_to_vector4(cellPosition + cellOffset) * randomness -
	functioncall	$const69 2292 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{818} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:45
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const60 2271 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{45} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp966 $tmp965.x $tmp965.y $tmp965.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp964.x $tmp966 $tmp965.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:46
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp967.x $tmp965.w 	%line{46} %argrw{"wr"}
	assign		$tmp967.y $tmp965.x 	%argrw{"wr"}
	assign		$tmp967.z $tmp965.y 	%argrw{"wr"}
	assign		$tmp967.w $tmp965.z 	%argrw{"wr"}
	functioncall	$const60 2278 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp968 $tmp967.x $tmp967.y $tmp967.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp964.y $tmp968 $tmp967.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:47
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp969.x $tmp965.z 	%line{47} %argrw{"wr"}
	assign		$tmp969.y $tmp965.w 	%argrw{"wr"}
	assign		$tmp969.z $tmp965.x 	%argrw{"wr"}
	assign		$tmp969.w $tmp965.y 	%argrw{"wr"}
	functioncall	$const60 2285 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp970 $tmp969.x $tmp969.y $tmp969.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp964.z $tmp970 $tmp969.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:48
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp971.x $tmp965.y 	%line{48} %argrw{"wr"}
	assign		$tmp971.y $tmp965.z 	%argrw{"wr"}
	assign		$tmp971.z $tmp965.w 	%argrw{"wr"}
	assign		$tmp971.w $tmp965.x 	%argrw{"wr"}
	functioncall	$const60 2292 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp972 $tmp971.x $tmp971.y $tmp971.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp964.w $tmp972 $tmp971.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 2302 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp973.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp973.y randomness 	%argrw{"wr"}
	assign		$tmp973.z randomness 	%argrw{"wr"}
	assign		$tmp973.w randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 2302 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp963.x $tmp964.x $tmp973.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp963.y $tmp964.y $tmp973.y 	%argrw{"wrr"}
	mul		$tmp963.z $tmp964.z $tmp973.z 	%argrw{"wrr"}
	mul		$tmp963.w $tmp964.w $tmp973.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2307 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp962.x ___669_cellOffset.x $tmp963.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp962.y ___669_cellOffset.y $tmp963.y 	%argrw{"wrr"}
	add		$tmp962.z ___669_cellOffset.z $tmp963.z 	%argrw{"wrr"}
	add		$tmp962.w ___669_cellOffset.w $tmp963.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 2312 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___669_vectorToPoint.x $tmp962.x ___661_localPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		___669_vectorToPoint.y $tmp962.y ___661_localPosition.y 	%argrw{"wrr"}
	sub		___669_vectorToPoint.z $tmp962.z ___661_localPosition.z 	%argrw{"wrr"}
	sub		___669_vectorToPoint.w $tmp962.w ___661_localPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:820
#           float distanceToPoint = dot(vectorToPoint, vectorToPoint);
	functioncall	$const51 2320 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{820} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:219
#     return ((a.x * b.x) + (a.y * b.y) + (a.z * b.z) + (a.w * b.w));
	mul		$tmp974 ___669_vectorToPoint.x ___669_vectorToPoint.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{219} %argrw{"wrr"}
	mul		$tmp975 ___669_vectorToPoint.y ___669_vectorToPoint.y 	%argrw{"wrr"}
	add		$tmp976 $tmp974 $tmp975 	%argrw{"wrr"}
	mul		$tmp977 ___669_vectorToPoint.z ___669_vectorToPoint.z 	%argrw{"wrr"}
	add		$tmp978 $tmp976 $tmp977 	%argrw{"wrr"}
	mul		$tmp979 ___669_vectorToPoint.w ___669_vectorToPoint.w 	%argrw{"wrr"}
	add		___669_distanceToPoint $tmp978 $tmp979 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:821
#           if (distanceToPoint < minDistance) {
	lt		$tmp980 ___669_distanceToPoint ___661_minDistance 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{821} %argrw{"wrr"}
	if		$tmp980 2327 2327 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:822
#             minDistance = distanceToPoint;
	assign		___661_minDistance ___669_distanceToPoint 	%line{822} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:823
#             vectorToClosest = vectorToPoint;
	assign		___661_vectorToClosest.x ___669_vectorToPoint.x 	%line{823} %argrw{"wr"}
	assign		___661_vectorToClosest.y ___669_vectorToPoint.y 	%argrw{"wr"}
	assign		___661_vectorToClosest.z ___669_vectorToPoint.z 	%argrw{"wr"}
	assign		___661_vectorToClosest.w ___669_vectorToPoint.w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:815
#         for (int i = -1; i <= 1; i++) {
	assign		$tmp981 ___668_i 	%line{815} %argrw{"wr"}
	add		___668_i ___668_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:814
#       for (int j = -1; j <= 1; j++) {
	assign		$tmp982 ___666_j 	%line{814} %argrw{"wr"}
	add		___666_j ___666_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:813
#     for (int k = -1; k <= 1; k++) {
	assign		$tmp983 ___664_k 	%line{813} %argrw{"wr"}
	add		___664_k ___664_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:812
#   for (int u = -1; u <= 1; u++) {
	assign		$tmp984 ___662_u 	%line{812} %argrw{"wr"}
	add		___662_u ___662_u $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:830
#   minDistance = 8.0;
	assign		___661_minDistance $const9 	%line{830} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:831
#   for (int u = -1; u <= 1; u++) {
	for		$tmp986 2338 2340 2473 2475 	%line{831} %argrw{"r"}
	assign		___671_u $const10 	%argrw{"wr"}
	le		$tmp985 ___671_u $const11 	%argrw{"wrr"}
	neq		$tmp986 $tmp985 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:832
#     for (int k = -1; k <= 1; k++) {
	for		$tmp988 2342 2344 2471 2473 	%line{832} %argrw{"r"}
	assign		___673_k $const10 	%argrw{"wr"}
	le		$tmp987 ___673_k $const11 	%argrw{"wrr"}
	neq		$tmp988 $tmp987 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:833
#       for (int j = -1; j <= 1; j++) {
	for		$tmp990 2346 2348 2469 2471 	%line{833} %argrw{"r"}
	assign		___675_j $const10 	%argrw{"wr"}
	le		$tmp989 ___675_j $const11 	%argrw{"wrr"}
	neq		$tmp990 $tmp989 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:834
#         for (int i = -1; i <= 1; i++) {
	for		$tmp992 2350 2352 2467 2469 	%line{834} %argrw{"r"}
	assign		___677_i $const10 	%argrw{"wr"}
	le		$tmp991 ___677_i $const11 	%argrw{"wrr"}
	neq		$tmp992 $tmp991 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:835
#           vector4 cellOffset = vector4(i, j, k, u);
	assign		___678_cellOffset.x ___677_i 	%line{835} %argrw{"wr"}
	assign		___678_cellOffset.y ___675_j 	%argrw{"wr"}
	assign		___678_cellOffset.z ___673_k 	%argrw{"wr"}
	assign		___678_cellOffset.w ___671_u 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2361 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp996.x ___661_cellPosition.x ___678_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp996.y ___661_cellPosition.y ___678_cellOffset.y 	%argrw{"wrr"}
	add		$tmp996.z ___661_cellPosition.z ___678_cellOffset.z 	%argrw{"wrr"}
	add		$tmp996.w ___661_cellPosition.w ___678_cellOffset.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:837
#                                   hash_vector4_to_vector4(cellPosition + cellOffset) * randomness -
	functioncall	$const69 2386 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{837} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:45
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const60 2365 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{45} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp997 $tmp996.x $tmp996.y $tmp996.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp995.x $tmp997 $tmp996.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:46
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp998.x $tmp996.w 	%line{46} %argrw{"wr"}
	assign		$tmp998.y $tmp996.x 	%argrw{"wr"}
	assign		$tmp998.z $tmp996.y 	%argrw{"wr"}
	assign		$tmp998.w $tmp996.z 	%argrw{"wr"}
	functioncall	$const60 2372 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp999 $tmp998.x $tmp998.y $tmp998.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp995.y $tmp999 $tmp998.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:47
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp1000.x $tmp996.z 	%line{47} %argrw{"wr"}
	assign		$tmp1000.y $tmp996.w 	%argrw{"wr"}
	assign		$tmp1000.z $tmp996.x 	%argrw{"wr"}
	assign		$tmp1000.w $tmp996.y 	%argrw{"wr"}
	functioncall	$const60 2379 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1001 $tmp1000.x $tmp1000.y $tmp1000.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp995.z $tmp1001 $tmp1000.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:48
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp1002.x $tmp996.y 	%line{48} %argrw{"wr"}
	assign		$tmp1002.y $tmp996.z 	%argrw{"wr"}
	assign		$tmp1002.z $tmp996.w 	%argrw{"wr"}
	assign		$tmp1002.w $tmp996.x 	%argrw{"wr"}
	functioncall	$const60 2386 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1003 $tmp1002.x $tmp1002.y $tmp1002.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp995.w $tmp1003 $tmp1002.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 2396 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1004.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1004.y randomness 	%argrw{"wr"}
	assign		$tmp1004.z randomness 	%argrw{"wr"}
	assign		$tmp1004.w randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 2396 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp994.x $tmp995.x $tmp1004.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp994.y $tmp995.y $tmp1004.y 	%argrw{"wrr"}
	mul		$tmp994.z $tmp995.z $tmp1004.z 	%argrw{"wrr"}
	mul		$tmp994.w $tmp995.w $tmp1004.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2401 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp993.x ___678_cellOffset.x $tmp994.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp993.y ___678_cellOffset.y $tmp994.y 	%argrw{"wrr"}
	add		$tmp993.z ___678_cellOffset.z $tmp994.z 	%argrw{"wrr"}
	add		$tmp993.w ___678_cellOffset.w $tmp994.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 2406 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___678_vectorToPoint.x $tmp993.x ___661_localPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		___678_vectorToPoint.y $tmp993.y ___661_localPosition.y 	%argrw{"wrr"}
	sub		___678_vectorToPoint.z $tmp993.z ___661_localPosition.z 	%argrw{"wrr"}
	sub		___678_vectorToPoint.w $tmp993.w ___661_localPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 2411 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___678_perpendicularToEdge.x ___678_vectorToPoint.x ___661_vectorToClosest.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		___678_perpendicularToEdge.y ___678_vectorToPoint.y ___661_vectorToClosest.y 	%argrw{"wrr"}
	sub		___678_perpendicularToEdge.z ___678_vectorToPoint.z ___661_vectorToClosest.z 	%argrw{"wrr"}
	sub		___678_perpendicularToEdge.w ___678_vectorToPoint.w ___661_vectorToClosest.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:840
#           if (dot(perpendicularToEdge, perpendicularToEdge) > 0.0001) {
	functioncall	$const51 2419 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{840} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:219
#     return ((a.x * b.x) + (a.y * b.y) + (a.z * b.z) + (a.w * b.w));
	mul		$tmp1006 ___678_perpendicularToEdge.x ___678_perpendicularToEdge.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{219} %argrw{"wrr"}
	mul		$tmp1007 ___678_perpendicularToEdge.y ___678_perpendicularToEdge.y 	%argrw{"wrr"}
	add		$tmp1008 $tmp1006 $tmp1007 	%argrw{"wrr"}
	mul		$tmp1009 ___678_perpendicularToEdge.z ___678_perpendicularToEdge.z 	%argrw{"wrr"}
	add		$tmp1010 $tmp1008 $tmp1009 	%argrw{"wrr"}
	mul		$tmp1011 ___678_perpendicularToEdge.w ___678_perpendicularToEdge.w 	%argrw{"wrr"}
	add		$tmp1005 $tmp1010 $tmp1011 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:840
#           if (dot(perpendicularToEdge, perpendicularToEdge) > 0.0001) {
	gt		$tmp1012 $tmp1005 $const52 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{840} %argrw{"wrr"}
	if		$tmp1012 2467 2467 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2426 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1014.x ___661_vectorToClosest.x ___678_vectorToPoint.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1014.y ___661_vectorToClosest.y ___678_vectorToPoint.y 	%argrw{"wrr"}
	add		$tmp1014.z ___661_vectorToClosest.z ___678_vectorToPoint.z 	%argrw{"wrr"}
	add		$tmp1014.w ___661_vectorToClosest.w ___678_vectorToPoint.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const53 2437 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:117
#     float b_inv = 1/b;
	div		___440_b_inv $const2 $const4 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{117} %argrw{"wrr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:118
#     return a * vector4(b_inv, b_inv, b_inv, b_inv);
	assign		$tmp1015.x ___440_b_inv 	%line{118} %argrw{"wr"}
	assign		$tmp1015.y ___440_b_inv 	%argrw{"wr"}
	assign		$tmp1015.z ___440_b_inv 	%argrw{"wr"}
	assign		$tmp1015.w ___440_b_inv 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 2437 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1013.x $tmp1014.x $tmp1015.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1013.y $tmp1014.y $tmp1015.y 	%argrw{"wrr"}
	mul		$tmp1013.z $tmp1014.z $tmp1015.z 	%argrw{"wrr"}
	mul		$tmp1013.w $tmp1014.w $tmp1015.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:842
#                                        normalize(perpendicularToEdge));
	functioncall	$const54 2458 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{842} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:274
#     return a / length(a);
	functioncall	$const41 2447 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{274} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp1018 ___678_perpendicularToEdge.x ___678_perpendicularToEdge.x 	%line{224} %argrw{"wrr"}
	mul		$tmp1019 ___678_perpendicularToEdge.y ___678_perpendicularToEdge.y 	%argrw{"wrr"}
	add		$tmp1020 $tmp1018 $tmp1019 	%argrw{"wrr"}
	mul		$tmp1021 ___678_perpendicularToEdge.z ___678_perpendicularToEdge.z 	%argrw{"wrr"}
	add		$tmp1022 $tmp1020 $tmp1021 	%argrw{"wrr"}
	mul		$tmp1023 ___678_perpendicularToEdge.w ___678_perpendicularToEdge.w 	%argrw{"wrr"}
	add		$tmp1024 $tmp1022 $tmp1023 	%argrw{"wrr"}
	sqrt		$tmp1017 $tmp1024 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const53 2458 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:117
#     float b_inv = 1/b;
	div		___440_b_inv $const2 $tmp1017 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{117} %argrw{"wrr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:118
#     return a * vector4(b_inv, b_inv, b_inv, b_inv);
	assign		$tmp1025.x ___440_b_inv 	%line{118} %argrw{"wr"}
	assign		$tmp1025.y ___440_b_inv 	%argrw{"wr"}
	assign		$tmp1025.z ___440_b_inv 	%argrw{"wr"}
	assign		$tmp1025.w ___440_b_inv 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 2458 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1016.x ___678_perpendicularToEdge.x $tmp1025.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1016.y ___678_perpendicularToEdge.y $tmp1025.y 	%argrw{"wrr"}
	mul		$tmp1016.z ___678_perpendicularToEdge.z $tmp1025.z 	%argrw{"wrr"}
	mul		$tmp1016.w ___678_perpendicularToEdge.w $tmp1025.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:841
#             float distanceToEdge = dot((vectorToClosest + vectorToPoint) / 2.0,
	functioncall	$const51 2466 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{841} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:219
#     return ((a.x * b.x) + (a.y * b.y) + (a.z * b.z) + (a.w * b.w));
	mul		$tmp1026 $tmp1013.x $tmp1016.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{219} %argrw{"wrr"}
	mul		$tmp1027 $tmp1013.y $tmp1016.y 	%argrw{"wrr"}
	add		$tmp1028 $tmp1026 $tmp1027 	%argrw{"wrr"}
	mul		$tmp1029 $tmp1013.z $tmp1016.z 	%argrw{"wrr"}
	add		$tmp1030 $tmp1028 $tmp1029 	%argrw{"wrr"}
	mul		$tmp1031 $tmp1013.w $tmp1016.w 	%argrw{"wrr"}
	add		___679_distanceToEdge $tmp1030 $tmp1031 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:843
#             minDistance = min(minDistance, distanceToEdge);
	min		___661_minDistance ___661_minDistance ___679_distanceToEdge 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{843} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:834
#         for (int i = -1; i <= 1; i++) {
	assign		$tmp1032 ___677_i 	%line{834} %argrw{"wr"}
	add		___677_i ___677_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:833
#       for (int j = -1; j <= 1; j++) {
	assign		$tmp1033 ___675_j 	%line{833} %argrw{"wr"}
	add		___675_j ___675_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:832
#     for (int k = -1; k <= 1; k++) {
	assign		$tmp1034 ___673_k 	%line{832} %argrw{"wr"}
	add		___673_k ___673_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:831
#   for (int u = -1; u <= 1; u++) {
	assign		$tmp1035 ___671_u 	%line{831} %argrw{"wr"}
	add		___671_u ___671_u $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:849
#   outDistance = minDistance;
	assign		Distance ___661_minDistance 	%line{849} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1014
#     else if (feature == "n_sphere_radius") {
	eq		$tmp1036 feature $const29 	%line{1014} %argrw{"wrr"}
	if		$tmp1036 2724 2725 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1015
#       voronoi_n_sphere_radius_4d(coord4D, randomness, Radius);
	functioncall	$const74 2724 	%line{1015} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:854
#   vector4 cellPosition = floor(coord);
	functioncall	$const34 2484 	%line{854} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:166
#     return vector4 (floor(in.x),
	floor		___680_cellPosition.x ___721_coord4D.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{166} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:167
#                     floor(in.y),
	floor		___680_cellPosition.y ___721_coord4D.y 	%line{167} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:168
#                     floor(in.z),
	floor		___680_cellPosition.z ___721_coord4D.z 	%line{168} %argrw{"wr"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:169
#                     floor(in.w));
	floor		___680_cellPosition.w ___721_coord4D.w 	%line{169} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 2489 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___680_localPosition.x ___721_coord4D.x ___680_cellPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		___680_localPosition.y ___721_coord4D.y ___680_cellPosition.y 	%argrw{"wrr"}
	sub		___680_localPosition.z ___721_coord4D.z ___680_cellPosition.z 	%argrw{"wrr"}
	sub		___680_localPosition.w ___721_coord4D.w ___680_cellPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:859
#   float minDistance = 8.0;
	assign		___680_minDistance $const9 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{859} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:860
#   for (int u = -1; u <= 1; u++) {
	for		$tmp1038 2492 2494 2587 2589 	%line{860} %argrw{"r"}
	assign		___681_u $const10 	%argrw{"wr"}
	le		$tmp1037 ___681_u $const11 	%argrw{"wrr"}
	neq		$tmp1038 $tmp1037 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:861
#     for (int k = -1; k <= 1; k++) {
	for		$tmp1040 2496 2498 2585 2587 	%line{861} %argrw{"r"}
	assign		___683_k $const10 	%argrw{"wr"}
	le		$tmp1039 ___683_k $const11 	%argrw{"wrr"}
	neq		$tmp1040 $tmp1039 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:862
#       for (int j = -1; j <= 1; j++) {
	for		$tmp1042 2500 2502 2583 2585 	%line{862} %argrw{"r"}
	assign		___685_j $const10 	%argrw{"wr"}
	le		$tmp1041 ___685_j $const11 	%argrw{"wrr"}
	neq		$tmp1042 $tmp1041 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:863
#         for (int i = -1; i <= 1; i++) {
	for		$tmp1044 2504 2506 2581 2583 	%line{863} %argrw{"r"}
	assign		___687_i $const10 	%argrw{"wr"}
	le		$tmp1043 ___687_i $const11 	%argrw{"wrr"}
	neq		$tmp1044 $tmp1043 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:864
#           vector4 cellOffset = vector4(i, j, k, u);
	assign		___688_cellOffset.x ___687_i 	%line{864} %argrw{"wr"}
	assign		___688_cellOffset.y ___685_j 	%argrw{"wr"}
	assign		___688_cellOffset.z ___683_k 	%argrw{"wr"}
	assign		___688_cellOffset.w ___681_u 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2515 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1047.x ___680_cellPosition.x ___688_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1047.y ___680_cellPosition.y ___688_cellOffset.y 	%argrw{"wrr"}
	add		$tmp1047.z ___680_cellPosition.z ___688_cellOffset.z 	%argrw{"wrr"}
	add		$tmp1047.w ___680_cellPosition.w ___688_cellOffset.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:866
#                                   hash_vector4_to_vector4(cellPosition + cellOffset) * randomness;
	functioncall	$const69 2540 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{866} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:45
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const60 2519 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{45} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1048 $tmp1047.x $tmp1047.y $tmp1047.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp1046.x $tmp1048 $tmp1047.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:46
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp1049.x $tmp1047.w 	%line{46} %argrw{"wr"}
	assign		$tmp1049.y $tmp1047.x 	%argrw{"wr"}
	assign		$tmp1049.z $tmp1047.y 	%argrw{"wr"}
	assign		$tmp1049.w $tmp1047.z 	%argrw{"wr"}
	functioncall	$const60 2526 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1050 $tmp1049.x $tmp1049.y $tmp1049.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp1046.y $tmp1050 $tmp1049.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:47
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp1051.x $tmp1047.z 	%line{47} %argrw{"wr"}
	assign		$tmp1051.y $tmp1047.w 	%argrw{"wr"}
	assign		$tmp1051.z $tmp1047.x 	%argrw{"wr"}
	assign		$tmp1051.w $tmp1047.y 	%argrw{"wr"}
	functioncall	$const60 2533 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1052 $tmp1051.x $tmp1051.y $tmp1051.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp1046.z $tmp1052 $tmp1051.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:48
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp1053.x $tmp1047.y 	%line{48} %argrw{"wr"}
	assign		$tmp1053.y $tmp1047.z 	%argrw{"wr"}
	assign		$tmp1053.z $tmp1047.w 	%argrw{"wr"}
	assign		$tmp1053.w $tmp1047.x 	%argrw{"wr"}
	functioncall	$const60 2540 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1054 $tmp1053.x $tmp1053.y $tmp1053.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp1046.w $tmp1054 $tmp1053.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 2550 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1055.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1055.y randomness 	%argrw{"wr"}
	assign		$tmp1055.z randomness 	%argrw{"wr"}
	assign		$tmp1055.w randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 2550 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1045.x $tmp1046.x $tmp1055.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1045.y $tmp1046.y $tmp1055.y 	%argrw{"wrr"}
	mul		$tmp1045.z $tmp1046.z $tmp1055.z 	%argrw{"wrr"}
	mul		$tmp1045.w $tmp1046.w $tmp1055.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2555 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___688_pointPosition.x ___688_cellOffset.x $tmp1045.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		___688_pointPosition.y ___688_cellOffset.y $tmp1045.y 	%argrw{"wrr"}
	add		___688_pointPosition.z ___688_cellOffset.z $tmp1045.z 	%argrw{"wrr"}
	add		___688_pointPosition.w ___688_cellOffset.w $tmp1045.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:867
#           float distanceToPoint = distance(pointPosition, localPosition);
	functioncall	$const28 2570 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{867} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 2561 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp1056.x ___688_pointPosition.x ___680_localPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp1056.y ___688_pointPosition.y ___680_localPosition.y 	%argrw{"wrr"}
	sub		$tmp1056.z ___688_pointPosition.z ___680_localPosition.z 	%argrw{"wrr"}
	sub		$tmp1056.w ___688_pointPosition.w ___680_localPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:38
#   return length(a - b);
	functioncall	$const41 2570 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp1057 $tmp1056.x $tmp1056.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp1058 $tmp1056.y $tmp1056.y 	%argrw{"wrr"}
	add		$tmp1059 $tmp1057 $tmp1058 	%argrw{"wrr"}
	mul		$tmp1060 $tmp1056.z $tmp1056.z 	%argrw{"wrr"}
	add		$tmp1061 $tmp1059 $tmp1060 	%argrw{"wrr"}
	mul		$tmp1062 $tmp1056.w $tmp1056.w 	%argrw{"wrr"}
	add		$tmp1063 $tmp1061 $tmp1062 	%argrw{"wrr"}
	sqrt		___688_distanceToPoint $tmp1063 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:868
#           if (distanceToPoint < minDistance) {
	lt		$tmp1064 ___688_distanceToPoint ___680_minDistance 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{868} %argrw{"wrr"}
	if		$tmp1064 2581 2581 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:869
#             minDistance = distanceToPoint;
	assign		___680_minDistance ___688_distanceToPoint 	%line{869} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:870
#             closestPoint = pointPosition;
	assign		___680_closestPoint.x ___688_pointPosition.x 	%line{870} %argrw{"wr"}
	assign		___680_closestPoint.y ___688_pointPosition.y 	%argrw{"wr"}
	assign		___680_closestPoint.z ___688_pointPosition.z 	%argrw{"wr"}
	assign		___680_closestPoint.w ___688_pointPosition.w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:871
#             closestPointOffset = cellOffset;
	assign		___680_closestPointOffset.x ___688_cellOffset.x 	%line{871} %argrw{"wr"}
	assign		___680_closestPointOffset.y ___688_cellOffset.y 	%argrw{"wr"}
	assign		___680_closestPointOffset.z ___688_cellOffset.z 	%argrw{"wr"}
	assign		___680_closestPointOffset.w ___688_cellOffset.w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:863
#         for (int i = -1; i <= 1; i++) {
	assign		$tmp1065 ___687_i 	%line{863} %argrw{"wr"}
	add		___687_i ___687_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:862
#       for (int j = -1; j <= 1; j++) {
	assign		$tmp1066 ___685_j 	%line{862} %argrw{"wr"}
	add		___685_j ___685_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:861
#     for (int k = -1; k <= 1; k++) {
	assign		$tmp1067 ___683_k 	%line{861} %argrw{"wr"}
	add		___683_k ___683_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:860
#   for (int u = -1; u <= 1; u++) {
	assign		$tmp1068 ___681_u 	%line{860} %argrw{"wr"}
	add		___681_u ___681_u $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:878
#   minDistance = 8.0;
	assign		___680_minDistance $const9 	%line{878} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:880
#   for (int u = -1; u <= 1; u++) {
	for		$tmp1070 2592 2594 2706 2708 	%line{880} %argrw{"r"}
	assign		___690_u $const10 	%argrw{"wr"}
	le		$tmp1069 ___690_u $const11 	%argrw{"wrr"}
	neq		$tmp1070 $tmp1069 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:881
#     for (int k = -1; k <= 1; k++) {
	for		$tmp1072 2596 2598 2704 2706 	%line{881} %argrw{"r"}
	assign		___692_k $const10 	%argrw{"wr"}
	le		$tmp1071 ___692_k $const11 	%argrw{"wrr"}
	neq		$tmp1072 $tmp1071 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:882
#       for (int j = -1; j <= 1; j++) {
	for		$tmp1074 2600 2602 2702 2704 	%line{882} %argrw{"r"}
	assign		___694_j $const10 	%argrw{"wr"}
	le		$tmp1073 ___694_j $const11 	%argrw{"wrr"}
	neq		$tmp1074 $tmp1073 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:883
#         for (int i = -1; i <= 1; i++) {
	for		$tmp1076 2604 2606 2700 2702 	%line{883} %argrw{"r"}
	assign		___696_i $const10 	%argrw{"wr"}
	le		$tmp1075 ___696_i $const11 	%argrw{"wrr"}
	neq		$tmp1076 $tmp1075 $const12 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:884
#           if (i == 0 && j == 0 && k == 0 && u == 0) {
	eq		$tmp1077 ___696_i $const12 	%line{884} %argrw{"wrr"}
	neq		$tmp1078 $tmp1077 $const12 	%argrw{"wrr"}
	if		$tmp1078 2612 2612 	%argrw{"r"}
	eq		$tmp1079 ___694_j $const12 	%argrw{"wrr"}
	neq		$tmp1080 $tmp1079 $const12 	%argrw{"wrr"}
	assign		$tmp1078 $tmp1080 	%argrw{"wr"}
	neq		$tmp1081 $tmp1078 $const12 	%argrw{"wrr"}
	if		$tmp1081 2617 2617 	%argrw{"r"}
	eq		$tmp1082 ___692_k $const12 	%argrw{"wrr"}
	neq		$tmp1083 $tmp1082 $const12 	%argrw{"wrr"}
	assign		$tmp1081 $tmp1083 	%argrw{"wr"}
	neq		$tmp1084 $tmp1081 $const12 	%argrw{"wrr"}
	if		$tmp1084 2622 2622 	%argrw{"r"}
	eq		$tmp1085 ___690_u $const12 	%argrw{"wrr"}
	neq		$tmp1086 $tmp1085 $const12 	%argrw{"wrr"}
	assign		$tmp1084 $tmp1086 	%argrw{"wr"}
	if		$tmp1084 2624 2624 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:885
#             continue;
	continue	%line{885}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:887
#           vector4 cellOffset = vector4(i, j, k, u) + closestPointOffset;
	assign		$tmp1087.x ___696_i 	%line{887} %argrw{"wr"}
	assign		$tmp1087.y ___694_j 	%argrw{"wr"}
	assign		$tmp1087.z ___692_k 	%argrw{"wr"}
	assign		$tmp1087.w ___690_u 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2633 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___697_cellOffset.x $tmp1087.x ___680_closestPointOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		___697_cellOffset.y $tmp1087.y ___680_closestPointOffset.y 	%argrw{"wrr"}
	add		___697_cellOffset.z $tmp1087.z ___680_closestPointOffset.z 	%argrw{"wrr"}
	add		___697_cellOffset.w $tmp1087.w ___680_closestPointOffset.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2638 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1090.x ___680_cellPosition.x ___697_cellOffset.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1090.y ___680_cellPosition.y ___697_cellOffset.y 	%argrw{"wrr"}
	add		$tmp1090.z ___680_cellPosition.z ___697_cellOffset.z 	%argrw{"wrr"}
	add		$tmp1090.w ___680_cellPosition.w ___697_cellOffset.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:889
#                                   hash_vector4_to_vector4(cellPosition + cellOffset) * randomness;
	functioncall	$const69 2663 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{889} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:45
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const60 2642 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h"} %line{45} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1091 $tmp1090.x $tmp1090.y $tmp1090.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp1089.x $tmp1091 $tmp1090.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:46
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp1092.x $tmp1090.w 	%line{46} %argrw{"wr"}
	assign		$tmp1092.y $tmp1090.x 	%argrw{"wr"}
	assign		$tmp1092.z $tmp1090.y 	%argrw{"wr"}
	assign		$tmp1092.w $tmp1090.z 	%argrw{"wr"}
	functioncall	$const60 2649 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1093 $tmp1092.x $tmp1092.y $tmp1092.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp1089.y $tmp1093 $tmp1092.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:47
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp1094.x $tmp1090.z 	%line{47} %argrw{"wr"}
	assign		$tmp1094.y $tmp1090.w 	%argrw{"wr"}
	assign		$tmp1094.z $tmp1090.x 	%argrw{"wr"}
	assign		$tmp1094.w $tmp1090.y 	%argrw{"wr"}
	functioncall	$const60 2656 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1095 $tmp1094.x $tmp1094.y $tmp1094.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp1089.z $tmp1095 $tmp1094.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:48
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp1096.x $tmp1090.y 	%line{48} %argrw{"wr"}
	assign		$tmp1096.y $tmp1090.z 	%argrw{"wr"}
	assign		$tmp1096.z $tmp1090.w 	%argrw{"wr"}
	assign		$tmp1096.w $tmp1090.x 	%argrw{"wr"}
	functioncall	$const60 2663 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_hash.h:26
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1097 $tmp1096.x $tmp1096.y $tmp1096.z 	%line{26} %argrw{"wrrr"}
	hashnoise	$tmp1089.w $tmp1097 $tmp1096.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 2673 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1098.x randomness 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1098.y randomness 	%argrw{"wr"}
	assign		$tmp1098.z randomness 	%argrw{"wr"}
	assign		$tmp1098.w randomness 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const39 2673 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1088.x $tmp1089.x $tmp1098.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1088.y $tmp1089.y $tmp1098.y 	%argrw{"wrr"}
	mul		$tmp1088.z $tmp1089.z $tmp1098.z 	%argrw{"wrr"}
	mul		$tmp1088.w $tmp1089.w $tmp1098.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const36 2678 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___697_pointPosition.x ___697_cellOffset.x $tmp1088.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		___697_pointPosition.y ___697_cellOffset.y $tmp1088.y 	%argrw{"wrr"}
	add		___697_pointPosition.z ___697_cellOffset.z $tmp1088.z 	%argrw{"wrr"}
	add		___697_pointPosition.w ___697_cellOffset.w $tmp1088.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:890
#           float distanceToPoint = distance(closestPoint, pointPosition);
	functioncall	$const28 2693 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{890} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 2684 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp1099.x ___680_closestPoint.x ___697_pointPosition.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp1099.y ___680_closestPoint.y ___697_pointPosition.y 	%argrw{"wrr"}
	sub		$tmp1099.z ___680_closestPoint.z ___697_pointPosition.z 	%argrw{"wrr"}
	sub		$tmp1099.w ___680_closestPoint.w ___697_pointPosition.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:38
#   return length(a - b);
	functioncall	$const41 2693 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp1100 $tmp1099.x $tmp1099.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp1101 $tmp1099.y $tmp1099.y 	%argrw{"wrr"}
	add		$tmp1102 $tmp1100 $tmp1101 	%argrw{"wrr"}
	mul		$tmp1103 $tmp1099.z $tmp1099.z 	%argrw{"wrr"}
	add		$tmp1104 $tmp1102 $tmp1103 	%argrw{"wrr"}
	mul		$tmp1105 $tmp1099.w $tmp1099.w 	%argrw{"wrr"}
	add		$tmp1106 $tmp1104 $tmp1105 	%argrw{"wrr"}
	sqrt		___697_distanceToPoint $tmp1106 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:891
#           if (distanceToPoint < minDistance) {
	lt		$tmp1107 ___697_distanceToPoint ___680_minDistance 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{891} %argrw{"wrr"}
	if		$tmp1107 2700 2700 	%argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:892
#             minDistance = distanceToPoint;
	assign		___680_minDistance ___697_distanceToPoint 	%line{892} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:893
#             closestPointToClosestPoint = pointPosition;
	assign		___680_closestPointToClosestPoint.x ___697_pointPosition.x 	%line{893} %argrw{"wr"}
	assign		___680_closestPointToClosestPoint.y ___697_pointPosition.y 	%argrw{"wr"}
	assign		___680_closestPointToClosestPoint.z ___697_pointPosition.z 	%argrw{"wr"}
	assign		___680_closestPointToClosestPoint.w ___697_pointPosition.w 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:883
#         for (int i = -1; i <= 1; i++) {
	assign		$tmp1108 ___696_i 	%line{883} %argrw{"wr"}
	add		___696_i ___696_i $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:882
#       for (int j = -1; j <= 1; j++) {
	assign		$tmp1109 ___694_j 	%line{882} %argrw{"wr"}
	add		___694_j ___694_j $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:881
#     for (int k = -1; k <= 1; k++) {
	assign		$tmp1110 ___692_k 	%line{881} %argrw{"wr"}
	add		___692_k ___692_k $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:880
#   for (int u = -1; u <= 1; u++) {
	assign		$tmp1111 ___690_u 	%line{880} %argrw{"wr"}
	add		___690_u ___690_u $const11 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:899
#   outRadius = distance(closestPointToClosestPoint, closestPoint) / 2.0;
	functioncall	$const28 2723 	%line{899} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1028
# 
	functioncall	$const35 2714 	%line{1028} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp1113.x ___680_closestPointToClosestPoint.x ___680_closestPoint.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp1113.y ___680_closestPointToClosestPoint.y ___680_closestPoint.y 	%argrw{"wrr"}
	sub		$tmp1113.z ___680_closestPointToClosestPoint.z ___680_closestPoint.z 	%argrw{"wrr"}
	sub		$tmp1113.w ___680_closestPointToClosestPoint.w ___680_closestPoint.w 	%argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:38
#   return length(a - b);
	functioncall	$const41 2723 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{38} %argrw{"r"}
# /home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp1114 $tmp1113.x $tmp1113.x 	%filename{"/home/blender/git/blender-v293/lib/linux_centos7_x86_64/osl/share/OSL/shaders/vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp1115 $tmp1113.y $tmp1113.y 	%argrw{"wrr"}
	add		$tmp1116 $tmp1114 $tmp1115 	%argrw{"wrr"}
	mul		$tmp1117 $tmp1113.z $tmp1113.z 	%argrw{"wrr"}
	add		$tmp1118 $tmp1116 $tmp1117 	%argrw{"wrr"}
	mul		$tmp1119 $tmp1113.w $tmp1113.w 	%argrw{"wrr"}
	add		$tmp1120 $tmp1118 $tmp1119 	%argrw{"wrr"}
	sqrt		$tmp1112 $tmp1120 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:899
#   outRadius = distance(closestPointToClosestPoint, closestPoint) / 2.0;
	div		Radius $tmp1112 $const4 	%filename{"/home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl"} %line{899} %argrw{"wrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1018
#       error("Unknown feature!");
	error		$const31 	%line{1018} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1020
#     outPosition4D = safe_divide(outPosition4D, Scale);
	functioncall	$const56 2743 	%line{1020} %argrw{"r"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:50
#   return vector4((b != 0.0) ? a.x / b : 0.0,
	neq		$tmp1121 Scale $const1 	%line{50} %argrw{"wrr"}
	if		$tmp1121 2729 2730 	%argrw{"r"}
	div		___721_outPosition4D.x ___721_outPosition4D.x Scale 	%argrw{"wrr"}
	assign		___721_outPosition4D.x $const1 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:51
#                  (b != 0.0) ? a.y / b : 0.0,
	neq		$tmp1122 Scale $const1 	%line{51} %argrw{"wrr"}
	if		$tmp1122 2733 2734 	%argrw{"r"}
	div		___721_outPosition4D.y ___721_outPosition4D.y Scale 	%argrw{"wrr"}
	assign		___721_outPosition4D.y $const1 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:52
#                  (b != 0.0) ? a.z / b : 0.0,
	neq		$tmp1123 Scale $const1 	%line{52} %argrw{"wrr"}
	if		$tmp1123 2737 2738 	%argrw{"r"}
	div		___721_outPosition4D.z ___721_outPosition4D.z Scale 	%argrw{"wrr"}
	assign		___721_outPosition4D.z $const1 	%argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:53
#                  (b != 0.0) ? a.w / b : 0.0);
	neq		$tmp1124 Scale $const1 	%line{53} %argrw{"wrr"}
	if		$tmp1124 2741 2742 	%argrw{"r"}
	div		___721_outPosition4D.w ___721_outPosition4D.w Scale 	%argrw{"wrr"}
	assign		___721_outPosition4D.w $const1 	%argrw{"wr"}
	return
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1021
#     Position = vector3(outPosition4D.x, outPosition4D.y, outPosition4D.z);
	point		Position ___721_outPosition4D.x ___721_outPosition4D.y ___721_outPosition4D.z 	%line{1021} %argrw{"wrrr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1022
#     WOut = outPosition4D.w;
	assign		WOut ___721_outPosition4D.w 	%line{1022} %argrw{"wr"}
# /home/blender/git/blender-v293/blender.git/intern/cycles/kernel/shaders/node_voronoi_texture.osl:1025
#     error("Unknown dimension!");
	error		$const75 	%line{1025} %argrw{"r"}
	end
